(self.webpackChunkai=self.webpackChunkai||[]).push([[778],{7778:(Xe,Oe,te)=>{"use strict";te.r(Oe),te.d(Oe,{DraftModule:()=>lj});var Te={};te.r(Te),te.d(Te,{assertParamsValid:()=>Uh,computeFlatOffset:()=>qh,computeOutShape:()=>Hh,getNormalizedAxes:()=>H1,isSliceContinous:()=>jh,maskToAxes:()=>U1,parseSliceParams:()=>Gl,sliceInfo:()=>Kh,startForAxis:()=>Hm,startIndicesWithElidedDims:()=>Wm,stopForAxis:()=>jm,stopIndicesWithElidedDims:()=>Gm,stridesForAxis:()=>Um,stridesWithElidedDims:()=>Mm});var ot={};te.r(ot),te.d(ot,{collectGatherOpShapeInfo:()=>qd,computeOutShape:()=>Xg,segOpComputeOptimalWindowSize:()=>Kg});var Ie={};te.r(Ie),te.d(Ie,{ERF_A1:()=>Rd,ERF_A2:()=>Fd,ERF_A3:()=>Od,ERF_A4:()=>Pd,ERF_A5:()=>Ld,ERF_P:()=>Ad,PARALLELIZE_THRESHOLD:()=>Td,RowPartitionType:()=>jn,SELU_SCALE:()=>lu,SELU_SCALEALPHA:()=>iu,applyActivation:()=>nu,assertAndGetBroadcastShape:()=>Ve,assertAxesAreInnerMostDims:()=>sn,assertParamsConsistent:()=>kd,assignToTypedArray:()=>Ag,axesAreInnerMostDims:()=>rd,calculateShapes:()=>Zo,checkEinsumDimSizes:()=>Wd,checkPadOnDimRoundingMode:()=>pn,combineLocations:()=>tg,combineRaggedTensorToTensorShapes:()=>Cg,complexWithEvenIndex:()=>Eg,complexWithOddIndex:()=>Dg,computeConv2DInfo:()=>Yt,computeConv3DInfo:()=>js,computeDefaultPad:()=>Yh,computeDilation2DInfo:()=>Mo,computeOptimalWindowSize:()=>ou,computeOutAndReduceShapes:()=>Zt,computeOutShape:()=>gs,computePool2DInfo:()=>Wn,computePool3DInfo:()=>_s,convertConv2DDataFormat:()=>$s,decodeEinsumEquation:()=>zd,eitherStridesOrDilationsAreOne:()=>nn,expandShapeToKeepDim:()=>Lt,exponent:()=>Fg,exponents:()=>Rg,fromStringArrayToUint8:()=>Yg,fromUint8ToStringArray:()=>$r,getAxesPermutation:()=>Ct,getBroadcastDims:()=>ta,getComplexWithIndex:()=>Vd,getEinsumComputePath:()=>Gd,getEinsumPermutation:()=>Bd,getFusedBiasGradient:()=>tu,getFusedDyActivation:()=>eu,getImageCenter:()=>_d,getInnerMostAxes:()=>Vt,getPermuted:()=>Xo,getRaggedRank:()=>kg,getReductionAxes:()=>Wt,getReshaped:()=>Ko,getReshapedPermuted:()=>Yo,getRowPartitionTypesHelper:()=>Ng,getSliceBeginCoords:()=>$d,getSliceSize:()=>Ed,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>Lg,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>Vg,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>Mg,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>Wg,getSparseReshapeInputOutputMismatchErrorMessage:()=>Ug,getSparseReshapeInputOutputMultipleErrorMessage:()=>Gg,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>zg,getSparseReshapeNegativeOutputDimErrorMessage:()=>Bg,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>qg,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>jd,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>Hg,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>jg,getUndoAxesPermutation:()=>Ks,isIdentityPermutation:()=>Ud,log:()=>lv,mergeRealAndImagArrays:()=>Fs,prepareAndValidate:()=>Dd,prepareSplitSize:()=>Hd,segment_util:()=>ot,shouldFuse:()=>su,slice_util:()=>Te,splitRealAndImagArrays:()=>$g,stridesOrDilationsArePositive:()=>Cr,tupleValuesAreOne:()=>qs,upcastType:()=>Cn,validateDefaultValueShape:()=>Tg,validateInput:()=>MN,validateUpdateShape:()=>_g,warn:()=>Dn});var qe={};te.r(qe),te.d(qe,{addImpl:()=>Sb,bincountImpl:()=>Qp,bincountReduceImpl:()=>$b,castImpl:()=>Ib,ceilImpl:()=>Eb,concatImpl:()=>Db,equalImpl:()=>Fb,expImpl:()=>Pb,expm1Impl:()=>Vb,floorImpl:()=>Bb,gatherNdImpl:()=>Wb,gatherV2Impl:()=>Gb,greaterEqualImpl:()=>Hb,greaterImpl:()=>Ub,lessEqualImpl:()=>qb,lessImpl:()=>jb,linSpaceImpl:()=>Kb,logImpl:()=>Xb,maxImpl:()=>Yb,maximumImpl:()=>Jb,minimumImpl:()=>Qb,multiplyImpl:()=>ef,negImpl:()=>t0,notEqualImpl:()=>n0,prodImpl:()=>o0,raggedGatherImpl:()=>l0,raggedRangeImpl:()=>c0,raggedTensorToTensorImpl:()=>p0,rangeImpl:()=>f0,rsqrtImpl:()=>m0,scatterImpl:()=>ya,sigmoidImpl:()=>aD,simpleAbsImpl:()=>Nb,sliceImpl:()=>_b,sparseFillEmptyRowsImpl:()=>y0,sparseReshapeImpl:()=>x0,sparseSegmentReductionImpl:()=>lf,sqrtImpl:()=>_P,squaredDifferenceImpl:()=>b0,stridedSliceImpl:()=>w0,stringNGramsImpl:()=>v0,stringSplitImpl:()=>I0,stringToHashBucketFastImpl:()=>S0,subImpl:()=>Mb,tileImpl:()=>C0,topKImpl:()=>k0,transposeImpl:()=>Zp,uniqueImpl:()=>_0});var $e=te(9808),_e=te(7508),ze=te(6418),me=te(7805);function V(n,t,e,s,r,a,o){try{var i=n[a](o),l=i.value}catch(u){return void e(u)}i.done?t(l):Promise.resolve(l).then(s,r)}function A(n){return function(){var t=this,e=arguments;return new Promise(function(s,r){var a=n.apply(t,e);function o(l){V(a,s,r,o,i,"next",l)}function i(l){V(a,s,r,o,i,"throw",l)}o(void 0)})}}class U{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class Z{refCount(t){return Y("refCount")}incRef(t){return Y("incRef")}timerAvailable(){return!0}time(t){return Y("time")}read(t){return Y("read")}readSync(t){return Y("readSync")}readToGPU(t,e){return Y("readToGPU")}numDataIds(){return Y("numDataIds")}disposeData(t,e){return Y("disposeData")}write(t,e,s){return Y("write")}move(t,e,s,r,a){return Y("move")}createTensorFromGPUData(t,e,s){return Y("createTensorFromGPUData")}memory(){return Y("memory")}floatPrecision(){return Y("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return Y("dispose")}}function Y(n){throw new Error(`'${n}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function De(n){let t=n.length,e=0;for(;t>0;)e=Math.random()*t|0,t--,It(n,t,e)}function Ae(n,t,e){return Math.max(n,Math.min(t,e))}function vt(n){return n%2==0?n:n+1}function It(n,t,e){const s=n[t];n[t]=n[e],n[e]=s}function v(n,t){if(!n)throw new Error("string"==typeof t?t:t())}function J(n,t,e=""){v(ye(n,t),()=>e+` Shapes ${n} and ${t} must match`)}function T(n){v(null!=n,()=>"The input to the tensor constructor must be a non-null value.")}function E(n){if(0===n.length)return 1;let t=n[0];for(let e=1;e<n.length;e++)t*=n[e];return t}function ye(n,t){if(n===t)return!0;if(null==n||null==t||n.length!==t.length)return!1;for(let e=0;e<n.length;e++)if(n[e]!==t[e])return!1;return!0}function Be(n){return n%1==0}function _t(n){const t=Math.ceil(Math.sqrt(n));return[t,Math.ceil(n/t)]}function $t(n,t){return t<=n.length?n:n+" ".repeat(t-n.length)}function Et(n,t=(r=>0),e,s){return new Promise((r,a)=>{let o=0;const i=()=>{if(n())return void r();o++;const l=t(o);null!=e&&o>=e?a():null!=s?s(i,l):setTimeout(i,l)};i()})}function bn(n,t){let e=1,s=-1;for(let a=0;a<n.length;++a)if(n[a]>=0)e*=n[a];else if(-1===n[a]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${a}`);s=a}else if(n[a]<0)throw Error(`Shapes can not be < 0. Found ${n[a]} at dim ${a}`);if(-1===s){if(t>0&&t!==e)throw Error(`Size(${t}) must match the product of shape ${n}`);return n}if(0===e)throw Error(`Cannot infer the missing size in [${n}] when there are 0 elements`);if(t%e!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${e}`);const r=n.slice();return r[s]=t/e,r}function ve(n,t){const e=t.length;return v((n=null==n?t.map((s,r)=>r):[].concat(n)).every(s=>s>=-e&&s<e),()=>`All values in axis param must be in range [-${e}, ${e}) but got axis ${n}`),v(n.every(s=>Be(s)),()=>`All values in axis param must be integers but got axis ${n}`),n.map(s=>s<0?e+s:s)}function Ft(n,t){const e=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||r?null:ve(t,n).sort();let o=0;for(let i=0;i<n.length;++i){if(null!=a){if(a[o]===i&&1!==n[i])throw new Error(`Can't squeeze axis ${i} since its dim '${n[i]}' is not 1`);(null==a[o]||a[o]>i)&&1===n[i]&&(e.push(n[i]),s.push(i)),a[o]<=i&&o++}1!==n[i]&&(e.push(n[i]),s.push(i))}return{newShape:e,keptDims:s}}function Dt(n,t){let e=null;if(null==n||"float32"===n)e=new Float32Array(t);else if("int32"===n)e=new Int32Array(t);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);e=new Uint8Array(t)}return e}function zt(n,t){let e=null;if(null==n||"float32"===n)e=new Float32Array(t);else if("int32"===n)e=new Int32Array(t);else if("bool"===n)e=new Uint8Array(t);else{if("string"!==n)throw new Error(`Unknown data type ${n}`);e=new Array(t)}return e}function Tf(n,t){return!("complex64"===t||"float32"===t&&"complex64"!==n||"int32"===t&&"float32"!==n&&"complex64"!==n||"bool"===t&&"bool"===n)}function ki(n){if("float32"===n||"int32"===n)return 4;if("complex64"===n)return 8;if("bool"===n)return 1;throw new Error(`Unknown dtype ${n}`)}function Da(n){return"string"==typeof n||n instanceof String}function hc(n){return"number"==typeof n}function Aa(n){return Array.isArray(n)?Aa(n[0]):n instanceof Float32Array?"float32":n instanceof Int32Array||n instanceof Uint8Array||n instanceof Uint8ClampedArray?"int32":hc(n)?"float32":Da(n)?"string":function Jw(n){return"boolean"==typeof n}(n)?"bool":"float32"}function dc(n){return!!(n&&n.constructor&&n.call&&n.apply)}function pc(n,t){for(let e=t;e<n;++e)if(n%e==0)return e;return n}function Se(n){const t=n.length;if(t<2)return[];const e=new Array(t-1);e[t-2]=n[t-1];for(let s=t-3;s>=0;--s)e[s]=e[s+1]*n[s+1];return e}function _f(n,t,e,s=!1){const r=new Array;if(1===t.length){const a=t[0]*(s?2:1);for(let o=0;o<a;o++)r[o]=e[n+o]}else{const a=t[0],o=t.slice(1),i=o.reduce((l,u)=>l*u)*(s?2:1);for(let l=0;l<a;l++)r[l]=_f(n+l*i,o,e,s)}return r}function Jn(n,t,e=!1){if(0===n.length)return t[0];const s=n.reduce((r,a)=>r*a)*(e?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${n}] does not match the input size ${t.length}${e?" for a complex tensor":""}.`);return _f(0,n,t,e)}function fc(n,t){const e=on(n,t);for(let s=0;s<e.length;s++)e[s]=1;return e}function on(n,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(n);if("int32"===t)return new Int32Array(n);if("bool"===t)return new Uint8Array(n);throw new Error(`Unknown data type ${t}`)}function $f(n,t){const e=n.reduce((s,r)=>s*r,1);if(null==t||"float32"===t)return Jn(n,new Float32Array(e));if("int32"===t)return Jn(n,new Int32Array(e));if("bool"===t)return Jn(n,new Uint8Array(e));throw new Error(`Unknown data type ${t}`)}function ks(n){n.forEach(t=>{v(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${n}].`)})}function hs(n,t,e){if(0===t)return 0;if(1===t)return n[0];let s=n[n.length-1];for(let r=0;r<n.length-1;++r)s+=e[r]*n[r];return s}function Ur(n,t,e){if(0===t)return[];if(1===t)return[n];const s=new Array(t);for(let r=0;r<s.length-1;++r)s[r]=Math.floor(n/e[r]),n-=s[r]*e[r];return s[s.length-1]=n,s}function mc(n){return n&&n.then&&"function"==typeof n.then}const Ef="tfjsflags";class ev{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=tv,this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&(z().getBool("IS_TEST")||z().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)),this.platformName=t,this.platform=e}registerFlag(t,e,s){if(this.flagRegistry[t]={evaluationFn:e,setHook:s},null!=this.urlFlags[t]){const r=this.urlFlags[t];z().getBool("IS_TEST")||z().getBool("PROD")||console.warn(`Setting feature override from URL ${t}: ${r}.`),this.set(t,r)}}getAsync(t){var e=this;return A(function*(){return t in e.flags||(e.flags[t]=yield e.evaluateFlag(t)),e.flags[t]})()}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(mc(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const t=this.getQueryParams(this.global.location.search);Ef in t&&t[Ef].split(",").forEach(s=>{const[r,a]=s.split(":");this.urlFlags[r]=function sv(n,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${n}.`)}(r,a)})}}function tv(n){const t={};return n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...s)=>(function nv(n,t,e){n[decodeURIComponent(t)]=decodeURIComponent(e||"")}(t,s[0],s[1]),s.join("="))),t}function z(){return Df}let gc,Df=null;function Af(){if(null==gc){let n;if("undefined"!=typeof window)n=window;else if("undefined"!=typeof global)n=global;else if("undefined"!=typeof process)n=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");n=self}gc=n}return gc}function yc(n,t){const e=function av(){const n=Af();return null==n._tfGlobals&&(n._tfGlobals=new Map),n._tfGlobals}();if(e.has(n))return e.get(n);{const s=t();return e.set(n,s),e.get(n)}}const Ti="Abs",Ra="Acos",Fa="Acosh",Hr="Add",xc="AddN",_i="ArgMax",$i="ArgMin",Oa="Asin",Pa="Asinh",La="Atan",Va="Atanh",Ma="Atan2",Ei="AvgPool",vc="AvgPoolGrad",Di="AvgPool3D",Ic="AvgPool3DGrad",Ai="BatchMatMul",Ri="BatchToSpaceND",Sc="Bincount",Rf="BroadcastArgs",za="Cast",Ba="Ceil",Wa="ClipByValue",Cc="Complex",Fi="ComplexAbs",Oi="Concat",Pi="Conv2D",Nc="Conv2DBackpropFilter",Li="Conv2DBackpropInput",Vi="Conv3D",kc="Conv3DBackpropFilterV2",Tc="Conv3DBackpropInputV2",Ga="Cos",Ua="Cosh",_c="Cumprod",Mi="Cumsum",$c="CropAndResize",Ec="DenseBincount",Dc="DepthToSpace",zi="DepthwiseConv2dNative",Ac="DepthwiseConv2dNativeBackpropFilter",Rc="DepthwiseConv2dNativeBackpropInput",Bi="Dilation2D",Fc="Dilation2DBackpropInput",Oc="Dilation2DBackpropFilter",Ha="RealDiv",ja="Elu",Pc="EluGrad",qa="Erf",Wi="Equal",Ka="Exp",Gi="ExpandDims",Xa="Expm1",Vc="Fill",Mc="FlipLeftRight",Ya="Floor",Za="FloorDiv",Ui="FusedBatchNorm",Hi="GatherV2",Pf="GatherNd",ji="Greater",Ja="GreaterEqual",Qa="Identity",zc="IFFT",Bc="Imag",eo="IsFinite",to="IsInf",no="IsNan",qi="LeakyRelu",Ki="Less",Xi="LessEqual",Lf="LinSpace",so="Log",ro="Log1p",Yi="LogicalAnd",Zi="LogicalNot",Ji="LogicalOr",Qi="LRN",Wc="LRNGrad",el="Max",ao="Maximum",tl="MaxPool",Gc="MaxPoolGrad",nl="MaxPool3D",Uc="MaxPool3DGrad",Vf="MaxPoolWithArgmax",sl="Mean",rl="Min",oo="Minimum",al="MirrorPad",lo="Mod",Mf="Multinomial",uo="Multiply",ol="Neg",il="NotEqual",Hc="NonMaxSuppressionV3",jc="NonMaxSuppressionV4",qc="NonMaxSuppressionV5",ll="OnesLike",ul="OneHot",cl="Pack",hl="PadV2",co="Pow",dl="Prelu",pl="Prod",zf="RaggedGather",Bf="RaggedRange",Wf="RaggedTensorToTensor",Kc="Range",Xc="Real",ho="Reciprocal",po="Relu",fl="Reshape",ml="ResizeNearestNeighbor",Yc="ResizeNearestNeighborGrad",gl="ResizeBilinear",Zc="ResizeBilinearGrad",fo="Relu6",yl="Reverse",mo="Round",go="Rsqrt",Gf="ScatterNd",Uf="SearchSorted",xl="Select",yo="Selu",bl="Slice",xo="Sin",bo="Sinh",wo="Sign",vo="Sigmoid",Io="Softplus",So="Sqrt",wl="Sum",vl="SpaceToBatchND",Il="SplitV",Sl="Softmax",Jc="SparseFillEmptyRows",Qc="SparseReshape",eh="SparseSegmentMean",th="SparseSegmentSum",Hf="SparseToDense",Co="SquaredDifference",nh="Square",sh="StridedSlice",rh="StringNGrams",ah="StringSplit",oh="StringToHashBucketFast",No="Sub",ko="Tan",To="Tanh",_o="Tile",ih="TopK",lh="Transform",jr="Transpose",uh="Unique",Cl="Unpack",Nl="UnsortedSegmentSum",kl="ZerosLike",$o="Step",ch="FromPixels",hh="RotateWithOffset",Tl="_FusedMatMul",_l="FusedConv2D",$l="FusedDepthwiseConv2D";function Dn(...n){z().getBool("IS_TEST")||z().getBool("PROD")||console.warn(...n)}function lv(...n){z().getBool("IS_TEST")||z().getBool("PROD")||console.log(...n)}const qr=yc("kernelRegistry",()=>new Map),Eo=yc("gradRegistry",()=>new Map);function dh(n,t){const e=mh(n,t);return qr.get(e)}function jf(n){return Eo.get(n)}function ph(n){const t=qr.entries(),e=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[a,o]=r,[i]=a.split("_");i===n&&e.push(o)}return e}function fh(n){const{kernelName:t,backendName:e}=n,s=mh(t,e);qr.has(s)&&Dn(`The kernel '${t}' for backend '${e}' is already registered`),qr.set(s,n)}function uv(n){const{kernelName:t}=n;Eo.has(t)&&z().getBool("DEBUG")&&Dn(`Overriding the gradient for '${t}'`),Eo.set(t,n)}function mh(n,t){return`${t}_${n}`}var qf=te(7658);const mr=te.n(qf)()||qf;function El(n){return mr.fromString(n,!0,16)}const Kf=El("c3a5c85c97cb3127"),gr=El("b492b66fbe98f273"),cn=El("9ae16a3b2f90404f");function gh(n){return n.xor(n.shru(47))}function Xf(n,t,e){const s=n.slice(t,t+e);return mr.fromBytes(Array.from(s),!0,!0)}function ht(n,t){return Xf(n,t,8)}function Yf(n,t){return Xf(n,t,4)}function Kt(n,t){return 0===t?n:n.shru(t).or(n.shl(64-t))}function Ms(n,t,e=El("9ddfea08eb382d69")){let s=n.xor(t).mul(e);s=s.xor(s.shru(47));let r=t.xor(s).mul(e);return r=r.xor(r.shru(47)),r=r.mul(e),r}function Dl(n,t,e,s){return function hv(n,t,e,s,r,a){r=r.add(n),a=Kt(a.add(r).add(s),21);const o=r;return r=(r=r.add(t)).add(e),a=a.add(Kt(r,44)),[r.add(s),a.add(o)]}(ht(n,t),ht(n,t+8),ht(n,t+16),ht(n,t+24),e,s)}function mv(n,t=n.length){const e=mr.fromNumber(81,!0);if(t<=32)return t<=16?function dv(n,t=n.length){if(t>=8){const e=cn.add(2*t),s=ht(n,0).add(cn),r=ht(n,t-8);return Ms(Kt(r,37).mul(e).add(s),Kt(s,25).add(r).mul(e),e)}if(t>=4){const e=cn.add(2*t);return Ms(Yf(n,0).shl(3).add(t),Yf(n,t-4),e)}if(t>0){const o=t+(n[t-1]<<2);return gh(cn.mul(n[0]+(n[t>>1]<<8)).xor(Kf.mul(o))).mul(cn)}return cn}(n,t):function pv(n,t=n.length){const e=cn.add(2*t),s=ht(n,0).mul(gr),r=ht(n,8),a=ht(n,t-8).mul(e),o=ht(n,t-16).mul(cn);return Ms(Kt(s.add(r),43).add(Kt(a,30)).add(o),s.add(Kt(r.add(cn),18)).add(a),e)}(n,t);if(t<=64)return function fv(n,t=n.length){const e=cn.add(2*t),s=ht(n,0).mul(cn),r=ht(n,8),a=ht(n,t-8).mul(e),o=ht(n,t-16).mul(cn),i=Kt(s.add(r),43).add(Kt(a,30)).add(o),l=Ms(i,s.add(Kt(r.add(cn),18)).add(a),e),u=ht(n,16).mul(e),c=ht(n,24),h=i.add(ht(n,t-32)).mul(e),d=l.add(ht(n,t-24)).mul(e);return Ms(Kt(u.add(c),43).add(Kt(h,30)).add(d),u.add(Kt(c.add(s),18)).add(h),e)}(n,t);let s=e,r=e.mul(gr).add(113),a=gh(r.mul(cn).add(113)).mul(cn),o=[mr.UZERO,mr.UZERO],i=[mr.UZERO,mr.UZERO];s=s.mul(cn).add(ht(n,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{s=Kt(s.add(r).add(o[0]).add(ht(n,l+8)),37).mul(gr),r=Kt(r.add(o[1]).add(ht(n,l+48)),42).mul(gr),s=s.xor(i[1]),r=r.add(o[0]).add(ht(n,l+40)),a=Kt(a.add(i[0]),33).mul(gr),o=Dl(n,l,o[1].mul(gr),s.add(i[0])),i=Dl(n,l+32,a.add(i[1]),r.add(ht(n,l+16))),[a,s]=[s,a],l+=64}while(l!==u);const h=gr.add(a.and(255).shl(1));return l=c,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),s=Kt(s.add(r).add(o[0]).add(ht(n,l+8)),37).mul(h),r=Kt(r.add(o[1]).add(ht(n,l+48)),42).mul(h),s=s.xor(i[1].mul(9)),r=r.add(o[0].mul(9).add(ht(n,l+40))),a=Kt(a.add(i[0]),33).mul(h),o=Dl(n,l,o[1].mul(h),s.add(i[0])),i=Dl(n,l+32,a.add(i[1]),r.add(ht(n,l+16))),[a,s]=[s,a],Ms(Ms(o[0],i[0],h).add(gh(r).mul(Kf)).add(a),Ms(o[1],i[1],h).add(s),h)}function zs(n,t){return"string"===t?Bs(n):yr([n],t)}function yr(n,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(n)&&(n=xr(n)),z().getBool("DEBUG")&&function Xw(n,t){for(let e=0;e<n.length;e++){const s=n[e];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}(n,t),function gv(n,t){return n instanceof Float32Array&&"float32"===t||n instanceof Int32Array&&"int32"===t||n instanceof Uint8Array&&"bool"===t}(n,t))return n;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(n);if("int32"===t)return new Int32Array(n);if("bool"===t){const e=new Uint8Array(n.length);for(let s=0;s<e.length;++s)0!==Math.round(n[s])&&(e[s]=1);return e}throw new Error(`Unknown data type ${t}`)}function wn(){return z().platform.now()}function Bs(n,t="utf-8"){return t=t||"utf-8",z().platform.encode(n,t)}function Ws(n,t="utf-8"){return t=t||"utf-8",z().platform.decode(n,t)}function Qn(n){return z().platform.isTypedArray(n)}function xr(n,t=[],e=!1){if(null==t&&(t=[]),"boolean"==typeof n||"number"==typeof n||"string"==typeof n||mc(n)||null==n||Qn(n)&&e)t.push(n);else if(Array.isArray(n)||Qn(n))for(let s=0;s<n.length;++s)xr(n[s],t,e);else{let s=-1;for(const r of Object.keys(n))/^([1-9]+[0-9]*|0)$/.test(r)&&(s=Math.max(s,Number(r)));for(let r=0;r<=s;r++)xr(n[r],t,e)}return t}class yv{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new bv)}profileKernel(t,e,s){let r;const a=()=>{r=s()};let o;const i=wn();if(this.backendTimer.timerAvailable())o=this.backendTimer.time(a);else{a();for(const u of r)u.dataSync();o=Promise.resolve({kernelMs:wn()-i})}if(z().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let u=0;u<r.length;u++){const c=r[u];c.data().then(h=>{xv(h,c.dtype,t)})}return{kernelName:t,outputs:r,inputs:e,timeMs:o.then(u=>u.kernelMs),extraInfo:o.then(u=>null!=u.getExtraProfileInfo?u.getExtraProfileInfo():"")}}logKernelProfile(t){const{kernelName:e,outputs:s,timeMs:r,inputs:a,extraInfo:o}=t;s.forEach(i=>{Promise.all([i.data(),r,o]).then(l=>{this.logger.logKernelProfile(e,i,l[0],l[1],a,l[2])})})}}function xv(n,t,e){if("float32"!==t)return!1;for(let s=0;s<n.length;s++){const r=n[s];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${e}'`),!0}return!1}class bv{logKernelProfile(t,e,s,r,a,o){const i="number"==typeof r?$t(`${r}ms`,9):r.error,l=$t(t,25),u=e.rank,c=e.size,h=$t(e.shape.toString(),14);let d="";for(const p in a){const f=a[p];if(null!=f){const g=f.shape||e.shape,m=g.length;d+=`${p}: ${m}D ${m>0?g:""} `}}console.log(`%c${l}\t%c${i}\t%c${u}D ${h}\t%c${c}\t%c${d}\t%c${o}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Iv(n,t,e,s){const r=Se(t),a=function Sv(n,t,e,s){const r=E(t),a=s[s.length-1],o=new Array(a).fill(0),i=t.length,l="complex64"===e?Ro(n):n;if(i>1)for(let u=0;u<r/a;u++){const c=u*a;for(let h=0;h<a;h++)o[h]=Math.max(o[h],Ao(l[c+h],0,e).length)}return o}(n,t,e,r),o=t.length,i=Al(n,t,e,r,a),l=["Tensor"];return s&&(l.push(`  dtype: ${e}`),l.push(`  rank: ${o}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(i.map(u=>"    "+u).join("\n")),l.join("\n")}function Ao(n,t,e){let s;return s=Array.isArray(n)?`${parseFloat(n[0].toFixed(7))} + ${parseFloat(n[1].toFixed(7))}j`:Da(n)?`'${n}'`:"bool"===e?Jf(n):parseFloat(n.toFixed(7)).toString(),$t(s,t)}function Jf(n){return 0===n?"false":"true"}function Al(n,t,e,s,r,a=!0){const o="complex64"===e?2:1,i=t[0],l=t.length;if(0===l)return"complex64"===e?[Ao(Ro(n)[0],0,e)]:"bool"===e?[Jf(n[0])]:[n[0].toString()];if(1===l){if(i>20){let y=Array.from(n.slice(0,3*o)),x=Array.from(n.slice((i-3)*o,i*o));return"complex64"===e&&(y=Ro(y),x=Ro(x)),["["+y.map((b,w)=>Ao(b,r[w],e)).join(", ")+", ..., "+x.map((b,w)=>Ao(b,r[i-3+w],e)).join(", ")+"]"]}return["["+("complex64"===e?Ro(n):Array.from(n)).map((m,y)=>Ao(m,r[y],e)).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*o,d=[];if(i>20){for(let g=0;g<3;g++){const m=g*h;d.push(...Al(n.slice(m,m+h),u,e,c,r,!1))}d.push("...");for(let g=i-3;g<i;g++){const m=g*h;d.push(...Al(n.slice(m,m+h),u,e,c,r,g===i-1))}}else for(let g=0;g<i;g++){const m=g*h;d.push(...Al(n.slice(m,m+h),u,e,c,r,g===i-1))}const p=2===l?",":"";d[0]="["+(i>0?d[0]+p:"");for(let g=1;g<d.length-1;g++)d[g]=" "+d[g]+p;let f=",\n";for(let g=2;g<l;g++)f+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(a?"":f),d}function Ro(n){const t=[];for(let e=0;e<n.length;e+=2)t.push([n[e],n[e+1]]);return t}class ln{constructor(t,e,s){if(this.dtype=e,this.shape=t.slice(),this.size=E(t),null!=s){const r=s.length;v(r===this.size,()=>`Length of values '${r}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=s||zt(e,this.size),this.strides=Se(t)}set(t,...e){0===e.length&&(e=[0]),v(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);const s=this.locToIndex(e);this.values[s]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const r of t){if(r<0||r>=this.shape[e])throw new Error(`Requested out of range element at ${t}.   Buffer shape=${this.shape}`);e++}let s=t[t.length-1];for(let r=0;r<t.length-1;++r)s+=this.strides[r]*t[r];return this.values[s]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let s=0;s<t.length-1;++s)e+=this.strides[s]*t[s];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let s=0;s<e.length-1;++s)e[s]=Math.floor(t/this.strides[s]),t-=e[s]*this.strides[s];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return es().makeTensor(this.values,this.shape,this.dtype)}}let es=null,Kr=null,Qf=null;class Ot{constructor(t,e,s,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=E(t),this.strides=Se(t),this.dataId=s,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}buffer(){var t=this;return A(function*(){const e=yield t.data();return Kr.buffer(t.shape,t.dtype,e)})()}bufferSync(){return Kr.buffer(this.shape,this.dtype,this.dataSync())}array(){var t=this;return A(function*(){const e=yield t.data();return Jn(t.shape,e,"complex64"===t.dtype)})()}arraySync(){return Jn(this.shape,this.dataSync(),"complex64"===this.dtype)}data(){var t=this;return A(function*(){t.throwIfDisposed();const e=es().read(t.dataId);if("string"===t.dtype){const s=yield e;try{return s.map(r=>Ws(r))}catch(r){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e})()}dataToGPU(t){return this.throwIfDisposed(),es().readToGPU(this.dataId,t)}dataSync(){this.throwIfDisposed();const t=es().readSync(this.dataId);if("string"===this.dtype)try{return t.map(e=>Ws(e))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}bytes(){var t=this;return A(function*(){t.throwIfDisposed();const e=yield es().read(t.dataId);return"string"===t.dtype?e:new Uint8Array(e.buffer)})()}dispose(){this.isDisposed||(es().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return Kr.print(this,t)}clone(){return this.throwIfDisposed(),Kr.clone(this)}toString(t=!1){return Iv(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),Kr.cast(this,t)}variable(t=!0,e,s){return this.throwIfDisposed(),es().makeVariable(this,t,e,s)}}function K(){return yc("Tensor",()=>Ot)}Object.defineProperty(Ot,Symbol.hasInstance,{value:n=>!!n&&null!=n.data&&null!=n.dataSync&&null!=n.throwIfDisposed}),K();class Rl extends Ot{constructor(t,e,s,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=s}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!ye(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);es().disposeTensor(this),this.dataId=t.dataId,es().incRef(this,null)}dispose(){es().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(Rl,Symbol.hasInstance,{value:n=>n instanceof Ot&&null!=n.assign&&n.assign instanceof Function});var Fl=(()=>{return(n=Fl||(Fl={})).float32="float32",n.int32="int32",n.bool="int32",n.complex64="complex64",Fl;var n})(),Ol=(()=>{return(n=Ol||(Ol={})).float32="float32",n.int32="int32",n.bool="bool",n.complex64="complex64",Ol;var n})(),Pl=(()=>{return(n=Pl||(Pl={})).float32="float32",n.int32="float32",n.bool="float32",n.complex64="complex64",Pl;var n})(),Ll=(()=>{return(n=Ll||(Ll={})).float32="complex64",n.int32="complex64",n.bool="complex64",n.complex64="complex64",Ll;var n})();const Tv={float32:Pl,int32:Fl,bool:Ol,complex64:Ll};function Cn(n,t){if("string"===n||"string"===t){if("string"===n&&"string"===t)return"string";throw new Error(`Can not upcast ${n} with ${t}`)}return Tv[n][t]}function xh(n){return Cn(n,"int32")}function At(n,t){if(n.dtype===t.dtype)return[n,t];const e=Cn(n.dtype,t.dtype);return[n.cast(e),t.cast(e)]}function em(n){const t=[];return tm(n,t,new Set),t}function tm(n,t,e){if(null==n)return;if(n instanceof Ot)return void t.push(n);if(!function _v(n){return Array.isArray(n)||"object"==typeof n}(n))return;const s=n;for(const r in s){const a=s[r];e.has(a)||(e.add(a),tm(a,t,e))}}function bh(n){return null!=n.kernelName}class nm{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(t=>t.name)))}}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}let $v=(()=>{class n{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new nm}ready(){var e=this;return A(function*(){if(null!=e.pendingBackendInit)return e.pendingBackendInit.then(()=>{});if(null!=e.backendInstance)return;const s=e.getSortedBackends();for(let r=0;r<s.length;r++){const a=s[r];if(yield e.initializeBackend(a).success)return void(yield e.setBackend(a))}throw new Error("Could not initialize any backends, all backend initializations failed.")})()}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:s}=this.initializeBackendsAndReturnBest();if(s)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:s}=this.initializeBackend(e);if(s)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,s,r=1){return e in this.registryFactory?(Dn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:s,priority:r},!0)}setBackend(e){var s=this;return A(function*(){if(null==s.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(s.backendName=e,null==s.registry[e]){s.backendInstance=null;const{success:r,asyncInit:a}=s.initializeBackend(e);if(!(a?yield r:r))return!1}return s.backendInstance=s.registry[e],s.setupRegisteredKernels(),s.profiler=new yv(s.backendInstance),!0})()}setupRegisteredKernels(){ph(this.backendName).forEach(s=>{null!=s.setupFunc&&s.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){ph(e).forEach(r=>{null!=r.disposeFunc&&r.disposeFunc(this.registry[e])})}initializeBackend(e){const s=this.registryFactory[e];if(null==s)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const r=s.factory();if(!r||r instanceof Z||"function"!=typeof r.then)return this.registry[e]=r,{success:!0,asyncInit:!1};{const a=++this.pendingBackendInitId,o=r.then(i=>!(a<this.pendingBackendInitId||(this.registry[e]=i,this.pendingBackendInit=null,0))).catch(i=>(a<this.pendingBackendInitId||(this.pendingBackendInit=null,Dn(`Initialization of backend ${e} failed`),Dn(i.stack||i.message)),!1));return this.pendingBackendInit=o,{success:o,asyncInit:!0}}}catch(r){return Dn(`Initialization of backend ${e} failed`),Dn(r.stack||r.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,s)=>this.registryFactory[s].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let s=0;s<e.length;s++){const r=e[s],{success:a,asyncInit:o}=this.initializeBackend(r);if(o||a)return{name:r,asyncInit:o}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,s){const r=this.state.tensorInfo.get(s),a=r.backend,o=this.readSync(s),i=a.refCount(s);a.disposeData(s,!0),r.backend=e,e.move(s,o,r.shape,r.dtype,i),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,s){let a,r=null;if(null==s){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");s=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof s)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(a),()=>(a=s(),a instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),a))}scopedRun(e,s,r){e();try{const a=r();return s(),a}catch(a){throw s(),a}}nextTensorId(){return n.nextTensorId++}nextVariableId(){return n.nextVariableId++}clone(e){const s=F.runKernel(Qa,{x:e});return this.addTapeNode(this.state.activeScope.name,{x:e},[s],i=>({x:()=>F.runKernel(za,{x:i},{dtype:"float32"})}),[],{}),s}runKernel(e,s,r){if(null==dh(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:s,attrs:r})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,s,r){const a=this.backend.numDataIds();let o=0;r.forEach(u=>{o+="complex64"===u.dtype?3:1});const l=a-s-o-this.state.numDataMovesStack[this.state.numDataMovesStack.length-1];if(l>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${l} data ids) after running '${e}'`)}runKernelFunc(e){let s,r=[];const a=this.isTapeOn(),o=this.state.numBytes,i=this.state.numTensors;let l,u;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const c=bh(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(bh(e)){const{kernelName:g,inputs:m,attrs:y}=e,x=dh(g,this.backendName);v(null!=x,()=>`Cannot find registered kernel '${g}' for backend '${this.backendName}'`),l=()=>{const b=this.backend.numDataIds();u=x.kernelFunc({inputs:m,attrs:y,backend:this.backend});const w=Array.isArray(u)?u:[u];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(g,b,w);const I=w.map(S=>null!=S.rank?S:this.makeTensorFromTensorInfo(S));if(a){const S=this.getTensorsForGradient(g,m,I);r=this.saveTensorsForBackwardMode(S)}return I}}else{const{forwardFunc:g}=e,m=y=>{!a||(r=y.map(x=>this.keep(this.clone(x))))};l=()=>{const y=this.backend.numDataIds();u=this.tidy(()=>g(this.backend,m));const x=Array.isArray(u)?u:[u];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(c,y,x),x}}const{inputs:h,attrs:d}=e,p=bh(e)?null:e.backwardsFunc;let f;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(f=this.profiler.profileKernel(c,h,()=>l()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(f),s=f.outputs):s=l()}),a&&this.addTapeNode(c,h,s,p,r,d),this.state.profiling&&this.state.activeProfile.kernels.push({name:c,bytesAdded:this.state.numBytes-o,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-i,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(h).map(g=>null!=h[g]?h[g].shape:null),outputShapes:s.map(g=>g.shape),kernelTimeMs:f.timeMs,extraInfo:f.extraInfo}),Array.isArray(u)?s:s[0]}saveTensorsForBackwardMode(e){return e.map(r=>this.keep(this.clone(r)))}getTensorsForGradient(e,s,r){const a=jf(e);if(null!=a){const o=a.inputsToSave||[],i=a.outputsToSave||[];let l;a.saveAllInputs?(v(Array.isArray(s),()=>"saveAllInputs is true, expected inputs to be an array."),l=Object.keys(s).map(c=>s[c])):l=o.map(c=>s[c]);const u=r.filter((c,h)=>i[h]);return l.concat(u)}return[]}makeTensor(e,s,r,a){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");a=a||this.backend;let o=e;"string"===(r=r||"float32")&&Da(e[0])&&(o=e.map(u=>Bs(u)));const i=a.write(o,s,r),l=new Ot(s,r,i,this.nextTensorId());if(this.trackTensor(l,a),"string"===r){const u=this.state.tensorInfo.get(i),c=function Zw(n){if(null==n)return 0;let t=0;return n.forEach(e=>t+=e.length),t}(o);this.state.numBytes+=c-u.bytes,u.bytes=c}return l}makeTensorFromDataId(e,s,r,a){return this.makeTensorFromTensorInfo({dataId:e,shape:s,dtype:r=r||"float32"},a)}makeTensorFromTensorInfo(e,s){const{dataId:r,shape:a,dtype:o}=e,i=new Ot(a,o,r,this.nextTensorId());return this.trackTensor(i,s),i}makeVariable(e,s=!0,r,a){r=r||this.nextVariableId().toString(),null!=a&&a!==e.dtype&&(e=e.cast(a));const o=new Rl(e,s,r,this.nextTensorId());if(null!=this.state.registeredVariables[o.name])throw new Error(`Variable with name ${o.name} was already registered`);return this.state.registeredVariables[o.name]=o,this.incRef(o,this.backend),o}trackTensor(e,s){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let r=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(r=e.size*ki(e.dtype)),this.state.numBytes+=r,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:s||this.backend,dtype:e.dtype,shape:e.shape,bytes:r})),e instanceof Rl||this.track(e)}incRef(e,s){this.trackTensor(e,s),this.backend.incRef(e.dataId)}removeDataId(e,s){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===s&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const s=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=s.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const r=e.size*ki(e.dtype);this.state.numBytes-=r}s.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,s.backend)}disposeVariables(){for(const e in this.state.registeredVariables)this.disposeVariable(this.state.registeredVariables[e])}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}profile(e){var s=this;return A(function*(){s.state.profiling=!0;const r=s.state.numBytes,a=s.state.numTensors;s.state.activeProfile.kernels=[],s.state.activeProfile.result=yield e(),s.state.profiling=!1,s.state.activeProfile.peakBytes=Math.max(...s.state.activeProfile.kernels.map(o=>o.totalBytesSnapshot)),s.state.activeProfile.newBytes=s.state.numBytes-r,s.state.activeProfile.newTensors=s.state.numTensors-a;for(const o of s.state.activeProfile.kernels)o.kernelTimeMs=yield o.kernelTimeMs,o.extraInfo=yield o.extraInfo;return s.state.activeProfile})()}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,s,r,a,o,i){const l={id:this.state.nextTapeNodeId++,kernelName:e,inputs:s,outputs:r,saved:o},u=jf(e);null!=u&&(a=u.gradFunc),null!=a&&(l.gradient=c=>(c=c.map((h,d)=>{if(null==h){const p=r[d],f=on(p.size,p.dtype);return this.makeTensor(f,p.shape,p.dtype)}return h}),a(c.length>1?c:c[0],o,i))),this.state.activeTape.push(l)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const s={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(s.name=e),this.state.scopeStack.push(s),this.state.activeScope=s}endScope(e){const s=em(e),r=new Set(s.map(o=>o.id));for(let o=0;o<this.state.activeScope.track.length;o++){const i=this.state.activeScope.track[o];!i.kept&&!r.has(i.id)&&i.dispose()}const a=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],s.forEach(o=>{!o.kept&&o.scopeId===a.id&&this.track(o)})}gradients(e,s,r,a=!1){if(v(s.length>0,()=>"gradients() received an empty list of xs."),null!=r&&"float32"!==r.dtype)throw new Error(`dy must have 'float32' dtype, but has '${r.dtype}'`);const o=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));v(o instanceof Ot,()=>"The result y returned by f() must be a tensor.");const i=function wv(n,t,e){const s={},r={};for(let l=0;l<t.length;l++)s[t[l].id]=!0;for(let l=0;l<n.length;l++){const u=n[l],c=u.inputs;for(const h in c){const d=c[h];let p=!1;for(let f=0;f<t.length;f++)if(s[d.id]){u.outputs.forEach(g=>s[g.id]=!0),p=!0,r[u.id]=!0;break}if(p)break}}const a={};a[e.id]=!0;const o={};for(let l=n.length-1;l>=0;l--){const u=n[l],c=u.inputs;for(let h=0;h<u.outputs.length;h++)if(a[u.outputs[h].id]){for(const d in c)a[c[d].id]=!0,o[u.id]=!0;break}}const i=[];for(let l=0;l<n.length;l++){const u=n[l];if(r[u.id]&&o[u.id]){const c={};for(const d in u.inputs){const p=u.inputs[d];s[p.id]&&(c[d]=p)}const h=Object.assign({},u);h.inputs=c,h.outputs=u.outputs,i.push(h)}}return i}(this.state.activeTape,s,o);if(!a&&0===i.length&&s.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const l={};l[o.id]=null==r?function Ev(n){const t=fc(E(n),"float32");return F.makeTensor(t,n,"float32")}(o.shape):r,function vv(n,t,e,s){for(let r=t.length-1;r>=0;r--){const a=t[r],o=[];if(a.outputs.forEach(l=>{const u=n[l.id];o.push(null!=u?u:null)}),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const i=a.gradient(o);for(const l in a.inputs){if(!(l in i))throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(i)}.`);const u=e(()=>i[l]());if("float32"!==u.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${u.dtype}'`);const c=a.inputs[l];if(!ye(u.shape,c.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${l}' has shape '${u.shape}', which does not match the shape of the input '${c.shape}'`);if(null==n[c.id])n[c.id]=u;else{const h=n[c.id];n[c.id]=s(h,u),h.dispose()}}}}(l,i,c=>this.tidy(c),Dv);const u=s.map(c=>l[c.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(c=>{for(const h of c.saved)h.dispose()}),this.state.activeTape=null),{value:o,grads:u}})}customGrad(e){return v(dc(e),()=>"The f passed in customGrad(f) must be a function."),(...s)=>{let r;v(s.every(l=>l instanceof Ot),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const a={};return s.forEach((l,u)=>{a[u]=l}),this.runKernelFunc({forwardFunc:(l,u)=>(r=e(...s,u),v(r.value instanceof Ot,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),v(dc(r.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),r.value),backwardsFunc:(l,u)=>{const c=r.gradFunc(l,u),h=Array.isArray(c)?c:[c];v(h.length===s.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),v(h.every(p=>p instanceof Ot),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const d={};return h.forEach((p,f)=>{d[f]=()=>p}),d},inputs:a})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,s){return this.state.tensorInfo.get(e).backend.readToGPU(e,s)}time(e){var s=this;return A(function*(){const r=wn(),a=yield s.backend.time(e);return a.wallMs=wn()-r,a})()}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new nm;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}return n.nextTensorId=0,n.nextVariableId=0,n})();function sm(){const n=Af();if(null==n._tfengine){const t=new ev(n);n._tfengine=new $v(t)}return function rv(n){Df=n}(n._tfengine.ENV),function Cv(n){es=n}(()=>n._tfengine),n._tfengine}const F=sm();function Dv(n,t){return F.runKernel(Hr,{a:n,b:t})}function rm(n){if(n||function Av(){return"undefined"!=typeof navigator&&null!=navigator}()){if(n||(n=navigator),"ReactNative"===n.product)return!0;const t=n.userAgent||n.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const e=n;return e.userAgentData&&e.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function am(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const An=z();function Fo(n,t){let e=n;if(Qn(n))return"string"===t?[]:[n.length];if("object"==typeof n){if("texture"in n)return[n.height,n.width*(n.channels||"RGBA").length];if("buffer"in n&&!(n.buffer instanceof ArrayBuffer))return[n.buffer.size/(null==t?4:ki(t))]}if(!Array.isArray(n))return[];const r=[];for(;Array.isArray(e)||Qn(e)&&"string"!==t;)r.push(e.length),e=e[0];return Array.isArray(n)&&z().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&om(n,r,[]),r}function om(n,t,e){if(e=e||[],!Array.isArray(n)&&!Qn(n))return void v(0===t.length,()=>`Element arr[${e.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);v(t.length>0,()=>`Element arr[${e.join("][")}] should be a primitive, but is an array of ${n.length} elements`),v(n.length===t[0],()=>`Element arr[${e.join("][")}] should have ${t[0]} elements, but has ${n.length} elements`);const s=t.slice(1);for(let r=0;r<n.length;++r)om(n[r],s,e.concat(r))}function im(n,t,e,s){if("string_or_numeric"!==n){if(null==n)throw new Error("Expected dtype cannot be null.");if("numeric"!==n&&n!==t||"numeric"===n&&"string"===t)throw new Error(`Argument '${e}' passed to '${s}' must be ${n} tensor, but got ${t} tensor`)}}function C(n,t,e,s="numeric"){if(n instanceof Ot)return im(s,n.dtype,t,e),n;let r=Aa(n);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),im(s,r,t,e),null==n||!Qn(n)&&!Array.isArray(n)&&"number"!=typeof n&&"boolean"!=typeof n&&"string"!=typeof n)throw new Error(`Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${null==n?"null":n.constructor.name}'`);const a=Fo(n,r);!Qn(n)&&!Array.isArray(n)&&(n=[n]);const i="string"!==r?yr(n,r):xr(n,[],!0);return F.makeTensor(i,a,r)}function lm(n,t,e,s="numeric"){if(!Array.isArray(n))throw new Error(`Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``);return n.map((a,o)=>C(a,`${t}[${o}]`,e,s))}function O(n){const t=Object.keys(n);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let e=t[0];const s=n[e];e.endsWith("_")&&(e=e.substring(0,e.length-1)),e+="__op";const r=(...a)=>{F.startScope(e);try{const o=s(...a);return mc(o)&&console.error("Cannot return a Promise inside of tidy."),F.endScope(o),o}catch(o){throw F.endScope(null),o}};return Object.defineProperty(r,"name",{value:e,configurable:!0}),r}An.registerFlag("DEBUG",()=>!1,n=>{n&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),An.registerFlag("IS_BROWSER",()=>am()),An.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),An.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),An.registerFlag("PROD",()=>!1),An.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>An.getBool("DEBUG")),An.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),An.registerFlag("IS_TEST",()=>!1),An.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0),An.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),An.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),An.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);const br=O({complex_:function Fv(n,t){const e=C(n,"real","complex"),s=C(t,"imag","complex");return J(e.shape,s.shape,`real and imag shapes, ${e.shape} and ${s.shape}, must match in call to tf.complex().`),F.runKernel(Cc,{real:e,imag:s})}});function Oo(n,t,e,s){if(null==s)s=Aa(n);else if("complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if("object"==typeof n&&("texture"in n||"buffer"in n&&!(n.buffer instanceof ArrayBuffer))){if("float32"!==s&&"int32"!==s)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${s}.`);return F.backend.createTensorFromGPUData(n,t||e,s)}if(!Qn(n)&&!Array.isArray(n)&&"number"!=typeof n&&"boolean"!=typeof n&&"string"!=typeof n)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){ks(t);const r=E(t),a=E(e);v(r===a,()=>`Based on the provided shape, [${t}], the tensor should have ${r} values but has ${a}`);for(let o=0;o<e.length;++o){const i=e[o],l=o!==e.length-1||i!==E(t.slice(o));v(e[o]===t[o]||!l,()=>`Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `)}}return!Qn(n)&&!Array.isArray(n)&&(n=[n]),t=t||e,n="string"!==s?yr(n,s):xr(n,[],!0),F.makeTensor(n,t,s)}function Po(n,t,e){return Oo(n,t,Fo(n,e),e)}const vh={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};function um(n,t){return Ih.apply(this,arguments)}function Ih(){return Ih=A(function*(n,t){const e=[],s=[],r=Array.isArray(n)?n.map(o=>o.name):Object.keys(n);for(let o=0;o<r.length;++o){const i=r[o],l=Array.isArray(n)?n[o].tensor:n[i];if("float32"!==l.dtype&&"int32"!==l.dtype&&"bool"!==l.dtype&&"string"!==l.dtype&&"complex64"!==l.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${l.dtype}`);const u={name:i,shape:l.shape,dtype:l.dtype};if("string"===l.dtype){const c=new Promise(function(){var h=A(function*(d){const p=yield l.bytes(),f=p.reduce((y,x)=>y+x.length,0)+4*p.length,g=new Uint8Array(f);let m=0;for(let y=0;y<p.length;y++){const x=p[y],b=new Uint8Array(new Uint32Array([x.length]).buffer);g.set(b,m),m+=4,g.set(x,m),m+=x.length}d(g)});return function(d){return h.apply(this,arguments)}}());s.push(c)}else s.push(l.data());null!=t&&(u.group=t),e.push(u)}return{data:Ov(yield Promise.all(s)),specs:e}}),Ih.apply(this,arguments)}function Ov(n){if(null===n)throw new Error(`Invalid input value: ${JSON.stringify(n)}`);let t=0;const e=[];n.forEach(a=>{if(t+=a.byteLength,e.push(a.byteLength===a.buffer.byteLength?a:new a.constructor(a)),!(a instanceof Float32Array||a instanceof Int32Array||a instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${a.constructor.name}`)});const s=new Uint8Array(t);let r=0;return e.forEach(a=>{s.set(new Uint8Array(a.buffer),r),r+=a.byteLength}),s.buffer}const Sh="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function hm(n){return Sh?Buffer.byteLength(n):new Blob([n]).size}function Ch(n){if(1===n.length)return n[0];let t=0;n.forEach(r=>{t+=r.byteLength});const e=new Uint8Array(t);let s=0;return n.forEach(r=>{e.set(new Uint8Array(r),s),s+=r.byteLength}),e.buffer}function pm(n,t){const e={modelTopology:n.modelTopology,format:n.format,generatedBy:n.generatedBy,convertedBy:n.convertedBy,weightsManifest:t};return null!=n.signature&&(e.signature=n.signature),null!=n.userDefinedMetadata&&(e.userDefinedMetadata=n.userDefinedMetadata),null!=n.modelInitializer&&(e.modelInitializer=n.modelInitializer),null!=n.initializerSignature&&(e.initializerSignature=n.initializerSignature),null!=n.trainingConfig&&(e.trainingConfig=n.trainingConfig),e}function Vv(n,t,e){const s={modelTopology:n.modelTopology,format:n.format,generatedBy:n.generatedBy,convertedBy:n.convertedBy};if(null!=n.trainingConfig&&(s.trainingConfig=n.trainingConfig),null!=n.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!e)throw new Error("modelJSON has weightsManifest but weightData is null");s.weightSpecs=t,s.weightData=e}return null!=n.signature&&(s.signature=n.signature),null!=n.userDefinedMetadata&&(s.userDefinedMetadata=n.userDefinedMetadata),null!=n.modelInitializer&&(s.modelInitializer=n.modelInitializer),null!=n.initializerSignature&&(s.initializerSignature=n.initializerSignature),s}function Nh(){return(Nh=A(function*(n,t){let e,s;return null!=n.weightsManifest&&([e,s]=yield t(n.weightsManifest)),Vv(n,e,s)})).apply(this,arguments)}function Ml(n){if(n.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==n.modelTopology?0:hm(JSON.stringify(n.modelTopology)),weightSpecsBytes:null==n.weightSpecs?0:hm(JSON.stringify(n.weightSpecs)),weightDataBytes:null==n.weightData?0:n.weightData.byteLength}}function Gv(){const n=function zv(){const n=e=>{let s=e<<13,r=0;for(;0==(8388608&s);)r-=8388608,s<<=1;return s&=-8388609,r+=947912704,s|r},t=new Uint32Array(2048);t[0]=0;for(let e=1;e<1024;e++)t[e]=n(e);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function Bv(){const n=new Uint32Array(64);n[0]=0,n[31]=1199570944,n[32]=2147483648,n[63]=3347054592;for(let t=1;t<31;t++)n[t]=t<<23;for(let t=33;t<63;t++)n[t]=2147483648+(t-32<<23);return n}(),e=function Wv(){const n=new Uint32Array(64);for(let t=0;t<64;t++)n[t]=1024;return n[0]=n[32]=0,n}();return s=>{const r=new ArrayBuffer(4*s.length),a=new Uint32Array(r);for(let o=0;o<s.length;o++){const i=s[o];a[o]=n[e[i>>10]+(1023&i)]+t[i>>10]}return new Float32Array(r)}}class St{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==St.instance&&(St.instance=new St),St.instance}static registerSaveRouter(t){St.getInstance().saveRouters.push(t)}static registerLoadRouter(t){St.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return St.getHandlers(t,"save")}static getLoadHandlers(t,e){return St.getHandlers(t,"load",e)}static getHandlers(t,e,s){const r=[];return("load"===e?St.getInstance().loadRouters:St.getInstance().saveRouters).forEach(o=>{const i=o(t,s);null!==i&&r.push(i)}),r}}const Hv=(n,t)=>St.getLoadHandlers(n,t),zl="tensorflowjs",wr="models_store",Gs="model_info_store";function _h(){if(!z().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const n="undefined"==typeof window?self:window,t=n.indexedDB||n.mozIndexedDB||n.webkitIndexedDB||n.msIndexedDB||n.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function $h(n){const t=n.result;t.createObjectStore(wr,{keyPath:"modelPath"}),t.createObjectStore(Gs,{keyPath:"modelPath"})}let Xr=(()=>{class n{constructor(e){if(this.indexedDB=_h(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}save(e){var s=this;return A(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return s.databaseAction(s.modelPath,e)})()}load(){var e=this;return A(function*(){return e.databaseAction(e.modelPath)})()}databaseAction(e,s){return new Promise((r,a)=>{const o=this.indexedDB.open(zl,1);o.onupgradeneeded=()=>$h(o),o.onsuccess=()=>{const i=o.result;if(null==s){const l=i.transaction(wr,"readonly"),c=l.objectStore(wr).get(this.modelPath);c.onsuccess=()=>{if(null==c.result)return i.close(),a(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));r(c.result.modelArtifacts)},c.onerror=h=>(i.close(),a(c.error)),l.oncomplete=()=>i.close()}else{const l=Ml(s),u=i.transaction(Gs,"readwrite");let c=u.objectStore(Gs);const h=c.put({modelPath:this.modelPath,modelArtifactsInfo:l});let d;h.onsuccess=()=>{d=i.transaction(wr,"readwrite");const f=d.objectStore(wr).put({modelPath:this.modelPath,modelArtifacts:s,modelArtifactsInfo:l});f.onsuccess=()=>r({modelArtifactsInfo:l}),f.onerror=g=>{c=u.objectStore(Gs);const m=c.delete(this.modelPath);m.onsuccess=()=>(i.close(),a(f.error)),m.onerror=y=>(i.close(),a(f.error))}},h.onerror=p=>(i.close(),a(h.error)),u.oncomplete=()=>{null==d?i.close():d.oncomplete=()=>i.close()}}},o.onerror=i=>a(o.error)})}}return n.URL_SCHEME="indexeddb://",n})();const mm=n=>z().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(Xr.URL_SCHEME)?function jv(n){return new Xr(n)}(n.slice(Xr.URL_SCHEME.length)):null;St.registerSaveRouter(mm),St.registerLoadRouter(mm);class Kv{constructor(){this.indexedDB=_h()}listModels(){var t=this;return A(function*(){return new Promise((e,s)=>{const r=t.indexedDB.open(zl,1);r.onupgradeneeded=()=>$h(r),r.onsuccess=()=>{const a=r.result,o=a.transaction(Gs,"readonly"),l=o.objectStore(Gs).getAll();l.onsuccess=()=>{const u={};for(const c of l.result)u[c.modelPath]=c.modelArtifactsInfo;e(u)},l.onerror=u=>(a.close(),s(l.error)),o.oncomplete=()=>a.close()},r.onerror=a=>s(r.error)})})()}removeModel(t){var e=this;return A(function*(){return t=function qv(n){return n.startsWith(Xr.URL_SCHEME)?n.slice(Xr.URL_SCHEME.length):n}(t),new Promise((s,r)=>{const a=e.indexedDB.open(zl,1);a.onupgradeneeded=()=>$h(a),a.onsuccess=()=>{const o=a.result,i=o.transaction(Gs,"readwrite"),l=i.objectStore(Gs),u=l.get(t);let c;u.onsuccess=()=>{if(null==u.result)return o.close(),r(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const h=l.delete(t),d=()=>{c=o.transaction(wr,"readwrite");const f=c.objectStore(wr).delete(t);f.onsuccess=()=>s(u.result.modelArtifactsInfo),f.onerror=g=>r(u.error)};h.onsuccess=d,h.onerror=p=>(d(),o.close(),r(u.error))}},u.onerror=h=>(o.close(),r(u.error)),i.oncomplete=()=>{null==c?o.close():c.oncomplete=()=>o.close()}},a.onerror=o=>r(a.error)})})()}}const ds="/",vr="tensorflowjs_models",gm="info",Xv="model_topology",Yv="weight_specs",Zv="weight_data",Jv="model_metadata";function ym(n){return{info:[vr,n,gm].join(ds),topology:[vr,n,Xv].join(ds),weightSpecs:[vr,n,Yv].join(ds),weightData:[vr,n,Zv].join(ds),modelMetadata:[vr,n,Jv].join(ds)}}function xm(n){for(const t of Object.values(n))window.localStorage.removeItem(t)}function bm(n){const t=n.split(ds);if(t.length<3)throw new Error(`Invalid key format: ${n}`);return t.slice(1,t.length-1).join(ds)}let Yr=(()=>{class n{constructor(e){if(!z().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=ym(this.modelPath)}save(e){var s=this;return A(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const r=JSON.stringify(e.modelTopology),a=JSON.stringify(e.weightSpecs),o=Ml(e);try{return s.LS.setItem(s.keys.info,JSON.stringify(o)),s.LS.setItem(s.keys.topology,r),s.LS.setItem(s.keys.weightSpecs,a),s.LS.setItem(s.keys.weightData,function Pv(n){if(Sh)return Buffer.from(n).toString("base64");const t=new Uint8Array(n);let e="";for(let s=0,r=t.length;s<r;s++)e+=String.fromCharCode(t[s]);return btoa(e)}(e.weightData)),s.LS.setItem(s.keys.modelMetadata,JSON.stringify({format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0})),{modelArtifactsInfo:o}}catch(i){throw xm(s.keys),new Error(`Failed to save model '${s.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${o.modelTopologyBytes}, weightSpecsBytes=${o.weightSpecsBytes}, weightDataBytes=${o.weightDataBytes}.`)}}})()}load(){var e=this;return A(function*(){const s=JSON.parse(e.LS.getItem(e.keys.info));if(null==s)throw new Error(`In local storage, there is no model with name '${e.modelPath}'`);if("JSON"!==s.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const r={},a=JSON.parse(e.LS.getItem(e.keys.topology));if(null==a)throw new Error(`In local storage, the topology of model '${e.modelPath}' is missing.`);r.modelTopology=a;const o=JSON.parse(e.LS.getItem(e.keys.weightSpecs));if(null==o)throw new Error(`In local storage, the weight specs of model '${e.modelPath}' are missing.`);r.weightSpecs=o;const i=e.LS.getItem(e.keys.modelMetadata);if(null!=i){const u=JSON.parse(i);r.format=u.format,r.generatedBy=u.generatedBy,r.convertedBy=u.convertedBy,null!=u.signature&&(r.signature=u.signature),null!=u.userDefinedMetadata&&(r.userDefinedMetadata=u.userDefinedMetadata),null!=u.modelInitializer&&(r.modelInitializer=u.modelInitializer),null!=u.initializerSignature&&(r.initializerSignature=u.initializerSignature),null!=u.trainingConfig&&(r.trainingConfig=u.trainingConfig)}const l=e.LS.getItem(e.keys.weightData);if(null==l)throw new Error(`In local storage, the binary weight values of model '${e.modelPath}' are missing.`);return r.weightData=function Lv(n){if(Sh){const s=Buffer.from(n,"base64");return s.buffer.slice(s.byteOffset,s.byteOffset+s.byteLength)}const t=atob(n),e=new Uint8Array(t.length);for(let s=0;s<t.length;++s)e.set([t.charCodeAt(s)],s);return e.buffer}(l),r})()}}return n.URL_SCHEME="localstorage://",n})();const wm=n=>z().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(Yr.URL_SCHEME)?function e1(n){return new Yr(n)}(n.slice(Yr.URL_SCHEME.length)):null;St.registerSaveRouter(wm),St.registerLoadRouter(wm);class t1{constructor(){v(z().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),v("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}listModels(){var t=this;return A(function*(){const e={},s=vr+ds,r=ds+gm;for(let a=0;a<t.LS.length;++a){const o=t.LS.key(a);o.startsWith(s)&&o.endsWith(r)&&(e[bm(o)]=JSON.parse(t.LS.getItem(o)))}return e})()}removeModel(t){var e=this;return A(function*(){const s=ym(t=function Qv(n){return n.startsWith(Yr.URL_SCHEME)?n.slice(Yr.URL_SCHEME.length):n}(t));if(null==e.LS.getItem(s.info))throw new Error(`Cannot find model at path '${t}'`);const r=JSON.parse(e.LS.getItem(s.info));return xm(s),r})()}}class hn{constructor(){this.managers={}}static getInstance(){return null==hn.instance&&(hn.instance=new hn),hn.instance}static registerManager(t,e){v(null!=t,()=>"scheme must not be undefined or null."),t.endsWith("://")&&(t=t.slice(0,t.indexOf("://"))),v(t.length>0,()=>"scheme must not be an empty string.");const s=hn.getInstance();v(null==s.managers[t],()=>`A model store manager is already registered for scheme '${t}'.`),s.managers[t]=e}static getManager(t){const e=hn.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(hn.getInstance().managers)}}class n1{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}setTimeoutCustom(t,e){"undefined"!=typeof window&&z().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(t),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},e),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",s=>{s.source===window&&s.data.name===this.messageName&&(s.stopPropagation(),(0,this.functionRefs[s.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))},!0))):setTimeout(t,e)}isTypedArray(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array||t instanceof Uint8ClampedArray}}if(z().get("IS_BROWSER")){z().setPlatform("browser",new n1);try{hn.registerManager(Yr.URL_SCHEME,new t1)}catch(n){}try{hn.registerManager(Xr.URL_SCHEME,new Kv)}catch(n){}}let Jr;function He(n,t="float32",e){return t=t||"float32",ks(n),new ln(n,t,e)}z().get("IS_NODE")&&!z().get("IS_BROWSER")&&z().setPlatform("node",new class r1{constructor(){this.util=te(8628),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=z().global.fetch?z().global.fetch(t,e):(null==Jr&&(Jr=te(5410)),Jr(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}isTypedArray(t){return this.util.types.isFloat32Array(t)||this.util.types.isInt32Array(t)||this.util.types.isUint8Array(t)||this.util.types.isUint8ClampedArray(t)}});const de=O({cast_:function a1(n,t){const e=C(n,"x","cast");if(!function Yw(n){return"bool"===n||"complex64"===n||"float32"===n||"int32"===n||"string"===n}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==e.dtype||"string"!==t&&"string"===e.dtype)throw new Error("Only strings can be casted to strings");return F.runKernel(za,{x:e},{dtype:t})}}),Ir=O({clone_:function o1(n){const e={x:C(n,"x","clone","string_or_numeric")};return F.runKernel(Qa,e)}});function ps(){return F}function Oh(){return F.memory()}function M(n,t){return F.tidy(n,t)}function Ge(n){em(n).forEach(e=>e.dispose())}function fs(n){return F.keep(n)}function Im(n,t,e=1){return F.registerBackend(n,t,e)}sm(),function Nv(n){Kr=n}({buffer:He,cast:de,clone:Ir,print:function i1(n,t=!1){console.log(n.toString(t))}}),function kv(n){Qf=n}(function l1(n){z().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(n+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")});const re=O({add_:function c1(n,t){let e=C(n,"a","add"),s=C(t,"b","add");return[e,s]=At(e,s),F.runKernel(Hr,{a:e,b:s})}}),Sm=O({floorDiv_:function h1(n,t){let e=C(n,"a","floorDiv"),s=C(t,"b","floorDiv");return[e,s]=At(e,s),F.runKernel(Za,{a:e,b:s})}}),Ce=O({div_:function d1(n,t){let e=C(n,"a","div"),s=C(t,"b","div");return[e,s]=At(e,s),"int32"===e.dtype&&"int32"===s.dtype?Sm(e,s):F.runKernel(Ha,{a:e,b:s},{})}}),D=O({mul_:function p1(n,t){let e=C(n,"a","mul"),s=C(t,"b","mul");return[e,s]=At(e,s),F.runKernel(uo,{a:e,b:s})}}),dn=O({sqrt_:function f1(n){const e={x:C(n,"x","sqrt","float32")};return F.runKernel(So,e)}}),dt=O({square_:function m1(n){const t=C(n,"x","square");return F.runKernel("Square",{x:t},{})}}),Je=O({zerosLike_:function g1(n){const e={x:C(n,"x","zerosLike")};return F.runKernel(kl,e)}});function Ts(n){return F.customGrad(n)}function Pe(n,t){if((Qn(n)&&"string"!==t||Array.isArray(n))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&Qn(n)&&!(n instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Oo(n,[],[],t)}class Qr{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class Bn{constructor(){this.classNameMap={}}static getMap(){return null==Bn.instance&&(Bn.instance=new Bn),Bn.instance}static register(t){Bn.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function ne(n){v(null!=n.className,()=>"Class being registered does not have the static className property defined."),v("string"==typeof n.className,()=>"className is required to be a string, but got type "+typeof n.className),v(n.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),Bn.register(n)}class Us extends Qr{minimize(t,e=!1,s){const{value:r,grads:a}=this.computeGradients(t,s);if(null!=s){const o=s.map(i=>({name:i.name,tensor:a[i.name]}));this.applyGradients(o)}else this.applyGradients(a);return Ge(a),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return function y1(n,t){v(dc(n),()=>"The f passed in variableGrads(f) must be a function"),v(null==t||Array.isArray(t)&&t.every(u=>u instanceof Rl),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const e=null!=t;if(!e){t=[];for(const u in F.registeredVariables)t.push(F.registeredVariables[u])}const s=e?t.filter(u=>!u.trainable):null,r=t.length;v((t=t.filter(u=>u.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`);const{value:o,grads:i}=F.gradients(n,t,null,!0);v(i.some(u=>null!=u),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),v(0===o.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${o.rank} tensor`);const l={};return t.forEach((u,c)=>{null!=i[c]&&(l[u.name]=i[c])}),null!=s&&s.forEach(u=>l[u.name]=null),{value:o,grads:l}}(t,e)}dispose(){null!=this.iterations_&&Ge(this.iterations_)}saveIterations(){var t=this;return A(function*(){return null==t.iterations_&&(t.iterations_=0),{name:"iter",tensor:Pe(t.iterations_,"int32")}})()}getWeights(){return A(function*(){throw new Error("getWeights() is not implemented for this optimizer yet.")})()}setWeights(t){var e=this;return A(function*(){throw new Error(`setWeights() is not implemented for this optimizer class ${e.getClassName()}`)})()}extractIterations(t){var e=this;return A(function*(){return e.iterations_=(yield t[0].tensor.data())[0],t.slice(1)})()}}Object.defineProperty(Us,Symbol.hasInstance,{value:n=>null!=n.minimize&&null!=n.computeGradients&&null!=n.applyGradients});class Cm extends Us{constructor(t,e,s=null){super(),this.learningRate=t,this.rho=e,this.epsilon=s,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==s&&(this.epsilon=F.backend.epsilon())}static get className(){return"Adadelta"}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const a=F.registeredVariables[s];null==this.accumulatedGrads[r]&&(this.accumulatedGrads[r]={originalName:`${s}/accum_grad`,variable:M(()=>Je(a).variable(!1))}),null==this.accumulatedUpdates[r]&&(this.accumulatedUpdates[r]={originalName:`${s}/accum_var`,variable:M(()=>Je(a).variable(!1))});const i=Array.isArray(t)?t[r].tensor:t[s];if(null==i)return;const l=this.accumulatedGrads[r].variable,u=this.accumulatedUpdates[r].variable;M(()=>{const c=re(D(l,this.rho),D(dt(i),1-this.rho)),h=D(Ce(dn(re(u,this.epsilon)),dn(re(l,this.epsilon))),i),d=re(D(u,this.rho),D(dt(h),1-this.rho));l.assign(c),u.assign(d);const p=re(D(h,-this.learningRate),a);a.assign(p)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Ge(this.accumulatedGrads.map(t=>t.variable)),Ge(this.accumulatedUpdates.map(t=>t.variable)))}getWeights(){var t=this;return A(function*(){const e=[...t.accumulatedGrads,...t.accumulatedUpdates];return[yield t.saveIterations()].concat(e.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(t){var e=this;return A(function*(){const s=(t=yield e.extractIterations(t)).length/2;e.accumulatedGrads=t.slice(0,s).map(a=>({originalName:a.name,variable:a.tensor.variable(!1)})),e.accumulatedUpdates=t.slice(s,2*s).map(a=>({originalName:a.name,variable:a.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}function Lo(n,t,e){return ks(n),F.runKernel(Vc,{},{shape:n,value:t,dtype:e})}class Nm extends Us{constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}static get className(){return"Adagrad"}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const a=F.registeredVariables[s];null==this.accumulatedGrads[r]&&(this.accumulatedGrads[r]={originalName:`${s}/accumulator`,variable:M(()=>Lo(a.shape,this.initialAccumulatorValue).variable(!1))});const o=Array.isArray(t)?t[r].tensor:t[s];if(null==o)return;const i=this.accumulatedGrads[r].variable;M(()=>{const l=re(i,dt(o));i.assign(l);const u=re(D(Ce(o,dn(re(l,F.backend.epsilon()))),-this.learningRate),a);a.assign(u)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Ge(this.accumulatedGrads.map(t=>t.variable))}getWeights(){var t=this;return A(function*(){return[yield t.saveIterations()].concat(t.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))})()}setWeights(t){var e=this;return A(function*(){t=yield e.extractIterations(t),e.accumulatedGrads=t.map(r=>({originalName:r.name,variable:r.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}const ea=O({pow_:function x1(n,t){let e=C(n,"base","pow"),s=C(t,"exp","pow");return[e,s]=At(e,s),F.runKernel(co,{a:e,b:s})}}),xe=O({sub_:function b1(n,t){let e=C(n,"a","sub"),s=C(t,"b","sub");return[e,s]=At(e,s),F.runKernel(No,{a:e,b:s})}});class km extends Us{constructor(t,e,s,r=null){super(),this.learningRate=t,this.beta1=e,this.beta2=s,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],M(()=>{this.accBeta1=Pe(e).variable(),this.accBeta2=Pe(s).variable()}),null==r&&(this.epsilon=F.backend.epsilon())}static get className(){return"Adam"}applyGradients(t){const e=Array.isArray(t)?t.map(s=>s.name):Object.keys(t);M(()=>{const s=xe(1,this.accBeta1),r=xe(1,this.accBeta2);e.forEach((a,o)=>{const i=F.registeredVariables[a];null==this.accumulatedFirstMoment[o]&&(this.accumulatedFirstMoment[o]={originalName:`${a}/m`,variable:M(()=>Je(i).variable(!1))}),null==this.accumulatedSecondMoment[o]&&(this.accumulatedSecondMoment[o]={originalName:`${a}/v`,variable:M(()=>Je(i).variable(!1))});const u=Array.isArray(t)?t[o].tensor:t[a];if(null==u)return;const c=this.accumulatedFirstMoment[o].variable,h=this.accumulatedSecondMoment[o].variable,d=re(D(c,this.beta1),D(u,1-this.beta1)),p=re(D(h,this.beta2),D(dt(u),1-this.beta2)),f=Ce(d,s),g=Ce(p,r);c.assign(d),h.assign(p);const m=re(D(Ce(f,re(dn(g),this.epsilon)),-this.learningRate),i);i.assign(m)}),this.accBeta1.assign(D(this.accBeta1,this.beta1)),this.accBeta2.assign(D(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Ge(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedSecondMoment&&Ge(this.accumulatedSecondMoment.map(t=>t.variable))}getWeights(){var t=this;return A(function*(){const e=[...t.accumulatedFirstMoment,...t.accumulatedSecondMoment];return[yield t.saveIterations()].concat(e.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(t){var e=this;return A(function*(){t=yield e.extractIterations(t),M(()=>{e.accBeta1.assign(ea(e.beta1,e.iterations_+1)),e.accBeta2.assign(ea(e.beta2,e.iterations_+1))});const s=t.length/2;e.accumulatedFirstMoment=t.slice(0,s).map(a=>({originalName:a.name,variable:a.tensor.variable(!1)})),e.accumulatedSecondMoment=t.slice(s,2*s).map(a=>({originalName:a.name,variable:a.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}const Xt=O({abs_:function w1(n){const t=C(n,"x","abs");return F.runKernel("complex64"===t.dtype?Fi:Ti,{x:t})}});function ta(n,t){const e=n.length,s=[];for(let r=0;r<e;r++){const a=e-1-r,o=n[a]||1;(t[t.length-1-r]||1)>1&&1===o&&s.unshift(a)}return s}function Wt(n,t){const e=[];for(let s=0;s<t.length;s++){const r=n[n.length-s-1],a=t.length-s-1,o=t[a];(null==r||1===r&&o>1)&&e.unshift(a)}return e}function Ve(n,t){const e=[],s=Math.max(n.length,t.length);for(let r=0;r<s;r++){let a=n[n.length-r-1];null==a&&(a=1);let o=t[t.length-r-1];if(null==o&&(o=1),1===a)e.unshift(o);else if(1===o)e.unshift(a);else{if(a!==o)throw Error(`Operands could not be broadcast together with shapes ${n} and ${t}.`);e.unshift(a)}}return e}const Hs=O({maximum_:function v1(n,t){let e=C(n,"a","maximum"),s=C(t,"b","maximum");return[e,s]=At(e,s),"bool"===e.dtype&&(e=de(e,"int32"),s=de(s,"int32")),Ve(e.shape,s.shape),F.runKernel(ao,{a:e,b:s})}});class Tm extends Us{constructor(t,e,s,r=null,a=0){super(),this.learningRate=t,this.beta1=e,this.beta2=s,this.epsilon=r,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],M(()=>{this.iteration=Pe(0).variable(),this.accBeta1=Pe(e).variable()}),null==r&&(this.epsilon=F.backend.epsilon())}static get className(){return"Adamax"}applyGradients(t){const e=Array.isArray(t)?t.map(s=>s.name):Object.keys(t);M(()=>{const s=xe(1,this.accBeta1),r=Ce(-this.learningRate,re(D(this.iteration,this.decay),1));e.forEach((a,o)=>{const i=F.registeredVariables[a];null==this.accumulatedFirstMoment[o]&&(this.accumulatedFirstMoment[o]={originalName:`${a}/m`,variable:Je(i).variable(!1)}),null==this.accumulatedWeightedInfNorm[o]&&(this.accumulatedWeightedInfNorm[o]={originalName:`${a}/v`,variable:Je(i).variable(!1)});const u=Array.isArray(t)?t[o].tensor:t[a];if(null==u)return;const c=this.accumulatedFirstMoment[o].variable,h=this.accumulatedWeightedInfNorm[o].variable,d=re(D(c,this.beta1),D(u,1-this.beta1)),p=D(h,this.beta2),f=Xt(u),g=Hs(p,f);c.assign(d),h.assign(g);const m=re(D(Ce(r,s),Ce(d,re(g,this.epsilon))),i);i.assign(m)}),this.iteration.assign(re(this.iteration,1)),this.accBeta1.assign(D(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Ge(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedWeightedInfNorm&&Ge(this.accumulatedWeightedInfNorm.map(t=>t.variable))}getWeights(){return A(function*(){throw new Error("getWeights() is not implemented for Adamax yet.")})()}setWeights(t){return A(function*(){throw new Error("setWeights() is not implemented for Adamax yet.")})()}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}class Ph extends Us{constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}static get className(){return"SGD"}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const a=Array.isArray(t)?t[r].tensor:t[s];if(null==a)return;const o=F.registeredVariables[s];M(()=>{const i=re(D(this.c,a),o);o.assign(i)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=fs(Pe(-t))}dispose(){this.c.dispose()}getWeights(){var t=this;return A(function*(){return[yield t.saveIterations()]})()}setWeights(t){var e=this;return A(function*(){if(0!==(t=yield e.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")})()}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}class _m extends Ph{constructor(t,e,s=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=s,this.accumulations=[],this.m=Pe(this.momentum)}static get className(){return"Momentum"}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const a=F.registeredVariables[s];null==this.accumulations[r]&&(this.accumulations[r]={originalName:`${s}/momentum`,variable:M(()=>Je(a).variable(!1))});const o=this.accumulations[r].variable,i=Array.isArray(t)?t[r].tensor:t[s];null!=i&&M(()=>{let l;const u=re(D(this.m,o),i);l=re(D(this.c,this.useNesterov?re(i,D(u,this.m)):u),a),o.assign(u),a.assign(l)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Ge(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}getWeights(){var t=this;return A(function*(){return[yield t.saveIterations()].concat(t.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))})()}setWeights(t){var e=this;return A(function*(){t=yield e.extractIterations(t),e.accumulations=t.map(r=>({originalName:r.name,variable:r.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}class $m extends Us{constructor(t,e=.9,s=0,r=null,a=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=s,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==r&&(this.epsilon=F.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}static get className(){return"RMSProp"}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const a=F.registeredVariables[s],o=!1;null==this.accumulatedMeanSquares[r]&&(this.accumulatedMeanSquares[r]={originalName:`${s}/rms`,variable:M(()=>Je(a).variable(o))}),null==this.accumulatedMoments[r]&&(this.accumulatedMoments[r]={originalName:`${s}/momentum`,variable:M(()=>Je(a).variable(o))}),null==this.accumulatedMeanGrads[r]&&this.centered&&(this.accumulatedMeanGrads[r]={originalName:`${s}/mg`,variable:M(()=>Je(a).variable(o))});const i=Array.isArray(t)?t[r].tensor:t[s];if(null==i)return;const l=this.accumulatedMeanSquares[r].variable,u=this.accumulatedMoments[r].variable;M(()=>{const c=re(D(l,this.decay),D(dt(i),1-this.decay));if(this.centered){const h=this.accumulatedMeanGrads[r].variable,d=re(D(h,this.decay),D(i,1-this.decay)),p=Ce(D(i,this.learningRate),dn(xe(c,re(dt(d),this.epsilon)))),f=re(D(u,this.momentum),p);l.assign(c),h.assign(d),u.assign(f);const g=xe(a,f);a.assign(g)}else{const h=re(D(l,this.decay),D(dt(i),1-this.decay)),d=re(D(u,this.momentum),Ce(D(i,this.learningRate),dn(re(h,this.epsilon))));l.assign(h),u.assign(d);const p=xe(a,d);a.assign(p)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Ge(this.accumulatedMeanSquares.map(t=>t.variable)),null!=this.accumulatedMeanGrads&&this.centered&&Ge(this.accumulatedMeanGrads.map(t=>t.variable)),null!=this.accumulatedMoments&&Ge(this.accumulatedMoments.map(t=>t.variable))}getWeights(){var t=this;return A(function*(){const e=[...t.accumulatedMeanSquares,...t.accumulatedMoments];return t.centered&&e.push(...t.accumulatedMeanGrads),[yield t.saveIterations()].concat(e.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(t){var e=this;return A(function*(){t=yield e.extractIterations(t);const s=e.centered?t.length/3:t.length/2,r=!1;e.accumulatedMeanSquares=t.slice(0,s).map(a=>({originalName:a.name,variable:a.tensor.variable(r)})),e.accumulatedMoments=t.slice(s,2*s).map(a=>({originalName:a.name,variable:a.tensor.variable(r)})),e.centered&&(e.accumulatedMeanGrads=t.slice(2*s,3*s).map(a=>({originalName:a.name,variable:a.tensor.variable(r)})))})()}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}const I1=[Cm,Nm,km,Tm,_m,$m,Ph];function Em(n){return new Promise(t=>setTimeout(t)).then(n)}let Lh=(()=>{class n{constructor(e){if(!z().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(n.URL_SCHEME)&&(e=e.slice(n.URL_SCHEME.length)),(null==e||0===e.length)&&(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}save(e){var s=this;return A(function*(){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const r=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const o=pm(e,[{paths:["./"+s.weightDataFileName],weights:e.weightSpecs}]),i=window.URL.createObjectURL(new Blob([JSON.stringify(o)],{type:"application/json"})),l=null==s.modelJsonAnchor?document.createElement("a"):s.modelJsonAnchor;if(l.download=s.modelJsonFileName,l.href=i,yield Em(()=>l.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const u=null==s.weightDataAnchor?document.createElement("a"):s.weightDataAnchor;u.download=s.weightDataFileName,u.href=r,yield Em(()=>u.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:Ml(e)}}})()}}return n.URL_SCHEME="downloads://",n})();function Dm(n,t,e,s){(function o(l){v(null!=l&&Array.isArray(l)&&l.length>0,()=>"promises must be a none empty array")})(n),function i(l,u){v(l>=0&&l<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${l}`),v(u>=0&&u<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${u}`),v(u>=l,()=>`startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${u}`)}(e=null==e?0:e,s=null==s?1:s);let r=0;return Promise.all(n.map(l=>(l.then(u=>{const c=e+ ++r/n.length*(s-e);return t(c),u}),l)))}function Am(n,t){return Vh.apply(this,arguments)}function Vh(){return(Vh=A(function*(n,t){null==t&&(t={});const e=null==t.fetchFunc?z().platform.fetch:t.fetchFunc,s=n.map(h=>e(h,t.requestInit,{isBinary:!0})),i=(null==t.onProgress?yield Promise.all(s):yield Dm(s,t.onProgress,0,.5)).map(h=>h.arrayBuffer());return null==t.onProgress?yield Promise.all(i):yield Dm(i,t.onProgress,.5,1)})).apply(this,arguments)}St.registerSaveRouter(n=>z().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(Lh.URL_SCHEME)?function $1(n="model"){return new Lh(n)}(n.slice(Lh.URL_SCHEME.length)):null);let Rm=(()=>{class n{constructor(e,s){if(this.DEFAULT_METHOD="POST",null==s&&(s={}),this.weightPathPrefix=s.weightPathPrefix,this.onProgress=s.onProgress,this.weightUrlConverter=s.weightUrlConverter,null!=s.fetchFunc?(v("function"==typeof s.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=s.fetchFunc):this.fetch=z().platform.fetch,v(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&v(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=s.requestInit&&null!=s.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=s.requestInit||{}}save(e){var s=this;return A(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const r=Object.assign({method:s.DEFAULT_METHOD},s.requestInit);r.body=new FormData;const o=pm(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);r.body.append("model.json",new Blob([JSON.stringify(o)],{type:"application/json"}),"model.json"),null!=e.weightData&&r.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const i=yield s.fetch(s.path,r);if(i.ok)return{modelArtifactsInfo:Ml(e),responses:[i]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${i.status}.`)})()}load(){var e=this;return A(function*(){const s=yield e.fetch(e.path,e.requestInit);if(!s.ok)throw new Error(`Request to ${e.path} failed with status code ${s.status}. Please verify this URL points to the model JSON of the model to load.`);let r;try{r=yield s.json()}catch(i){let l=`Failed to parse model JSON of response from ${e.path}.`;throw e.path.endsWith(".pb")?l+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":l+=" Please make sure the server is serving valid JSON for this request.",new Error(l)}if(null==r.modelTopology&&null==r.weightsManifest)throw new Error(`The JSON from HTTP path ${e.path} contains neither model topology or manifest for weights.`);return function fm(n,t){return Nh.apply(this,arguments)}(r,i=>e.loadWeights(i))})()}loadWeights(e){var s=this;return A(function*(){const r=Array.isArray(s.path)?s.path[1]:s.path,[a,o]=function R1(n){const t=n.lastIndexOf("/"),e=n.lastIndexOf("?");return[n.substring(0,t)+"/",e>t?n.substring(e):""]}(r),i=s.weightPathPrefix||a,l=function Mv(n){const t=[];for(const e of n)t.push(...e.weights);return t}(e),u=[],c=[];for(const d of e)for(const p of d.paths)null!=s.weightUrlConverter?c.push(s.weightUrlConverter(p)):u.push(i+p+o);return s.weightUrlConverter&&u.push(...yield Promise.all(c)),[l,Ch(yield Am(u,{requestInit:s.requestInit,fetchFunc:s.fetch,onProgress:s.onProgress}))]})()}}return n.URL_SCHEME_REGEX=/^https?:\/\//,n})();function Fm(n){return null!=n.match(Rm.URL_SCHEME_REGEX)}const Om=(n,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let e=!0;if(e=Array.isArray(n)?n.every(s=>Fm(s)):Fm(n),e)return Pm(n,t)}return null};function Pm(n,t){return new Rm(n,t)}function F1(n,t){return Pm(n,t)}let Sr;St.registerSaveRouter(Om),St.registerLoadRouter(Om);const W1=O({fromPixels_:function Vm(n,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==n)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let e=!1,s=!1,r=!1,a=!1,o=!1,i=!1;if(n.data instanceof Uint8Array)e=!0;else if("undefined"!=typeof ImageData&&n instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&n instanceof HTMLVideoElement)r=!0;else if("undefined"!=typeof HTMLImageElement&&n instanceof HTMLImageElement)a=!0;else if(null!=n.getContext)o=!0;else{if(!("undefined"!=typeof ImageBitmap&&n instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${n.constructor.name}`);i=!0}if(null!=dh(ch,F.backendName))return F.runKernel(ch,{pixels:n},{numChannels:t});const[u,c]=r?[n.videoWidth,n.videoHeight]:[n.width,n.height];let h,d;if(o)h=n.getContext("2d").getImageData(0,0,u,c).data;else if(s||e)h=n.data;else if(a||r||i){if(null==Sr)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");Sr=new OffscreenCanvas(1,1).getContext("2d")}else Sr=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});Sr.canvas.width=u,Sr.canvas.height=c,Sr.drawImage(n,0,0,u,c),h=Sr.getImageData(0,0,u,c).data}if(4===t)d=new Int32Array(h);else{const f=u*c;d=new Int32Array(f*t);for(let g=0;g<f;g++)for(let m=0;m<t;++m)d[g*t+m]=h[4*g+m]}return function L1(n,t,e){if(T(n),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=Fo(n,e);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Oo(n,t,s,e)}(d,[c,u,t],"int32")}});function Uh(n,t,e){const s=n.shape.length;v(s===t.length,()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`),v(s===e.length,()=>`Error in slice${s}D: Length of size ${e} must match the rank of the array (${s}).`);for(let r=0;r<s;++r)v(t[r]+e[r]<=n.shape[r],()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+e[r]}) would overflow input.shape[${r}] (${n.shape[r]})`)}function U1(n){const t=[];let e=0;for(;n>0;)1&n&&t.push(e),n/=2,e++;return t}function Hh(n,t,e){const s=[];for(let r=0;r<n.length;r++)s[r]=Math.ceil((t[r]-n[r])/e[r]);return s}function Mm(n,t,e,s){const r=[...n];for(let a=r.length;a<s.length;a++)r.push(1);for(let a=0;a<e;a++)0===a?r[t]=1:(r.splice(t,0,1),r.pop());return r}function zm(n,t,e){return e<=n?e:e-(t-1)}function Bm(n,t){const e=[];for(let s=0;s<n;s++)e.push(t+s);return e}function H1(n,t,e,s,r,a,o,i,l){const u=n.length;let c=new Array(u),h=new Array(u),d=new Array(u);if(t.length&&e>0){const p=t[0],f=e+1;c=Wm(o,p,f,s,n),h=Gm(i,p,f,r,n),d=Mm(a,p,f,n)}else for(let p=0;p<u;p++)c[p]=Hm(o,s,a,n,p,l),h[p]=jm(i,r,a,n,p,l),d[p]=Um(a,p,l);return{begin:c,end:h,strides:d}}function Wm(n,t,e,s,r){const a=[...r],o=Bm(e,t);for(let i=0;i<a.length;i++)if(o.indexOf(i)>-1)a[i]=0;else{const l=zm(t,e,i);let u=s[l];n&1<<l&&(u=0),a[i]=u}return a}function Gm(n,t,e,s,r){const a=[...r],o=Bm(e,t);for(let i=0;i<a.length;i++)if(o.indexOf(i)>-1)a[i]=Number.MAX_SAFE_INTEGER;else{const l=zm(t,e,i);let u=s[l];n&1<<l&&(u=Number.MAX_SAFE_INTEGER),a[i]=u}for(let i=0;i<a.length;i++){const l=r[i];a[i]<0&&(a[i]+=l),a[i]=Ae(0,a[i],r[i])}return a}function Um(n,t,e){let s=n[t];return(e&1<<t||null==s)&&(s=1),s}function Hm(n,t,e,s,r,a){let o=t[r];(n&1<<r||a&1<<r||null==o)&&(o=(e[r]||1)>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return o<0&&(o+=l),o=Ae(0,o,l-1),o}function jm(n,t,e,s,r,a){let o=t[r];const i=e[r]||1;(n&1<<r||a&1<<r||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return o<0&&(o+=l),o=i>0?Ae(0,o,l):Ae(-1,o,l-1),o}function jh(n,t,e){let s=e.length;for(let r=0;r<e.length;r++)if(e[r]>1){s=r;break}for(let r=s+1;r<e.length;r++)if(t[r]>0||e[r]!==n[r])return!1;return!0}function qh(n,t){let e=n.length>0?n[n.length-1]:1;for(let s=0;s<n.length-1;s++)e+=n[s]*t[s];return e}function Gl(n,t,e){let s;const r=n.shape.length;let a;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach(o=>{v(-1!==o,()=>"slice() does not support negative begin indexing.")}),a=null==e?new Array(r).fill(-1):"number"==typeof e?[e,...new Array(r-1).fill(-1)]:e.length<r?e.concat(new Array(r-e.length).fill(-1)):e,a=a.map((o,i)=>o>=0?o:(v(-1===o,()=>`Negative size values should be exactly -1 but got ${o} for the slice() size at index ${i}.`),n.shape[i]-s[i])),[s,a]}function Kh(n,t,e,s,r,a,o,i,l){let u;if(null==s?(u=new Array(t.length),u.fill(1)):u=s,null!=o&&0!=(o&o-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:e.slice(),strides:u.slice(),beginMask:r,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l};for(let b=0;b<h.dims;b++)c&&0!=(1<<b&i)&&h.numAddAxisAfterEllipsis++,1<<b&o&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const d={dims:n.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function j1(n,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let e=0;t.beginValid=null!=n.begin,t.endValid=null!=n.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<n.dims;s++)if(1<<s&n.ellipsisMask){const r=Math.min(t.dims-(n.dims-s)+1+n.numAddAxisAfterEllipsis,t.dims);for(;e<r;e++)t.begin[e]=0,t.end[e]=0,t.strides[e]=1,t.beginMask|=1<<e,t.endMask|=1<<e,t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[e]=s}else if(1<<s&n.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(e===t.begin.length)throw Error(`Index out of range using input dim ${e}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=n.begin&&(t.begin[e]=n.begin[s]),null!=n.end&&(t.end[e]=n.end[s]),t.strides[e]=n.strides[s],n.beginMask&1<<s&&(t.beginMask|=1<<e),n.endMask&1<<s&&(t.endMask|=1<<e),n.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<e):(t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[e]=s,e++}}(h,d);let p=!0,f=!0,g=!0;const m=[],y=[];for(let b=0;b<n.length;++b){if(0===d.strides[b])throw Error(`strides[${b}] must be non-zero`);const w=!!(d.shrinkAxisMask&1<<b),I=n[b];if(-1===I){m.push(w?1:-1);continue}const S=[d.beginMask&1<<b,d.endMask&1<<b],N=[d.strides[b]>0?0:-1,d.strides[b]>0?I:I-1];if(w&&d.strides[b]<=0)throw Error("only stride 1 allowed on non-range indexing.");g=g&&1===d.strides[b];const k=!!(d.beginMask&1<<b&&d.endMask&1<<b);if(d.beginValid&&d.endValid){if(w){const B=d.begin[b]<0?I+d.begin[b]:d.begin[b];if(d.begin[b]=B,d.end[b]=d.begin[b]+1,B<0||B>=I)throw Error(`slice index ${d.begin[b]} of dimension ${b} out of bounds.`)}else d.begin[b]=qm(d.begin[b],0,d.strides[b],I,S,N),d.end[b]=qm(d.end[b],1,d.strides[b],I,S,N);const L=1===d.strides[b]&&0===d.begin[b]&&d.end[b]===I;p=p&&L,f=f&&(0===b&&1===d.strides[b]||L)}else p=p&&1===d.strides[b]&&k,f=f&&(0===b&&1===d.strides[b]||k);let _,$=!1;if(d.beginValid&&d.endValid?(_=d.end[b]-d.begin[b],$=!0):w?(_=1,$=!0):k&&I>=0&&(_=d.strides[b]<0?-I:I,$=!0),$){let L;L=0===_||_<0!=d.strides[b]<0?0:Math.trunc(_/d.strides[b])+(_%d.strides[b]!=0?1:0),m.push(L)}else m.push(-1)}for(let b=0;b<d.finalShapeGatherIndices.length;++b){const w=d.finalShapeGatherIndices[b];w>=0?y.push(m[w]):-2===w&&y.push(1)}return{finalShapeSparse:y.filter((b,w)=>-2!==d.finalShapeGatherIndices[w]),finalShape:y,isIdentity:p,sliceDim0:f,isSimpleSlice:g,begin:d.begin,end:d.end,strides:d.strides}}function qm(n,t,e,s,r,a){if(r[t])return e>0?a[t]:a[t+1&1];{const o=n<0?s+n:n;return o<a[0]?a[0]:o>a[1]?a[1]:o}}const Km=O({all_:function K1(n,t=null,e=!1){const r={x:C(n,"x","all","bool")};return F.runKernel("All",r,{axis:t,keepDims:e})}}),Xh=O({any_:function X1(n,t=null,e=!1){const r={x:C(n,"x","any","bool")};return F.runKernel("Any",r,{axis:t,keepDims:e})}}),Vo=O({argMax_:function Y1(n,t=0){const s={x:C(n,"x","argMax")};return F.runKernel(_i,s,{axis:t})}});function Mo(n,t,e,s,r="NHWC",a){return Yt(n,[...t,n[3]],e,a,s,null,null,$s(r))}function Wn(n,t,e,s,r,a,o="channelsLast"){const[i,l]=zo(t);let u;if("channelsLast"===o)u=[i,l,n[3],n[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);u=[i,l,n[1],n[1]]}return Yt(n,u,e,s,r,a,!1,o)}function _s(n,t,e,s,r,a,o="NDHWC"){const[i,l,u]=Zh(t);let c,h;if("NDHWC"===o)h="channelsLast",c=[i,l,u,n[4],n[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);h="channelsFirst",c=[i,l,u,n[1],n[1]]}return js(n,c,e,s,r,!1,h,a)}function Yt(n,t,e,s,r,a,o=!1,i="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h]=n;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,h,u,c]=n}const[d,p,,f]=t,[g,m]=zo(e),[y,x]=zo(s),b=na(d,y),w=na(p,x),{padInfo:I,outHeight:S,outWidth:N}=function Q1(n,t,e,s,r,a,o,i,l){let u,c,h;if("number"==typeof n){u={top:n,bottom:n,left:n,right:n,type:0===n?"VALID":"NUMBER"};const p=function Z1(n,t,e,s,r){null==s&&(s=Yh(n,t,e));const o=n[1];return[Bo((n[0]-t+2*s)/e+1,r),Bo((o-t+2*s)/e+1,r)]}([t,e],a,s,n,i);c=p[0],h=p[1]}else if("same"===n){c=Math.ceil(t/s),h=Math.ceil(e/r);const d=Math.max(0,(c-1)*s+a-t),p=Math.max(0,(h-1)*r+o-e),f=Math.floor(d/2),g=d-f,m=Math.floor(p/2);u={top:f,bottom:g,left:m,right:p-m,type:"SAME"}}else if("valid"===n)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/s),h=Math.ceil((e-o+1)/r);else{if("object"!=typeof n)throw Error(`Unknown padding parameter: ${n}`);{const d="channelsLast"===l?n[1][0]:n[2][0],p="channelsLast"===l?n[1][1]:n[2][1],f="channelsLast"===l?n[2][0]:n[3][0],g="channelsLast"===l?n[2][1]:n[3][1];u={top:d,bottom:p,left:f,right:g,type:0===d&&0===p&&0===f&&0===g?"VALID":"EXPLICIT"},c=Bo((t-a+d+p)/s+1,i),h=Bo((e-o+f+g)/r+1,i)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,g,m,b,w,a,i),k=o?f*h:f;let _;return"channelsFirst"===i?_=[l,k,S,N]:"channelsLast"===i&&(_=[l,S,N,k]),{batchSize:l,dataFormat:i,inHeight:u,inWidth:c,inChannels:h,outHeight:S,outWidth:N,outChannels:k,padInfo:I,strideHeight:g,strideWidth:m,filterHeight:d,filterWidth:p,effectiveFilterHeight:b,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:x,inShape:n,outShape:_,filterShape:t}}function js(n,t,e,s,r,a=!1,o="channelsLast",i){let[l,u,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h,d]=n;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,d,u,c,h]=n}const[p,f,g,,m]=t,[y,x,b]=Zh(e),[w,I,S]=Zh(s),N=na(p,w),k=na(f,I),_=na(g,S),{padInfo:$,outDepth:L,outHeight:B,outWidth:G}=function eI(n,t,e,s,r,a,o,i,l,u,c){let h,d,p,f;if("valid"===n&&(n=0),"number"==typeof n){h={top:n,bottom:n,left:n,right:n,front:n,back:n,type:0===n?"VALID":"NUMBER"};const m=function J1(n,t,e,s,r,a){null==r&&(r=Yh(n,t[0],s[0]));const o=[0,0,0,e];for(let i=0;i<3;i++)n[i]+2*r>=t[i]&&(o[i]=Bo((n[i]-t[i]+2*r)/s[i]+1,a));return o}([t,e,s,1],[i,l,u],1,[r,a,o],n,c);d=m[0],p=m[1],f=m[2]}else{if("same"!==n)throw Error(`Unknown padding parameter: ${n}`);{d=Math.ceil(t/r),p=Math.ceil(e/a),f=Math.ceil(s/o);const g=(d-1)*r+i-t,m=(p-1)*a+l-e,y=(f-1)*o+u-s,x=Math.floor(g/2),b=g-x,w=Math.floor(m/2),I=m-w,S=Math.floor(y/2);h={top:w,bottom:I,left:S,right:y-S,front:x,back:b,type:"SAME"}}}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(r,u,c,h,y,x,b,N,k,_,i),H=a?m*d:m;let j;return"channelsFirst"===o?j=[l,H,L,B,G]:"channelsLast"===o&&(j=[l,L,B,G,H]),{batchSize:l,dataFormat:o,inDepth:u,inHeight:c,inWidth:h,inChannels:d,outDepth:L,outHeight:B,outWidth:G,outChannels:H,padInfo:$,strideDepth:y,strideHeight:x,strideWidth:b,filterDepth:p,filterHeight:f,filterWidth:g,effectiveFilterDepth:N,effectiveFilterHeight:k,effectiveFilterWidth:_,dilationDepth:w,dilationHeight:I,dilationWidth:S,inShape:n,outShape:j,filterShape:t}}function Yh(n,t,e,s=1){const r=na(t,s);return Math.floor((n[0]*(e-1)-e+r)/2)}function zo(n){return"number"==typeof n?[n,n,n]:2===n.length?[n[0],n[1],1]:n}function Zh(n){return"number"==typeof n?[n,n,n]:n}function na(n,t){return t<=1?n:n+(n-1)*(t-1)}function Bo(n,t){if(!t)return Math.trunc(n);switch(t){case"round":return Math.round(n);case"ceil":return Math.ceil(n);case"floor":return Math.floor(n);default:throw new Error(`Unknown roundingMode ${t}`)}}function qs(n){const[t,e,s]=zo(n);return 1===t&&1===e&&1===s}function nn(n,t){return qs(n)||qs(t)}function Cr(n){return zo(n).every(t=>t>0)}function $s(n){if("NHWC"===n)return"channelsLast";if("NCHW"===n)return"channelsFirst";throw new Error(`Unknown dataFormat ${n}`)}function pn(n,t,e){if(null!=e){if("string"==typeof t)throw Error(`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);if("number"==typeof t)v(Be(t),()=>`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);else{if("object"!=typeof t)throw Error(`Error in ${n}: Unknown padding parameter: ${t}`);t.forEach(s=>{s.forEach(r=>{v(Be(r),()=>`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${r}.`)})})}}}const P=O({reshape_:function tI(n,t){const s={x:C(n,"x","reshape","string_or_numeric")};return F.runKernel(fl,s,{shape:t})}}),Jh=O({avgPool_:function nI(n,t,e,s,r){const a=C(n,"x","avgPool","float32");v(nn(e,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '1'`);let i=a,l=!1;3===a.rank&&(l=!0,i=P(a,[1,a.shape[0],a.shape[1],a.shape[2]])),v(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),pn("avgPool",s,r);let h=F.runKernel(Ei,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r});return h=de(h,a.dtype),l?P(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),rI=O({avgPool3d_:function sI(n,t,e,s,r,a="NDHWC"){const o=C(n,"x","avgPool3d","float32");let i=o,l=!1;4===o.rank&&(l=!0,i=P(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),v(5===i.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`),v("NDHWC"===a,()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`),v("number"==typeof e&&e>0||Array.isArray(e)&&e[0]>0&&e[1]>0&&e[2]>0,()=>`Error in avgPool3d: Stride must be > 0, but got '${e}'`),pn("avgPool3d",s,r);let h=F.runKernel(Di,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r,dataFormat:a});return h=de(h,i.dtype),l?P(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});function aI(n){let t;return t=0===n.rank||1===n.rank?P(n,[1,1,1,n.size]):2===n.rank?P(n,[1,1,n.shape[0],n.shape[1]]):3===n.rank?P(n,[1,n.shape[0],n.shape[1],n.shape[2]]):n,t}const Ul=O({batchNorm_:function oI(n,t,e,s,r,a){null==a&&(a=.001);const o=C(n,"x","batchNorm"),i=C(t,"mean","batchNorm"),l=C(e,"variance","batchNorm");let u,c;null!=r&&(u=C(r,"scale","batchNorm")),null!=s&&(c=C(s,"offset","batchNorm")),v(i.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),v(null==c||i.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),v(null==u||i.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const d={x:aI(o),scale:u,offset:c,mean:i,variance:l},f=F.runKernel(Ui,d,{varianceEpsilon:a});return P(f,o.shape)}}),lI=O({batchNorm2d_:function iI(n,t,e,s,r,a){const o=C(n,"x","batchNorm"),i=C(t,"mean","batchNorm"),l=C(e,"variance","batchNorm");let u,c;return null!=r&&(u=C(r,"scale","batchNorm")),null!=s&&(c=C(s,"offset","batchNorm")),v(2===o.rank,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`),v(2===i.rank||1===i.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`),v(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=u&&v(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=c&&v(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),Ul(o,i,l,c,u,a)}}),cI=O({batchNorm3d_:function uI(n,t,e,s,r,a){const o=C(n,"x","batchNorm"),i=C(t,"mean","batchNorm"),l=C(e,"variance","batchNorm");let u,c;return null!=r&&(u=C(r,"scale","batchNorm")),null!=s&&(c=C(s,"offset","batchNorm")),v(3===o.rank,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`),v(3===i.rank||1===i.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`),v(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=u&&v(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=c&&v(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),Ul(o,i,l,c,u,a)}}),dI=O({batchNorm4d_:function hI(n,t,e,s,r,a){const o=C(n,"x","batchNorm"),i=C(t,"mean","batchNorm"),l=C(e,"variance","batchNorm");let u,c;return null!=r&&(u=C(r,"scale","batchNorm")),null!=s&&(c=C(s,"offset","batchNorm")),v(4===o.rank,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`),v(4===i.rank||1===i.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`),v(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=u&&v(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=c&&v(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),Ul(o,i,l,c,u,a)}}),Wo=O({broadcastTo_:function pI(n,t){let e=C(n,"broadcastTo","x");const s=e.shape;if(ks(t),t.length<e.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`);if(t.length>e.rank){const u=e.shape.slice();for(;u.length<t.length;)u.unshift(1);e=P(e,u)}const r=e.shape,a=Array.from(t);for(let u=t.length-1;u>=0;u--)if(r[u]===t[u])a[u]=1;else if(1!==e.shape[u])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);return 0===a.map((u,c)=>u>1?c:-1).filter(u=>u>=0).length?Ir(e):F.runKernel(_o,{x:e},{reps:a})}}),Rn=O({clipByValue_:function fI(n,t,e){const s=C(n,"x","clipByValue");return v(t<=e,()=>`Error in clip: min (${t}) must be less than or equal to max (${e}).`),t===e?Lo(s.shape,t,s.dtype):F.runKernel(Wa,{x:s},{clipValueMin:t,clipValueMax:e})}}),un=O({concat_:function mI(n,t=0){v(n.length>=1,()=>"Pass at least one tensor to concat");const e=lm(n,"tensors","concat","string_or_numeric");return"complex64"===e[0].dtype&&e.forEach(a=>{if("complex64"!==a.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${a.dtype}. `)}),1===e.length?Ir(e[0]):F.runKernel(Oi,e,{axis:t})}}),yI=O({concat1d_:function gI(n){return un(n,0)}}),bI=O({concat2d_:function xI(n,t){return un(n,t)}}),vI=O({concat3d_:function wI(n,t){return un(n,t)}}),SI=O({concat4d_:function II(n,t){return un(n,t)}}),Nr=O({conv2d_:function CI(n,t,e,s,r="NHWC",a=[1,1],o){const i=C(n,"x","conv2d","float32"),l=C(t,"filter","conv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=P(i,[1,i.shape[0],i.shape[1],i.shape[2]])),v(4===u.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),v(4===l.rank,()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`),pn("conv2d",s,o);const h="NHWC"===r?u.shape[3]:u.shape[1];v(h===l.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`),v(nn(e,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${a}'`),v(Cr(a),()=>"Error in conv2D: Dilated rates should be larger than 0."),v(Cr(e),()=>"Error in conv2D: Strides should be larger than 0.");const f=F.runKernel(Pi,{x:u,filter:l},{strides:e,pad:s,dataFormat:r,dilations:a,dimRoundingMode:o});return c?P(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Xm=O({conv1d_:function NI(n,t,e,s,r="NWC",a=1,o){const i=C(n,"x","conv1d"),l=C(t,"filter","conv1d");let u=i,c=!1;2===i.rank&&(c=!0,u=P(i,[1,i.shape[0],i.shape[1]])),v(3===u.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),v(3===l.rank,()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`),pn("conv1d",s,o),v(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),v(nn(e,a),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${a}'`),v(Cr(a),()=>"Error in conv1D: Dilated rates should be larger than 0."),v(Cr(e),()=>"Error in conv1D: Stride should be larger than 0."),v("NWC"===r,()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`);const h=P(l,[1,l.shape[0],l.shape[1],l.shape[2]]),d=P(u,[u.shape[0],1,u.shape[1],u.shape[2]]),m=Nr(d,h,[1,e],s,"NHWC",[1,a],o);return P(m,c?[m.shape[2],m.shape[3]]:[m.shape[0],m.shape[2],m.shape[3]])}}),Qh=O({conv2DBackpropInput_:function kI(n,t,e,s,r,a="NHWC",o){v(n.length===t.rank,()=>`Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);let i=n,l=t,u=!1;3===t.rank&&(u=!0,l=P(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,n[0],n[1],n[2]]),v(4===i.length,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`),v(4===l.rank,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`),v(4===e.rank,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`);const c="NHWC"===a?i[3]:i[1],h="NHWC"===a?l.shape[3]:l.shape[1];v(c===e.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${e.shape[2]}.`),v(h===e.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${e.shape[3]}.`),pn("conv2dDerInput",r,o);const f=F.runKernel(Li,{dy:l,filter:e},{strides:s,pad:r,dataFormat:a,dimRoundingMode:o,inputShape:i});return u?P(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Ym=O({conv2dTranspose_:function TI(n,t,e,s,r,a){const o=C(n,"x","conv2dTranspose"),i=C(t,"filter","conv2dTranspose");return Qh(e,o,i,s,r,"NHWC",a)}}),$I=O({conv3d_:function _I(n,t,e,s,r="NDHWC",a=[1,1,1]){const o=C(n,"x","conv3d"),i=C(t,"filter","conv3d");let l=o,u=!1;4===o.rank&&(u=!0,l=P(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),v(5===l.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),v(5===i.rank,()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`),v(l.shape[4]===i.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${i.shape[3]}.`),v(nn(e,a),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${a}'`),v("NDHWC"===r,()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`),v(Cr(a),()=>"Error in conv3D: Dilated rates should be larger than 0."),v(Cr(e),()=>"Error in conv3D: Strides should be larger than 0.");const d=F.runKernel(Vi,{x:l,filter:i},{strides:e,pad:s,dataFormat:r,dilations:a});return u?P(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),Zm=O({conv3DBackpropInput_:function EI(n,t,e,s,r){v(n.length===t.rank,()=>`Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);let a=n,o=t,i=!1;4===t.rank&&(i=!0,o=P(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,n[0],n[1],n[2],n[3]]);const l=a[4],u=o.shape[4];v(5===a.length,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`),v(5===o.rank,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`),v(5===e.rank,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`),v(l===e.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${e.shape[3]}.`),v(u===e.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${e.shape[4]}.`);const d=F.runKernel(Tc,{dy:o,filter:e},{pad:r,strides:s,inputShape:a});return i?P(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),AI=O({conv3dTranspose_:function DI(n,t,e,s,r){const a=C(n,"x","conv3dTranspose"),o=C(t,"filter","conv3dTranspose");return Zm(e,a,o,s,r)}}),Jm=O({denseBincount_:function RI(n,t,e,s=!1){const r=C(n,"x","denseBincount"),a=C(t,"weights","denseBincount");return v("int32"===r.dtype,()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`),v(r.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`),v(e>=0,()=>`size must be non-negative, but got ${e}.`),v(a.size===r.size||0===a.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${a.shape}.`),F.runKernel(Ec,{x:r,weights:a},{size:e,binaryOutput:s})}}),Hl=O({depthwiseConv2d_:function FI(n,t,e,s,r="NHWC",a=[1,1],o){const i=C(n,"x","depthwiseConv2d","float32"),l=C(t,"filter","depthwiseConv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=P(i,[1,i.shape[0],i.shape[1],i.shape[2]])),v(4===u.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),v(4===l.rank,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);const h="NHWC"===r?u.shape[3]:u.shape[1];v(h===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`),pn("depthwiseConv2d",s,o);const f=F.runKernel(zi,{x:u,filter:l},{strides:e,pad:s,dataFormat:r,dilations:a,dimRoundingMode:o});return c?P(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),jl=O({elu_:function OI(n){const e={x:C(n,"x","elu","float32")};return F.runKernel(ja,e)}}),ms=O({equal_:function PI(n,t){let e=C(n,"a","equal","string_or_numeric"),s=C(t,"b","equal","string_or_numeric");return[e,s]=At(e,s),Ve(e.shape,s.shape),F.runKernel(Wi,{a:e,b:s})}}),Gn=O({exp_:function LI(n){const e={x:C(n,"x","exp")};return F.runKernel(Ka,e)}}),Nn=O({expandDims_:function VI(n,t=0){const e=C(n,"x","expandDims","string_or_numeric");return v(t<=e.rank,()=>"Axis must be <= rank of the tensor"),F.runKernel(Gi,{input:e},{dim:t})}}),ts=O({tile_:function MI(n,t){const e=C(n,"x","tile","string_or_numeric");return v(e.rank===t.length,()=>`Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`),F.runKernel(_o,{x:e},{reps:t})}}),Qm=O({eye_:function zI(n,t,e,s="float32"){null==t&&(t=n);const r=He([n,t],s),a=n<=t?n:t;for(let i=0;i<a;++i)r.set(1,i,i);const o=P(r.toTensor(),[n,t]);if(null==e)return o;if(1===e.length)return ts(Nn(o,0),[e[0],1,1]);if(2===e.length)return ts(Nn(Nn(o,0),0),[e[0],e[1],1,1]);if(3===e.length)return ts(Nn(Nn(Nn(o,0),0),0),[e[0],e[1],e[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`)}}),ql=O({floor_:function BI(n){const e={x:C(n,"x","floor","float32")};return F.runKernel(Ya,e)}}),ed=O({gather_:function WI(n,t,e=0,s=0){const r=C(n,"x","gather"),a=C(t,"indices","gather","int32");return F.runKernel(Hi,{x:r,indices:a},{axis:e,batchDims:s})}}),Fn=O({greater_:function GI(n,t){let e=C(n,"a","greater","string_or_numeric"),s=C(t,"b","greater","string_or_numeric");return[e,s]=At(e,s),Ve(e.shape,s.shape),F.runKernel(ji,{a:e,b:s})}}),kr=O({greaterEqual_:function UI(n,t){let e=C(n,"a","greaterEqual","string_or_numeric"),s=C(t,"b","greaterEqual","string_or_numeric");return[e,s]=At(e,s),Ve(e.shape,s.shape),F.runKernel(Ja,{a:e,b:s})}}),td=O({leakyRelu_:function HI(n,t=.2){const s={x:C(n,"x","leakyRelu")};return F.runKernel(qi,s,{alpha:t})}}),Un=O({log_:function jI(n){const e={x:C(n,"x","log","float32")};return F.runKernel(so,e)}}),nd=O({log1p_:function qI(n){const e={x:C(n,"x","log1p")};return F.runKernel(ro,e)}}),ns=O({max_:function KI(n,t=null,e=!1){const r={x:C(n,"x","max")};return F.runKernel(el,r,{reductionIndices:t,keepDims:e})}}),be=O({sum_:function XI(n,t=null,e=!1){let s=C(n,"x","sum");return"bool"===s.dtype&&(s=de(s,"int32")),F.runKernel(wl,{x:s},{axis:t,keepDims:e})}}),eg=O({logSoftmax_:function YI(n,t=-1){const e=C(n,"logits","logSoftmax");if(-1===t&&(t=e.rank-1),t!==e.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`);return Ts((r,a)=>{const i=ns(r,t,!0),l=xe(r,i),u=xe(de(l,"float32"),Un(be(Gn(l),t,!0)));return a([u]),{value:u,gradFunc:(h,d)=>{const[p]=d,g=Gn(p);return xe(h,D(be(h,t,!0),g))}}})(e)}}),Es=O({logicalAnd_:function ZI(n,t){const e=C(n,"a","logicalAnd","bool"),s=C(t,"b","logicalAnd","bool");return Ve(e.shape,s.shape),F.runKernel(Yi,{a:e,b:s})}}),st=O({matMul_:function JI(n,t,e=!1,s=!1){let r=C(n,"a","matMul"),a=C(t,"b","matMul");return[r,a]=At(r,a),F.runKernel(Ai,{a:r,b:a},{transposeA:e,transposeB:s})}}),sd=O({maxPool_:function QI(n,t,e,s,r){const a=C(n,"x","maxPool");let i=a,l=!1;3===a.rank&&(l=!0,i=P(a,[1,a.shape[0],a.shape[1],a.shape[2]])),v(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),v(nn(e,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '1'`),pn("maxPool",s,r);const h=F.runKernel(tl,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r});return l?P(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),tS=O({maxPool3d_:function eS(n,t=[1,1,1],e,s,r,a="NDHWC"){const o=C(n,"x","maxPool3d");let i=o,l=!1;4===o.rank&&(l=!0,i=P(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),v(5===i.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`),v("NDHWC"===a,()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`),pn("maxPool3d",s,r);const h=F.runKernel(nl,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r,dataFormat:a});return l?P(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),Pt=O({mean_:function nS(n,t=null,e=!1){const r={x:C(n,"x","mean")};return F.runKernel(sl,r,{axis:t,keepDims:e})}}),Kl=O({min_:function sS(n,t=null,e=!1){const r={x:C(n,"x","min")};return F.runKernel(rl,r,{axis:t,keepDims:e})}}),Xl=O({minimum_:function rS(n,t){let e=C(n,"a","minimum"),s=C(t,"b","minimum");return[e,s]=At(e,s),"bool"===e.dtype&&(e=de(e,"int32"),s=de(s,"int32")),Ve(e.shape,s.shape),F.runKernel(oo,{a:e,b:s})}});function rd(n,t){for(let e=0;e<n.length;++e)if(n[n.length-e-1]!==t-1-e)return!1;return!0}function tg(n,t,e){const s=n.length+t.length,r=[];let a=0,o=0;for(let i=0;i<s;i++)-1===e.indexOf(i)?r.push(n[a++]):r.push(t[o++]);return r}function Zt(n,t){const e=[],s=n.length;for(let a=0;a<s;a++)-1===t.indexOf(a)&&e.push(n[a]);return[e,t.map(a=>n[a])]}function Lt(n,t){return tg(n,t.map(s=>1),t)}function sn(n,t,e){v(rd(t,e),()=>`${n} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`)}function Ct(n,t){if(rd(n,t))return null;const e=[];for(let s=0;s<t;++s)-1===n.indexOf(s)&&e.push(s);return n.forEach(s=>e.push(s)),e}function Ks(n){return n.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function Vt(n,t){const e=[];for(let s=t-n;s<t;++s)e.push(s);return e}const ad=O({moments_:function aS(n,t=null,e=!1){const s=ve(t,(n=C(n,"x","moments")).shape),r=Pt(n,s,e);let a=r.shape;e||(a=Lt(r.shape,s));const o=dt(xe(de(n,"float32"),P(r,a)));return{mean:r,variance:Pt(o,s,e)}}}),Nt=O({neg_:function oS(n){const e={x:C(n,"x","neg")};return F.runKernel(ol,e)}}),Go=O({notEqual_:function iS(n,t){let e=C(n,"a","notEqual","string_or_numeric"),s=C(t,"b","notEqual","string_or_numeric");return[e,s]=At(e,s),Ve(e.shape,s.shape),F.runKernel(il,{a:e,b:s})}}),ng=O({oneHot_:function lS(n,t,e=1,s=0,r="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const o={indices:C(n,"indices","oneHot","int32")};return F.runKernel(ul,o,{dtype:r,depth:t,onValue:e,offValue:s})}});function Jt(n,t="float32"){if(ks(n),"complex64"===t){const s=Jt(n,"float32"),r=Jt(n,"float32");return br(s,r)}const e=on(E(n),t);return F.makeTensor(e,n,t)}function Xs(n,t="float32"){if(ks(n),"complex64"===t){const s=Xs(n,"float32"),r=Jt(n,"float32");return br(s,r)}const e=fc(E(n),t);return F.makeTensor(e,n,t)}const Hn=O({onesLike_:function uS(n){const e={x:C(n,"x","onesLike")};return F.runKernel(ll,e)}}),od=O({pad_:function cS(n,t,e=0){const s=C(n,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");return F.runKernel(hl,{x:s},{paddings:t,constantValue:e})}}),id=O({prelu_:function hS(n,t){const e=C(n,"x","prelu"),s=C(t,"alpha","prelu");return F.runKernel(dl,{x:e,alpha:s})}});var ld=te(340);class ud{constructor(t,e,s,r,a){this.mean=t,this.stdDev=e,this.dtype=s,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const o=a||Math.random();this.random=ld.alea(o.toString())}nextValue(){if(!isNaN(this.nextVal)){const r=this.nextVal;return this.nextVal=NaN,r}let t,e,s=!1;for(;!s;){let r,a,o;do{r=2*this.random()-1,a=2*this.random()-1,o=r*r+a*a}while(o>=1||0===o);const i=Math.sqrt(-2*Math.log(o)/o);t=this.mean+this.stdDev*r*i,e=this.mean+this.stdDev*a*i,(!this.truncated||this.isValidTruncated(t))&&(s=!0)}return(!this.truncated||this.isValidTruncated(e))&&(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class dS{constructor(t=0,e=1,s,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=s,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=ld.alea(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const yS=O({randomNormal_:function gS(n,t=0,e=1,s,r){if(ks(n),null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const a=new ud(t,e,s,!1,r),o=He(n,s);for(let i=0;i<o.values.length;i++)o.values[i]=a.nextValue();return o.toTensor()}}),Yl=O({randomUniform_:function xS(n,t=0,e=1,s="float32",r){ks(n);const a=He(n,s),o=new dS(t,e,null,r);for(let i=0;i<a.values.length;i++)a.values[i]=o.nextValue();return a.toTensor()}});function Uo(n,t,e=1,s="float32"){if(0===e)throw new Error("Cannot have a step of zero");return F.runKernel(Kc,{},{start:n,stop:t,step:e,dtype:s})}const Ds=O({relu_:function bS(n){const e={x:C(n,"x","relu")};return F.runKernel(po,e)}}),Tr=O({reverse_:function wS(n,t){const s={x:C(n,"x","reverse")};return F.runKernel(yl,s,{dims:t})}}),sg=O({selu_:function vS(n){const e={x:C(n,"x","selu")};return F.runKernel(yo,e)}}),rg=O({separableConv2d_:function IS(n,t,e,s,r,a=[1,1],o="NHWC"){const i=C(n,"x","separableConv2d"),l=C(t,"depthwiseFilter","separableConv2d"),u=C(e,"pointwiseFilter","separableConv2d");let c=i,h=!1;if(3===i.rank&&(h=!0,c=P(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");v(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),v(4===l.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),v(4===u.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),v(1===u.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),v(1===u.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);const d=l.shape[2],p=l.shape[3];v(u.shape[2]===d*p,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*p}, but got ${u.shape[2]}.`);const f=Hl(c,l,s,r,o,a),m=Nr(f,u,1,"valid",o);return h?P(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),sa=O({sigmoid_:function SS(n){const e={x:C(n,"x","sigmoid","float32")};return F.runKernel(vo,e)}}),lt=O({slice_:function CS(n,t,e){const s=C(n,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");return F.runKernel(bl,{x:s},{begin:t,size:e})}}),hd=O({slice1d_:function NS(n,t,e){const s=C(n,"x","slice1d");return v(1===s.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`),lt(s,[t],[e])}}),ag=O({slice2d_:function kS(n,t,e){const s=C(n,"x","slice2d");return v(2===s.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`),lt(s,t,e)}}),dd=O({slice3d_:function TS(n,t,e){const s=C(n,"x","slice3d");return v(3===s.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`),lt(s,t,e)}}),Zl=O({slice4d_:function _S(n,t,e){const s=C(n,"x","slice4d");return v(4===s.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`),lt(s,t,e)}}),pd=O({softmax_:function $S(n,t=-1){const e=C(n,"logits","softmax","float32");if(-1===t&&(t=e.rank-1),t!==e.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`);return F.runKernel(Sl,{logits:e},{dim:t})}}),Ho=O({softplus_:function ES(n){const e={x:C(n,"x","softplus")};return F.runKernel(Io,e)}}),On=O({split_:function DS(n,t,e=0){const r={x:C(n,"x","split")};return F.runKernel(Il,r,{numOrSizeSplits:t,axis:e})}}),jo=O({squeeze_:function AS(n,t){const e=C(n,"x","squeeze","string_or_numeric");return P(e,Ft(e.shape,t).newShape)}}),As=O({stack_:function RS(n,t=0){const e=lm(n,"tensors","stack","string_or_numeric");return v(e.length>=1,()=>"Pass at least one tensor to tf.stack"),e.length>0&&v(t<=e[0].rank,()=>"Axis must be <= rank of the tensor"),F.runKernel(cl,e,{axis:t})}}),fd=O({tanh_:function FS(n){const e={x:C(n,"x","tanh","float32")};return F.runKernel(To,e)}});function kn(n,t){T(n);const e=Fo(n,t);if(1!==e.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Oo(n,null,e,t)}const og=O({truncatedNormal_:function OS(n,t=0,e=1,s,r){if(ks(n),null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new ud(t,e,s,!0,r),o=He(n,s);for(let i=0;i<o.values.length;i++)o.values[i]=a.nextValue();return o.toTensor()}}),_r=O({unstack_:function PS(n,t=0){const e=C(n,"x","unstack","string_or_numeric");return v(t>=-e.shape.length&&t<e.shape.length,()=>`Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`),F.runKernel(Cl,{value:e},{axis:t})}}),Tn=O({where_:function VS(n,t,e){const s=C(t,"a","where"),r=C(e,"b","where"),a=C(n,"condition","where","bool"),o=Ve(Ve(a.shape,s.shape),r.shape),i=Wo(a,o),l=Wo(s,o),u=Wo(r,o);return F.runKernel(xl,{condition:i,t:l,e:u})}}),md=O({imag_:function MS(n){const e={input:C(n,"input","imag")};return F.runKernel(Bc,e)}}),Jl=O({real_:function zS(n){const e={input:C(n,"input","real")};return F.runKernel(Xc,e)}}),Ze=O({transpose_:function BS(n,t,e){const s=C(n,"x","transpose");if(null==t&&(t=s.shape.map((o,i)=>i).reverse()),v(s.rank===t.length,()=>`Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`),t.forEach(o=>{v(o>=0&&o<s.rank,()=>`All entries in 'perm' must be between 0 and ${s.rank-1} but got ${t}`)}),s.rank<=1)return s.clone();const r={x:s},a={perm:t};return"complex64"===s.dtype?M(()=>{let o=Jl(s),i=md(s);return o=F.runKernel(jr,{x:o},a),i=F.runKernel(jr,{x:i},a),e&&(i=Nt(i)),br(o,i)}):F.runKernel(jr,r,a)}}),US=O({dropout_:function GS(n,t,e,s){const r=C(n,"x","dropout");if(v("float32"===r.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`),v(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return n instanceof Ot?r.clone():r;const a=function WS(n,t){if(null==t)return n.shape.slice();if(ye(n.shape,t))return t;if(n.shape.length===t.length){const e=[];for(let s=0;s<n.shape.length;s++)e.push(null==t[s]&&null!=n.shape[s]?n.shape[s]:t[s]);return e}return t}(r,e),o=1-t,i=Ce(ql(re(Yl(a,0,1,"float32",s),o)),o);return D(r,i)}}),gd=O({fft_:function HS(n){return v("complex64"===n.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${n.dtype}.`),F.runKernel("FFT",{input:n})}}),yd=O({rfft_:function jS(n,t){v("float32"===n.dtype,()=>`The dtype for rfft() must be real value but got ${n.dtype}`);let e=n.shape[n.shape.length-1];const s=n.size/e;let r;if(null!=t&&t<e){const f=n.shape.map(m=>0),g=n.shape.map(m=>m);g[n.shape.length-1]=t,r=lt(n,f,g),e=t}else if(null!=t&&t>e){const f=n.shape.map(g=>g);f[n.shape.length-1]=t-e,r=un([n,Jt(f)],n.shape.length-1),e=t}else r=n;const a=Je(r),o=P(br(r,a),[s,e]),i=gd(o),l=Math.floor(e/2)+1,u=Jl(i),c=md(i),h=On(u,[l,e-l],u.shape.length-1),d=On(c,[l,e-l],c.shape.length-1),p=r.shape.slice();return p[r.shape.length-1]=l,P(br(h[0],d[0]),p)}}),Ql=O({ifft_:function qS(n){return v("complex64"===n.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${n.dtype}.`),F.runKernel(zc,{input:n})}}),ig=O({irfft_:function KS(n){const t=n.shape[n.shape.length-1],e=n.size/t;let s;if(t<=2){const r=P(n,[e,t]);s=Ql(r)}else{const r=[e,2*(t-1)],a=P(Jl(n),[e,t]),o=P(md(n),[e,t]),i=Tr(lt(a,[0,1],[e,t-2]),1),l=D(Tr(lt(o,[0,1],[e,t-2]),1),Pe(-1)),u=un([a,i],1),c=un([o,l],1),h=P(br(u,c),[r[0],r[1]]);s=Ql(h)}if(s=Jl(s),3===n.rank&&0!==n.shape[0]){const r=s,a=n.shape[0];s=P(s,[a,s.shape[0]/a,s.shape[1]]),r.dispose()}return s}}),xd=O({conv2DBackpropFilter_:function XS(n,t,e,s,r,a="NHWC",o){let i=n;3===n.rank&&(i=P(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let l=t;3===l.rank&&(l=P(t,[1,t.shape[0],t.shape[1],t.shape[2]])),v(4===i.rank,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`),v(4===l.rank,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`),v(4===e.length,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`);const u="NHWC"===a?i.shape[3]:i.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];return v(u===e[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${e[2]}.`),v(c===e[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${e[3]}).`),pn("conv2dDerFilter",r,o),F.runKernel(Nc,{x:i,dy:l},{strides:s,pad:r,dataFormat:a,dimRoundingMode:o,filterShape:e})}}),lg=O({relu6_:function YS(n){const e={x:C(n,"x","relu6")};return F.runKernel(fo,e)}}),qo=O({step_:function ZS(n,t=0){const s={x:C(n,"x","step")};return F.runKernel($o,s,{alpha:t})}});function eu(n,t,e){if(null==e||"linear"===e)return n;if("relu"===e)return D(n,qo(t));throw new Error(`Cannot compute gradient for fused activation ${e}.`)}function tu(n,t){let e=t;const s=Wt(n.shape,t.shape);return s.length>0&&(e=be(e,s)),P(e,n.shape)}function nu(n,t,e,s){if("linear"===t)return n;if("relu"===t)return Ds(n);if("elu"===t)return jl(n);if("relu6"===t)return lg(n);if("prelu"===t)return id(n,e);if("leakyrelu"===t)return td(n,s);if("sigmoid"===t)return sa(n);throw new Error(`Unknown fused activation ${t}.`)}const su=(n,t)=>!(n>0)||"linear"===t,QS=O({fusedConv2d_:function JS({x:n,filter:t,strides:e,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===su(F.state.gradientDepth,l=l||"linear")){v("NHWC"===r,()=>`Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let S=Nr(n,t,e,s,r,a,o);return null!=i&&(S=re(S,i)),nu(S,l,u,c)}const h=C(n,"x","conv2d","float32"),d=C(t,"filter","conv2d","float32");let p=h,f=!1;3===h.rank&&(f=!0,p=P(h,[1,h.shape[0],h.shape[1],h.shape[2]])),v(4===p.rank,()=>`Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`),v(4===d.rank,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`),pn("fused conv2d",s,o);const g="NHWC"===r?p.shape[3]:p.shape[1];v(d.shape[2]===g,()=>`Error in conv2d: depth of input (${g}) must match input depth for filter ${d.shape[2]}.`),v(nn(e,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${a}'`);const m=Yt(p.shape,d.shape,e,a,s,o);let y,x;if(null!=i&&(y=C(i,"bias","fused conv2d"),[y]=At(y,h),"NHWC"===r?Ve(m.outShape,y.shape):(v(y.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`),v(0===y.shape.length||y.shape[0]===m.outChannels||1===y.shape[0],()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${m.outChannels})`))),null!=u){const S=u.shape;if(v(S.length<=1||3===S.length,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${S.length}.`),1===S.length)v(1===S[0]||S[0]===m.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${S}) is not compatible with the number of output channels (${m.outChannels}).`);else if(3===S.length)try{Ve(S,m.outShape)}catch(N){throw Error(`Error in fused conv2d: PReLU activation weights (${S}) is not compatible with the output shape of the conv2d (${m.outShape}).`)}x=C(u,"prelu weights","fused conv2d")}const b=(S,N)=>{v("NHWC"===r,()=>`Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`);const[k,_,$,L]=N,B=eu(S,$,l);v(qs(a),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);const j=[Qh(_.shape,B,k,e,s),xd(_,B,k.shape,e,s)];if(null!=L){const X=tu(L,B);j.push(X)}return j},w={x:p,filter:d,bias:y,preluActivationWeights:x},I={strides:e,pad:s,dataFormat:r,dilations:a,dimRoundingMode:o,activation:l,leakyreluAlpha:c};return null==i?Ts((N,k,_)=>{let $=F.runKernel(_l,w,I);return _([k,N,$]),f&&($=P($,[$.shape[1],$.shape[2],$.shape[3]])),{value:$,gradFunc:b}})(p,d):Ts((N,k,_,$)=>{let L=F.runKernel(_l,w,I);return $([k,N,L,_]),f&&(L=P(L,[L.shape[1],L.shape[2],L.shape[3]])),{value:L,gradFunc:b}})(p,d,y)}}),ug=O({depthwiseConv2dNativeBackpropFilter_:function eC(n,t,e,s,r,a=[1,1],o){let i=n;3===n.rank&&(i=P(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let l=t;return 3===l.rank&&(l=P(t,[1,t.shape[0],t.shape[1],t.shape[2]])),F.runKernel(Ac,{x:i,dy:l},{strides:s,pad:r,dimRoundingMode:o,dilations:a,filterShape:e})}}),cg=O({depthwiseConv2dNativeBackpropInput_:function tC(n,t,e,s,r,a=[1,1],o){let i=t,l=!1;3===t.rank&&(l=!0,i=P(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const h=F.runKernel(Rc,{dy:i,filter:e},{strides:s,pad:r,dimRoundingMode:o,dilations:a,inputShape:n});return l?P(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),hg=O({fusedMatMul_:function sC({a:n,b:t,transposeA:e=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:o,leakyreluAlpha:i=.2}){if(!1===su(F.state.gradientDepth,a)){let L=st(n,t,e,s);return null!=r&&(L=re(L,r)),nu(L,a,o,i)}let l=C(n,"a","fused matMul"),u=C(t,"b","fused matMul");[l,u]=At(l,u);const c=e?l.shape[l.rank-2]:l.shape[l.rank-1],h=s?u.shape[u.rank-1]:u.shape[u.rank-2],d=e?l.shape[l.rank-1]:l.shape[l.rank-2],p=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),g=u.shape.slice(0,-2),m=E(f),y=E(g);v(c===h,()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${e} and transposeB=${s} must match.`);const b=Ve(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([d,p]),w=P(l,e?[m,c,d]:[m,d,c]),I=P(u,s?[y,p,h]:[y,h,p]);let S,N;null!=r&&(S=C(r,"bias","fused matMul"),[S]=At(S,l),Ve(b,S.shape)),null!=o&&(N=C(o,"prelu weights","fused matMul"));const k=(L,B)=>{const[G,H,j,X]=B,Q=eu(P(L,j.shape),j,a);let q,ee;return e||s?!e&&s?(q=st(Q,H,!1,!1),ee=st(Q,G,!0,!1)):e&&!s?(q=st(H,Q,!1,!0),ee=st(G,Q,!1,!1)):(q=st(H,Q,!0,!0),ee=st(Q,G,!0,!0)):(q=st(Q,H,!1,!0),ee=st(G,Q,!0,!1)),null!=r?[q,ee,tu(X,Q)]:[q,ee]},_={a:w,b:I,bias:S,preluActivationWeights:N},$={transposeA:e,transposeB:s,activation:a,leakyreluAlpha:i};return null==r?Ts((B,G,H)=>{const j=F.runKernel(Tl,_,$);return H([B,G,j]),{value:P(j,b),gradFunc:k}})(w,I):Ts((B,G,H,j)=>{const X=F.runKernel(Tl,_,$);return j([B,G,X,H]),{value:P(X,b),gradFunc:k}})(w,I,S)}});function ru(n,t,e){if(T(n),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=Fo(n,e);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Oo(n,t,s,e)}const dC=O({cropAndResize_:function hC(n,t,e,s,r="bilinear",a=0){const o=C(n,"image","cropAndResize"),i=C(t,"boxes","cropAndResize","float32"),l=C(e,"boxInd","cropAndResize","int32"),u=i.shape[0];return v(4===o.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`),v(2===i.rank&&4===i.shape[1],()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`),v(1===l.rank&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`),v(2===s.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`),v(s[0]>=1&&s[1]>=1,()=>`cropSize must be atleast [1,1], but was ${s}`),v("bilinear"===r||"nearest"===r,()=>`method must be bilinear or nearest, but was ${r}`),F.runKernel($c,{image:o,boxes:i,boxInd:l},{method:r,extrapolationValue:a,cropSize:s})}}),fC=O({flipLeftRight_:function pC(n){const t=C(n,"image","flipLeftRight","float32");return v(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`),F.runKernel(Mc,{image:t},{})}}),gC=O({grayscaleToRGB_:function mC(n){const t=C(n,"image","grayscaleToRGB"),e=t.rank-1,s=t.shape[e];v(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),v(1===s,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`);const r=new Array(t.rank);return r.fill(1,0,e),r[e]=3,ts(t,r)}}),xC=O({rotateWithOffset_:function yC(n,t,e=0,s=.5){const r=C(n,"image","rotateWithOffset","float32");return v(4===r.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`),F.runKernel(hh,{image:r},{radians:t,fillValue:e,center:s})}});function ra(n,t,e,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=n.shape[0];return e=Math.min(e,o),v(0<=s&&s<=1,()=>`iouThreshold must be in [0, 1], but was '${s}'`),v(2===n.rank,()=>`boxes must be a 2D tensor, but was of rank '${n.rank}'`),v(4===n.shape[1],()=>`boxes must have 4 columns, but 2nd dimension was ${n.shape[1]}`),v(1===t.rank,()=>"scores must be a 1D tensor"),v(t.shape[0]===o,()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`),v(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:e,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const wC=O({nonMaxSuppression_:function bC(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY){const a=C(n,"boxes","nonMaxSuppression","float32"),o=C(t,"scores","nonMaxSuppression","float32"),i=ra(a,o,e,s,r);return F.runKernel(Hc,{boxes:a,scores:o},{maxOutputSize:e=i.maxOutputSize,iouThreshold:s=i.iouThreshold,scoreThreshold:r=i.scoreThreshold})}});function vC(n,t,e){const s=function IC(n,t,e){return function CC(n,t,e){let s=0,r=n.length,a=0,o=!1;for(;s<r;){a=s+(r-s>>>1);const i=e(t,n[a]);i>0?s=a+1:(r=a,o=!i)}return o?s:-s-1}(n,t,e||SC)}(n,t,e);n.splice(s<0?-(s+1):s,0,t)}function SC(n,t){return n>t?1:n<t?-1:0}function bd(n,t,e,s,r){return Id(n,t,e,s,r,0)}function wd(n,t,e,s,r,a){return Id(n,t,e,s,r,0,!1,a,!0)}function vd(n,t,e,s,r,a){return Id(n,t,e,s,r,a,!0)}function Id(n,t,e,s,r,a,o=!1,i=!1,l=!1){const u=[];for(let m=0;m<t.length;m++)t[m]>r&&u.push({score:t[m],boxIndex:m,suppressBeginIndex:0});u.sort(mg);const c=a>0?-.5/a:0,h=[],d=[];for(;h.length<e&&u.length>0;){const m=u.pop(),{score:y,boxIndex:x,suppressBeginIndex:b}=m;if(y<r)break;let w=!1;for(let I=h.length-1;I>=b;--I){const S=NC(n,x,h[I]);if(S>=s){w=!0;break}if(m.score=m.score*kC(s,c,S),m.score<=r)break}m.suppressBeginIndex=h.length,w||(m.score===y?(h.push(x),d.push(m.score)):m.score>r&&vC(u,m,mg))}const p=h.length,f=e-p;i&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const g={selectedIndices:h};return o&&(g.selectedScores=d),l&&(g.validOutputs=p),g}function NC(n,t,e){const s=n.subarray(4*t,4*t+4),r=n.subarray(4*e,4*e+4),a=Math.min(s[0],s[2]),o=Math.min(s[1],s[3]),i=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),d=Math.max(r[1],r[3]),p=(i-a)*(l-o),f=(h-u)*(d-c);if(p<=0||f<=0)return 0;const g=Math.max(a,u),m=Math.max(o,c),y=Math.min(i,h),x=Math.min(l,d),b=Math.max(y-g,0)*Math.max(x-m,0);return b/(p+f-b)}function kC(n,t,e){const s=Math.exp(t*e*e);return e<=n?s:0}function mg(n,t){return n.score-t.score||n.score===t.score&&t.boxIndex-n.boxIndex}function Sd(){return(Sd=A(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY){const a=C(n,"boxes","nonMaxSuppressionAsync"),o=C(t,"scores","nonMaxSuppressionAsync"),i=ra(a,o,e,s,r);e=i.maxOutputSize,s=i.iouThreshold,r=i.scoreThreshold;const l=yield Promise.all([a.data(),o.data()]),u=l[0],c=l[1],{selectedIndices:h}=bd(u,c,e,s,r);return a!==n&&a.dispose(),o!==t&&o.dispose(),kn(h,"int32")})).apply(this,arguments)}const EC=O({nonMaxSuppressionWithScore_:function $C(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const o=C(n,"boxes","nonMaxSuppression"),i=C(t,"scores","nonMaxSuppression"),l=ra(o,i,e,s,r,a),h=F.runKernel(qc,{boxes:o,scores:i},{maxOutputSize:e=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma});return{selectedIndices:h[0],selectedScores:h[1]}}});function Cd(){return(Cd=A(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const o=C(n,"boxes","nonMaxSuppressionAsync"),i=C(t,"scores","nonMaxSuppressionAsync"),l=ra(o,i,e,s,r,a);e=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=yield Promise.all([o.data(),i.data()]),c=u[0],h=u[1],{selectedIndices:d,selectedScores:p}=vd(c,h,e,s,r,a);return o!==n&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:kn(d,"int32"),selectedScores:kn(p)}})).apply(this,arguments)}const FC=O({nonMaxSuppressionPadded_:function RC(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const o=C(n,"boxes","nonMaxSuppression"),i=C(t,"scores","nonMaxSuppression"),l=ra(o,i,e,s,r,null),f=F.runKernel(jc,{boxes:o,scores:i},{maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a});return{selectedIndices:f[0],validOutputs:f[1]}}});function Nd(){return(Nd=A(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const o=C(n,"boxes","nonMaxSuppressionAsync"),i=C(t,"scores","nonMaxSuppressionAsync"),l=ra(o,i,e,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[d,p]=yield Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:g}=wd(d,p,u,c,h,a);return o!==n&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:kn(f,"int32"),validOutputs:Pe(g,"int32")}})).apply(this,arguments)}const gg=O({resizeBilinear_:function LC(n,t,e=!1,s=!1){const r=C(n,"images","resizeBilinear");v(3===r.rank||4===r.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`),v(2===t.length,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),v(!1===s||!1===e,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let a=r,o=!1;3===r.rank&&(o=!0,a=P(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,u=F.runKernel(gl,{images:a},{alignCorners:e,halfPixelCenters:s,size:t});return o?P(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),yg=O({resizeNearestNeighbor_:function VC(n,t,e=!1,s=!1){const r=C(n,"images","resizeNearestNeighbor");v(3===r.rank||4===r.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`),v(2===t.length,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),v("float32"===r.dtype||"int32"===r.dtype,()=>"`images` must have `int32` or `float32` as dtype"),v(!1===s||!1===e,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let a=r,o=!1;3===r.rank&&(o=!0,a=P(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,u=F.runKernel(ml,{images:a},{alignCorners:e,halfPixelCenters:s,size:t});return o?P(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),zC=O({bincount_:function MC(n,t,e){const s=C(n,"x","bincount"),r=C(t,"weights","bincount");return v("int32"===s.dtype,()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`),v(e>=0,()=>`size must be non-negative, but got ${e}.`),v(r.size===s.size||0===r.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`),F.runKernel(Sc,{x:s,weights:r},{size:e})}}),aa=O({lessEqual_:function BC(n,t){let e=C(n,"a","lessEqual","string_or_numeric"),s=C(t,"b","lessEqual","string_or_numeric");return[e,s]=At(e,s),Ve(e.shape,s.shape),F.runKernel(Xi,{a:e,b:s})}}),xg=O({round_:function WC(n){const e={x:C(n,"x","round")};return F.runKernel(mo,e)}}),HC=O({threshold_:function GC(n,t="binary",e=!1,s=.5){const r=C(n,"image","threshold"),l=r.shape[0]*r.shape[1];let c,h,d,p,u=D(kn([s]),255);if(v(3===r.rank,()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`),v(3===r.shape[2]||1===r.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`),v("int32"===r.dtype||"float32"===r.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`),v("otsu"===t||"binary"===t,()=>`Method must be binary or otsu, but was ${t}`),3===r.shape[2]){[c,h,d]=On(r,[1,1,1],-1);const m=D(c,.2989),y=D(h,.587),x=D(d,.114);p=re(re(m,y),x)}else p=n;"otsu"===t&&(u=function UC(n,t){let a,o,i,l,u,c,e=kn([-1]),s=kn([0]),r=kn([0]);for(let h=0;h<n.size-1;h++){a=lt(n,0,h+1),o=lt(n,h+1),u=Ce(be(a),t),c=Ce(be(o),t);const d=be(D(a,Uo(0,a.size)));i=Ce(d,be(a));const p=Lo(o.shape,a.size),f=re(Uo(0,o.size),p),g=D(o,f);l=Ce(be(g),be(o));const m=xe(i,l),y=xe(i,l),x=D(u,c);r=D(D(x,m),y);const b=Fn(r,s);s=Tn(b,r,s),e=Tn(b,kn([h]),e)}return e}(zC(de(xg(p),"int32"),Po([]),256),l));const f=e?aa(p,u):Fn(p,u);return de(D(f,255),"int32")}}),qC=O({transform_:function jC(n,t,e="nearest",s="constant",r=0,a){const o=C(n,"image","transform","float32"),i=C(t,"transforms","transform","float32");return v(4===o.rank,()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`),v(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),v(null==a||2===a.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`),F.runKernel(lh,{image:o,transforms:i},{interpolation:e,fillMode:s,fillValue:r,outputShape:a})}}),XC=O({bandPart_:function KC(n,t,e){v(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),v(e%1==0,()=>`bandPart(): numUpper must be an integer, got ${e}.`);const s=C(n,"a","bandPart");v(s.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`);const r=s.shape,[a,o]=s.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(e<=o))throw new Error(`bandPart(): numUpper (${e}) must not be greater than the number of columns (${o}).`);t<0&&(t=a),e<0&&(e=o);const i=P(Uo(0,a,1,"int32"),[-1,1]),l=Uo(0,o,1,"int32"),u=xe(i,l),c=Es(aa(u,Pe(+t,"int32")),kr(u,Pe(-e,"int32"))),h=Jt([a,o],s.dtype);return P(As(_r(P(s,[-1,a,o])).map(d=>Tn(c,d,h))),r)}});function bg(n,t,e=null){if(0===n.rank)return Xt(n);if(1!==n.rank&&null===e)return bg(P(n,[-1]),t,e);if(1===n.rank||"number"==typeof e||Array.isArray(e)&&1===e.length){if(1===t)return be(Xt(n),e);if(t===1/0)return ns(Xt(n),e);if(t===-1/0)return Kl(Xt(n),e);if("euclidean"===t||2===t)return dn(be(ea(Xt(n),Pe(2,"int32")),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(e)&&2===e.length){if(1===t)return ns(be(Xt(n),e[0]),e[1]-1);if(t===1/0)return ns(be(Xt(n),e[1]),e[0]);if(t===-1/0)return Kl(be(Xt(n),e[1]),e[0]);if("fro"===t||"euclidean"===t)return dn(be(dt(n),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${e}`)}const au=O({norm_:function YC(n,t="euclidean",e=null,s=!1){const r=bg(n=C(n,"x","norm"),t,e);let a=r.shape;if(s){const o=ve(e,n.shape);a=Lt(r.shape,o)}return P(r,a)}}),JC=O({gramSchmidt_:function ZC(n){let t;if(Array.isArray(n)){t=!1,v(null!=n&&n.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const r=n[0].shape[0];for(let a=1;a<n.length;++a)v(n[a].shape[0]===r,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${n[a].shape[0]} vs. ${r})`)}else t=!0,n=On(n,n.shape[0],0).map(r=>jo(r,[0]));v(n.length<=n[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${n.length}) exceeds number of dimensions (${n[0].shape[0]}).`);const e=[],s=n;for(let r=0;r<n.length;++r)e.push(F.tidy(()=>{let a=s[r];if(r>0)for(let o=0;o<r;++o){const i=D(be(D(e[o],a)),e[o]);a=xe(a,i)}return Ce(a,au(a,"euclidean"))}));return t?As(e,0):e}});function wg(n,t=!1){return F.tidy(()=>{v(2===n.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${n.shape.length}D Tensor.`);const e=n.shape[0],s=n.shape[1];let r=Qm(e),a=Ir(n);const o=ru([[1]],[1,1]);let i=Ir(o);const l=e>=s?s:e;for(let u=0;u<l;++u){const c=a,h=i,d=r;[i,a,r]=F.tidy(()=>{const p=lt(a,[u,u],[e-u,1]),f=au(p),g=lt(a,[u,u],[1,1]),m=Tn(Fn(g,0),ru([[-1]]),ru([[1]])),y=xe(g,D(m,f)),x=Ce(p,y);i=1===x.shape[0]?Ir(o):un([o,lt(x,[1,0],[x.shape[0]-1,x.shape[1]])],0);const b=Nt(Ce(st(m,y),f)),w=lt(a,[u,0],[e-u,s]),I=D(b,i),S=Ze(i);if(0===u)a=xe(w,st(I,st(S,w)));else{const _=xe(w,st(I,st(S,w)));a=un([lt(a,[0,0],[u,s]),_],0)}const N=Ze(I),k=lt(r,[0,u],[e,r.shape[1]-u]);if(0===u)r=xe(k,st(st(k,i),N));else{const _=xe(k,st(st(k,i),N));r=un([lt(r,[0,0],[e,u]),_],1)}return[i,a,r]}),Ge([c,h,d])}return!t&&e>s&&(r=lt(r,[0,0],[e,s]),a=lt(a,[0,0],[s,s])),[r,a]})}const eN=O({qr_:function QC(n,t=!1){if(v(n.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${n.rank}`),2===n.rank)return wg(n,t);{const e=n.shape.slice(0,n.shape.length-2).reduce((l,u)=>l*u),s=_r(P(n,[e,n.shape[n.shape.length-2],n.shape[n.shape.length-1]]),0),r=[],a=[];return s.forEach(l=>{const[u,c]=wg(l,t);r.push(u),a.push(c)}),[P(As(r,0),n.shape),P(As(a,0),n.shape)]}}}),vg=O({squaredDifference_:function dN(n,t){let e=C(n,"a","squaredDifference"),s=C(t,"b","squaredDifference");return[e,s]=At(e,s),Ve(e.shape,s.shape),F.runKernel(Co,{a:e,b:s},{})}}),Ig=O({logSumExp_:function xN(n,t=null,e=!1){const s=C(n,"x","logSumExp"),r=ve(t,s.shape),a=ns(s,r,!0),o=xe(s,a),i=Gn(o),l=be(i,r),u=Un(l),c=re(P(a,u.shape),u);if(e){const h=Lt(c.shape,r);return P(c,h)}return c}}),Ys={flipLeftRight:fC,grayscaleToRGB:gC,resizeNearestNeighbor:yg,resizeBilinear:gg,rotateWithOffset:xC,cropAndResize:dC,nonMaxSuppression:wC,nonMaxSuppressionAsync:function TC(n,t,e){return Sd.apply(this,arguments)},nonMaxSuppressionWithScore:EC,nonMaxSuppressionWithScoreAsync:function DC(n,t,e){return Cd.apply(this,arguments)},nonMaxSuppressionPadded:FC,nonMaxSuppressionPaddedAsync:function OC(n,t,e){return Nd.apply(this,arguments)},threshold:HC,transform:qC},PN={bandPart:XC,gramSchmidt:JC,qr:eN},oa=class LN{static sgd(t){return new Ph(t)}static momentum(t,e,s=!1){return new _m(t,e,s)}static rmsprop(t,e=.9,s=0,r=null,a=!1){return new $m(t,e,s,r,a)}static adam(t=.001,e=.9,s=.999,r=null){return new km(t,e,s,r)}static adadelta(t=.001,e=.95,s=null){return new Cm(t,e,s)}static adamax(t=.002,e=.9,s=.999,r=null,a=0){return new Tm(t,e,s,r,a)}static adagrad(t,e=.1){return new Nm(t,e)}},VN="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:n=>n();function Sg(){return new Promise(n=>VN(()=>n()))}function kd(n,t){const e=n[0].length;n.forEach((r,a)=>{v(r.length===e,()=>`Error in concat${e}D: rank of tensors[${a}] must be the same as the rank of the rest (${e})`)}),v(t>=0&&t<e,()=>`Error in concat${e}D: axis must be between 0 and ${e-1}.`);const s=n[0];n.forEach((r,a)=>{for(let o=0;o<e;o++)v(o===t||r[o]===s[o],()=>`Error in concat${e}D: Shape of tensors[${a}] (${r}) does not match the shape of the rest (${s}) along the non-concatenated axis ${a}.`)})}function gs(n,t){const e=n[0].slice();for(let s=1;s<n.length;s++)e[t]+=n[s][t];return e}var jn=(()=>{return(n=jn||(jn={}))[n.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",n[n.VALUE_ROWIDS=1]="VALUE_ROWIDS",n[n.ROW_LENGTHS=2]="ROW_LENGTHS",n[n.ROW_SPLITS=3]="ROW_SPLITS",n[n.ROW_LIMITS=4]="ROW_LIMITS",n[n.ROW_STARTS=5]="ROW_STARTS",jn;var n})();function Cg(n,t,e){let s=new Array;if(null==e&&null==t)return s;if(null==t)for(;s.length<n+e.length;)s.push(-1);else s=t.slice();if(null==e)return s;if(n+e.length!==s.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${n+e.length}, but shape.rank = ${s.length}`);for(let r=1;r<e.length;++r){const a=e[r],o=s[s.length-e.length+r],i=s[o];if(a>=0)if(i>=0){if(i!==a)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${r+n}] = ${a} but shape[${r+n}] = ${i}`)}else s[o]=a}return s}function Ng(n){const t={FIRST_DIM_SIZE:jn.FIRST_DIM_SIZE,VALUE_ROWIDS:jn.VALUE_ROWIDS,ROW_LENGTHS:jn.ROW_LENGTHS,ROW_SPLITS:jn.ROW_SPLITS,ROW_LIMITS:jn.ROW_LIMITS,ROW_STARTS:jn.ROW_STARTS},e=[];for(const s of n){if(!(s in t))break;e.push(t[s])}return e}function kg(n){return 0===n.length?0:n[0]===jn.FIRST_DIM_SIZE?n.length-1:n.length}function Tg(n,t){if(null==n||null==t)return;const e=n.length,s=t.length;if(e>=s)throw new Error(`defaultValue.shape=${n} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${e} must be less than ragged tensor input flatValues.rank = ${s})`);for(let r=0;r<Math.min(e,s-1);++r){const a=n[r],o=t[r+1];if(a>=0&&o>=0&&1!==a&&a!==o)throw new Error(`defaultValue.shape=${n}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${r-n.length}] = ${a} but ragged tensor input.flatValues.shape[${r-n.length}] = ${o}`)}}const Td=30;function ou(n){return n<=Td?n:pc(n,Math.floor(Math.sqrt(n)))}function _d(n,t,e){return[e*("number"==typeof n?n:n[0]),t*("number"==typeof n?n:n[1])]}function Ko(n,t,e,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(n[0]/e),r=r.concat(n.slice(1));else{r=r.concat(n[0]);const a=t.length;for(let o=0;o<a;++o)r=r.concat([n[o+1]/t[o],t[o]]);r=r.concat(n.slice(a+1))}return r}function Xo(n,t,e=!0){const s=[];if(e){s.push(t);for(let r=t+1;r<n;++r)r<=2*t?(s.push(r),s.push(r-(t+1))):s.push(r)}else{const r=[],a=[];for(let o=1;o<n;++o)o>=2*t+1||o%2==1?a.push(o):r.push(o);s.push(...r),s.push(0),s.push(...a)}return s}function Yo(n,t,e,s=!0){const r=[];r.push(s?n[0]/e:n[0]*e);for(let a=1;a<n.length;++a)r.push(a<=t.length?s?t[a-1]*n[a]:n[a]/t[a-1]:n[a]);return r}function $d(n,t){const e=[0];for(let s=0;s<t;++s)e.push(n[s][0]);return e}function Ed(n,t,e){const s=n.slice(0,1);for(let r=0;r<e;++r)s.push(n[r+1]-t[r][0]-t[r][1]);return s}function Dd(n,t){const e=n.shape.length,s=t.shape.length;if(e<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>e)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${e}`);if(0===E(n.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${n.shape}.`);const r=t.shape,a=r[r.length-1];let o=1;for(let h=0;h<r.length-1;++h)o*=r[h];const i=n.shape,l=r.slice();l.pop();let u=1;for(let h=a;h<e;++h)u*=i[h],l.push(i[h]);const c=[...Se(n.shape).map(h=>h/u),1].slice(0,a);return[l,o,u,c]}function _g(n,t,e){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${n}, sliceDim: ${s}, and batchDim: ${r}.`;if(e.rank<r)throw new Error(a+` update.rank < ${r}. `);if(n.length<s+(e.rank-r))throw new Error(a+` Output shape length < ${s+(e.rank-r)}`);if(e.rank!==r+n.length-s)throw new Error(a+" update.rank != "+(r+n.length-s));for(let o=0;o<r;++o)if(e.shape[o]!==t.shape[o])throw new Error(a+` updates.shape[${o}] (${e.shape[o]}) != indices.shape[${o}] (${t.shape[o]}).`);for(let o=0;o<e.rank-r;++o)if(e.shape[o+r]!==n[o+s])throw new Error(a+` updates.shape[${o+r}] (${e.shape[o+r]}) != shape[${o+r}] (${n[o+r]})`)}function MN(n,t,e){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(n.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${n.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(e.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${e}`);if(0===e.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===n.size)throw new Error(`Updates specified for empty output. updates shape: ${n.shape}`)}_g(e,t,n)}function Zo(n,t,e){const s=t.shape.length,r=s>1?t.shape[s-1]:1,a=e.length;let o=1;for(let h=r;h<a;++h)o*=e[h];const i=r<1?1:r;return{sliceRank:r,numUpdates:E(t.shape)/i,sliceSize:o,strides:[...Se(e.slice(0,r)),1],outputSize:E(e)}}const iu=1.7580993408473768,lu=1.0507009873554805,Ad=.3275911,Rd=.254829592,Fd=-.284496736,Od=1.421413741,Pd=-1.453152027,Ld=1.061405429;function Fs(n,t){if(n.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${n.length}, imag: ${t.length}.`);const e=new Float32Array(2*n.length);for(let s=0;s<e.length;s+=2)e[s]=n[s/2],e[s+1]=t[s/2];return e}function $g(n){const t=new Float32Array(n.length/2),e=new Float32Array(n.length/2);for(let s=0;s<n.length;s+=2)t[s/2]=n[s],e[s/2]=n[s+1];return{real:t,imag:e}}function Eg(n){const t=Math.ceil(n.length/4),e=new Float32Array(t),s=new Float32Array(t);for(let r=0;r<n.length;r+=4)e[Math.floor(r/4)]=n[r],s[Math.floor(r/4)]=n[r+1];return{real:e,imag:s}}function Dg(n){const t=Math.floor(n.length/4),e=new Float32Array(t),s=new Float32Array(t);for(let r=2;r<n.length;r+=4)e[Math.floor(r/4)]=n[r],s[Math.floor(r/4)]=n[r+1];return{real:e,imag:s}}function Vd(n,t){return{real:n[2*t],imag:n[2*t+1]}}function Ag(n,t,e,s){n[2*s]=t,n[2*s+1]=e}function Rg(n,t){const e=new Float32Array(n/2),s=new Float32Array(n/2);for(let r=0;r<Math.ceil(n/2);r++){const a=(t?2:-2)*Math.PI*(r/n);e[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:e,imag:s}}function Fg(n,t,e){const s=(e?2:-2)*Math.PI*(n/t);return{real:Math.cos(s),imag:Math.sin(s)}}const zN=/->/g;function zd(n,t){const e=((n=n.replace(/\s/g,"")).length-n.replace(zN,"").length)/"->".length;if(e<1)throw new Error("Equations without an arrow are not supported.");if(e>1)throw new Error('Equation must contain exactly one arrow ("->").');const[s,r]=n.split("->");v(-1===s.indexOf("..."),()=>'The ellipsis notation ("...") is not supported yet.');const a=s.split(","),o=a.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let d=0;d<r.length;++d){const p=r[d];if(!a.some(f=>-1!==f.indexOf(p)))throw new Error(`Output subscripts contain the label ${p} not present in the input subscripts.`);-1===i.indexOf(p)&&i.push(p)}for(let d=0;d<s.length;++d){const p=s[d];-1===i.indexOf(p)&&","!==p&&i.push(p)}const l=new Array(a.length);for(let d=0;d<o;++d){if(new Set(a[d].split("")).size!==a[d].length)throw new Error(`Found duplicate axes in input component ${a[d]}. Support for duplicate axes in input is not implemented yet.`);l[d]=[];for(let p=0;p<a[d].length;++p)l[d].push(i.indexOf(a[d][p]))}const u=i.length,h=[];for(let d=r.length;d<u;++d)h.push(d);return{allDims:i,summedDims:h,idDims:l}}function Bd(n,t){let e=new Array(n);e.fill(-1);for(let r=0;r<t.length;++r)e[t[r]]=r;const s=[];for(let r=0;r<n;++r)-1===e[r]&&s.push(r);return e=e.filter(r=>-1!==r),{permutationIndices:e,expandDims:s}}function Wd(n,t,e){const s=new Array(n);for(let r=0;r<e.length;++r){const a=e[r].shape;for(let o=0;o<t[r].length;++o)void 0===s[t[r][o]]?s[t[r][o]]=a[o]:v(s[t[r][o]]===a[o],()=>`Expected dimension ${s[t[r][o]]} at axis ${o} of input shaped ${JSON.stringify(a)}, but got dimension ${a[o]}`)}}function Gd(n,t){const e=n,s=[];let r=0;0===n.length&&e.push(-1),r=n.length+1;for(let o=0;o<r;++o)s.push([]);const a=[];for(let o=0;o<e.length;++o){const l=BN(t,e[o]);for(const u of l)-1===a.indexOf(u)&&(s[o].push(u),a.push(u))}return{path:e,steps:s}}function Ud(n){return n.every((t,e)=>t===e)}function BN(n,t){const e=[];for(let s=0;s<n.length;++s)(0===n[s].length||-1!==n[s].indexOf(t)||-1===t)&&e.push(s);return e}function Hd(n,t,e=0){let s=[];if("number"==typeof t)v(n.shape[e]%t==0,()=>"Number of splits must evenly divide the axis."),s=new Array(t).fill(n.shape[e]/t);else{v(t.reduce((o,i)=>(-1===i&&(o+=1),o),0)<=1,()=>"There should be only one negative value in split array.");const a=t.indexOf(-1);if(-1!==a){const o=t.reduce((i,l)=>l>0?i+l:i);t[a]=n.shape[e]-o}v(n.shape[e]===t.reduce((o,i)=>o+i),()=>"The sum of sizes must match the size of the axis dimension."),s=t}return s}function Lg(n){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${n}`}function Vg(n,t){return`indices(${n}, 0) is invalid: ${t} < 0`}function Mg(n,t,e){return`indices(${n}, 0) is invalid: ${t} >= ${e}`}function zg(n,t){return`only one output dimension may be -1, not both ${n} and ${t}`}function Bg(n,t){return`size ${n} must be non-negative, not ${t}`}function Wg(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function Gg(n,t){return`Input to reshape is a SparseTensor with ${E(n)}\n  dense values, but the requested shape requires a multiple of ${E(t)}. inputShape=${n} outputShape= ${t}`}function Ug(n,t){return`Input to reshape is a tensor with ${E(n)} dense values, but the requested shape has ${E(t)}. inputShape=${n} outputShape=${t}`}function jd(){return"segment ids must be >= 0"}function Hg(){return"segment ids are not increasing"}function jg(n,t){return`Segment id ${n} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function qg(n,t,e){return`Bad: indices[${n}] == ${t} out of range [0, ${e})`}function Kg(n,t){let s,e=!1;for(n<=Td?(s=n,e=!0):s=pc(n,Math.floor(Math.sqrt(n)));!e;)s>t||s===n?e=!0:s=pc(n,s+1);return s}function Xg(n,t,e){const s=[],r=n.length;for(let a=0;a<r;a++)s.push(a!==t?n[a]:e);return s}function qd(n,t,e,s){const r=t.shape.length,a=n.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>a)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${a}).`);if(e<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${e}).`);for(let h=0;h<s;++h)if(n.shape[h]!==t.shape[h])throw new Error(`x.shape[${h}]: ${n.shape[h]} should be equal to indices.shape[${h}]: ${t.shape[h]}.`);const o=n.shape[e],i=[];let l=1,u=1,c=1;for(let h=0;h<s;++h)i.push(n.shape[h]),l*=n.shape[h];for(let h=s;h<e;h++)i.push(n.shape[h]),u*=n.shape[h];for(let h=s;h<r;h++)i.push(t.shape[h]);for(let h=e+1;h<a;h++)i.push(n.shape[h]),c*=n.shape[h];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:o,outputShape:i}}function $r(n){try{return n.map(t=>Ws(t))}catch(t){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`)}}function Yg(n){return n.map(t=>Bs(t))}function Zg(n,t){const e=[];for(let a=0;a<t.length;a++)t[a]&&e.push(a);const s=He(n,"int32"),r=He([e.length,n.length],"int32");for(let a=0;a<e.length;a++){const o=s.indexToLoc(e[a]);r.values.set(o,a*n.length)}return r.toTensor()}!function S1(){for(const n of I1)ne(n)}();const Jg={kernelName:Ti,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,qo(de(e,"float32"),-1))}}},WN={kernelName:Ra,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=dt(de(e,"float32")),r=dn(xe(Pe(1),s));return Nt(Ce(n,r))}}}},GN={kernelName:Fa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=dn(xe(dt(de(e,"float32")),1));return Ce(n,s)}}}},UN={kernelName:Hr,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Ve(e.shape,s.shape);return{a:()=>{let i=n;const l=Wt(e.shape,r);return l.length>0&&(i=be(i,l)),P(i,e.shape)},b:()=>{let i=n;const l=Wt(s.shape,r);return l.length>0&&(i=be(i,l)),P(i,s.shape)}}}},HN={kernelName:xc,saveAllInputs:!0,gradFunc:(n,t)=>{const e={};return t.forEach((s,r)=>{e[r]=()=>n.clone()}),e}},jN={kernelName:_i,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Je(e)}}},qN={kernelName:$i,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Je(e)}}},KN={kernelName:Oa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ce(n,dn(xe(Pe(1),dt(de(e,"float32")))))}}},XN={kernelName:Pa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=dn(re(Pe(1),dt(de(e,"float32"))));return Ce(n,s)}}}},YN={kernelName:Ma,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Ve(e.shape,s.shape);return{a:()=>{const i=re(dt(e),dt(s));let l=D(n,Ce(s,i));const u=Wt(e.shape,r);return u.length>0&&(l=be(l,u)),P(l,e.shape)},b:()=>{const i=re(dt(e),dt(s));let l=Nt(D(n,Ce(e,i)));const u=Wt(s.shape,r);return u.length>0&&(l=be(l,u)),P(l,s.shape)}}}},ZN={kernelName:La,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ce(n,re(dt(de(e,"float32")),1))}}},JN={kernelName:Va,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ce(n,xe(Pe(1),dt(de(e,"float32"))))}}},ek=O({avgPool3dGrad_:function QN(n,t,e,s,r,a){const o=C(n,"dy","avgPool3dGrad"),i=C(t,"input","avgPool3dGrad");let l=o,u=i,c=!1;4===i.rank&&(c=!0,l=P(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),u=P(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),v(5===l.rank,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`),v(5===u.rank,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`),pn("avgPool3dGrad",r,a);const p=F.runKernel(Ic,{dy:l,input:u},{filterSize:e,strides:s,pad:r,dimRoundingMode:a});return c?P(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),tk={kernelName:Di,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{filterSize:r,strides:a,pad:o,dimRoundingMode:i}=e;return{x:()=>ek(n,s,r,a,o,i)}}},sk=O({avgPoolGrad_:function nk(n,t,e,s,r){const a=C(n,"dy","avgPoolGrad"),o=C(t,"input","avgPoolGrad");v(o.rank===a.rank,()=>`Rank of input (${o.rank}) does not match rank of dy (${a.rank})`);let i=o,l=a,u=!1;3===o.rank&&(u=!0,i=P(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=P(a,[1,a.shape[0],a.shape[1],a.shape[2]])),v(4===l.rank,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),v(4===i.rank,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`);const d=F.runKernel(vc,{dy:l,input:i},{filterSize:e,strides:s,pad:r});return u?P(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),rk={kernelName:Ei,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{filterSize:r,strides:a,pad:o}=e;return{x:()=>sk(n,s,r,a,o)}}},ak={kernelName:Ai,inputsToSave:["a","b"],gradFunc:(n,t,e)=>{const[s,r]=t,{transposeA:a,transposeB:o}=e;return a||o?!a&&o?{a:()=>st(n,r,!1,!1),b:()=>st(n,s,!0,!1)}:a&&!o?{a:()=>st(r,n,!1,!0),b:()=>st(s,n,!1,!1)}:{a:()=>st(r,n,!0,!0),b:()=>st(n,s,!0,!0)}:{a:()=>st(n,r,!1,!0),b:()=>st(s,n,!0,!1)}}},Kd=O({spaceToBatchND_:function ok(n,t,e){const s=C(n,"x","spaceToBatchND");return v(s.rank>=1+t.length,()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`),v(e.length===t.length,()=>`paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`),v(s.shape.reduce((o,i,l)=>l>0&&l<=t.length?o&&(i+e[l-1][0]+e[l-1][1])%t[l-1]==0:o,!0),()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`),F.runKernel(vl,{x:s},{blockShape:t,paddings:e})}}),ik={kernelName:Ri,gradFunc:(n,t,e)=>{const{blockShape:s,crops:r}=e;return{x:()=>Kd(n,s,r)}}},lk={kernelName:"BroadcastTo",gradFunc:(n,t,e)=>{const r=e.inputShape,a=e.shape,o=Array.from(a);for(let l=r.length-1;l>=0;l--)if(r[l]===a[l])o[l]=1;else if(1!==r[l])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);const i=[];for(let l=0;l<o.length;l++)o[l]>1&&i.push(l);return{x:()=>be(n,i,!0)}}},uk={kernelName:za,gradFunc:n=>({x:()=>n.clone()})},ck={kernelName:Ba,gradFunc:n=>({x:()=>Je(n)})},hk={kernelName:Wa,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{clipValueMin:r,clipValueMax:a}=e;return{x:()=>Tn(Es(kr(s,r),aa(s,a)),n,Je(n))}}},dk={kernelName:Fi,inputsToSave:["x"],gradFunc:Jg.gradFunc},pk={kernelName:Oi,saveAllInputs:!0,gradFunc:(n,t,e)=>{const s=t.map(l=>l.shape),{axis:r}=e,a=ve(r,t[0].shape)[0],o=s.map(l=>l[a]);return On(n,o,a).map(l=>()=>l)}},fk={kernelName:Pi,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,{dilations:a,strides:o,pad:i,dataFormat:l}=e;return v(qs(a),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`),{x:()=>Qh(s.shape,n,r,o,i,l),filter:()=>xd(s,n,r.shape,o,i,l)}}},mk={kernelName:Li,inputsToSave:["dy","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,{strides:a,pad:o,dataFormat:i,dimRoundingMode:l}=e;return{dy:()=>Nr(n,r,a,o,i,1,l),filter:()=>xd(n,s,r.shape,a,o,i,l)}}},yk=O({conv3DBackpropFilter_:function gk(n,t,e,s,r){let a=n;4===n.rank&&(a=P(n,[1,n.shape[0],n.shape[1],n.shape[2],n.shape[3]]));let o=t;return 4===o.rank&&(o=P(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),v(5===a.rank,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`),v(5===o.rank,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`),v(5===e.length,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${e}.`),v(a.shape[4]===e[3],()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${e[3]}.`),v(o.shape[4]===e[4],()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${e[4]}).`),F.runKernel(kc,{x:a,dy:o},{strides:s,pad:r,filterShape:e})}}),xk={kernelName:Vi,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const{dilations:s,strides:r,pad:a}=e;v(qs(s),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);const[o,i]=t;return{x:()=>Zm(o.shape,n,i,r,a),filter:()=>yk(o,n,i.shape,r,a)}}},Qg=O({sin_:function bk(n){const e={x:C(n,"x","sin","float32")};return F.runKernel(xo,e)}}),wk={kernelName:Ga,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(Nt(Qg(de(e,"float32"))),n)}}},ey=O({sinh_:function vk(n){const e={x:C(n,"x","sinh")};return F.runKernel(bo,e)}}),Ik={kernelName:Ua,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(ey(de(e,"float32")),n)}}},ty=O({cumsum_:function Sk(n,t=0,e=!1,s=!1){const a={x:C(n,"x","cumsum")};return F.runKernel(Mi,a,{axis:t,exclusive:e,reverse:s})}}),Ck={kernelName:Mi,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r,exclusive:a,reverse:o}=e;return{x:()=>{const i=Ct([r],s.rank);let l=ty(n,r,a,!o);return null!=i&&(l=Ze(l,i)),l}}}},Nk={kernelName:zi,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:o}=e,i=null==s?[1,1]:s;v(qs(i),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`);const[l,u]=t;return v(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),v(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),v(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),v(nn(r,i),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${i}'.`),pn("depthwiseConv2d",a,o),{x:()=>cg(l.shape,n,u,r,a,i,o),filter:()=>ug(l,n,u.shape,r,a,i,o)}}},kk={kernelName:Bi,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,a={x:s,filter:r,dy:n},o={x:s,filter:r,dy:n};return{x:()=>F.runKernel(Fc,a,e),filter:()=>F.runKernel(Oc,o,e)}}},Tk={kernelName:ja,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t,s={dy:n,y:e};return{x:()=>F.runKernel(Pc,s)}}},_k={kernelName:qa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t,s=D(Gn(Nt(dt(e))),2/Math.sqrt(Math.PI));return{x:()=>D(n,s)}}},$k={kernelName:Ka,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,e)}}},Ek={kernelName:Gi,inputsToSave:["input"],gradFunc:(n,t)=>{const[e]=t;return{input:()=>P(n,e.shape)}}},Dk={kernelName:Xa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,Gn(e))}}},Ak={kernelName:Ya,gradFunc:n=>({x:()=>Je(n)})},Rk={kernelName:Za,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Ve(e.shape,s.shape);return{a:()=>{const i=Ce(n,de(s,"float32")),l=Wt(e.shape,r);return l.length>0?P(be(i,l),e.shape):i},b:()=>{let i=D(n,de(e,"float32"));const l=Wt(s.shape,r);l.length>0&&(i=P(be(i,l),s.shape));const u=dt(s);return Nt(Ce(i,de(u,"float32")))}}}},ny=O({rsqrt_:function Fk(n){const e={x:C(n,"x","rsqrt","float32")};return F.runKernel(go,e)}}),Ok={kernelName:Ui,inputsToSave:["x","mean","variance","scale"],gradFunc:(n,t,e)=>{const{varianceEpsilon:s}=e,[r,a,o,i]=t,l=null==i?Pe(1):i,u=Wt(a.shape,r.shape),c=[];if(1===a.rank){for(let w=0;w<r.shape.length-1;++w)c.push(r.shape[w]);c.push(1)}const h=xe(r,a),d=D(n,l),p=ny(re(o,Pe(s))),f=D(D(D(p,p),p),Pe(-.5));return{x:()=>P(D(D(n,1===a.rank?ts(P(p,[1,1,1,a.shape[0]]),c):p),l),r.shape),mean:()=>{let w=D(D(p,Pe(-1)),d);return 1===a.rank&&(w=be(w,u)),P(w,a.shape)},variance:()=>{let w=D(D(f,h),d);return 1===a.rank&&(w=be(w,u)),P(w,a.shape)},scale:()=>{const w=D(h,p);let I=D(n,w);return 1===a.rank&&(I=be(I,u)),P(I,a.shape)},offset:()=>{let w=n;return 1===a.rank&&(w=be(w,u)),P(w,a.shape)}}}},sy=O({unsortedSegmentSum_:function Pk(n,t,e){const s=C(n,"x","unsortedSegmentSum"),r=C(t,"segmentIds","unsortedSegmentSum","int32");return v(Be(e),()=>"numSegments must be of dtype int"),F.runKernel(Nl,{x:s,segmentIds:r},{numSegments:e})}}),Lk={kernelName:Hi,inputsToSave:["x","indices"],gradFunc:(n,t,e)=>{const[s,r]=t,{axis:a}=e,o=ve(a,s.shape)[0];return{x:()=>{const l=s.shape,u=r.size,c=l.slice(0,o),h=c.length,d=l.slice(a,l.length).slice(1),p=d.length,f=ry(0,h),g=ry(h+1,h+1+p),m=ay([c,[u],d]),y=P(n,m),x=P(r,[u]),b=ay([[h],f,g]),w=Ze(y,b);let I=sy(w,x,s.shape[o]);const S=Ks(b);return I=Ze(I,S),I},indices:()=>r}}};function ry(n,t){const e=[];for(let s=n;s<t;++s)e.push(s);return e}function ay(n){const t=[];for(let e=0;e<n.length;++e)for(let s=0;s<n[e].length;++s)t.push(n[e][s]);return t}const Vk={kernelName:Ja,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>Je(e),b:()=>Je(s)}}},Mk={kernelName:Qa,gradFunc:n=>({x:()=>de(n,"float32")})},zk={kernelName:eo,gradFunc:n=>({x:()=>Je(n)})},Bk={kernelName:to,gradFunc:n=>({x:()=>Je(n)})},Wk={kernelName:no,gradFunc:n=>({x:()=>Je(n)})},Gk={kernelName:qi,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{alpha:r}=e,a=Fn(s,0);return{x:()=>Tn(a,n,D(n,r))}}},Uk={kernelName:ro,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ce(n,re(e,1))}}},Hk={kernelName:so,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ce(n,de(e,"float32"))}}},jk={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e;return{logits:()=>{const o=Gn(s);return xe(n,D(be(n,r,!0),o))}}}},Kk=O({localResponseNormalizationBackprop_:function qk(n,t,e,s=5,r=1,a=1,o=.5){return F.runKernel(Wc,{x:n,y:t,dy:e},{depthRadius:s,bias:r,alpha:a,beta:o})}}),Xk={kernelName:Qi,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{depthRadius:a,bias:o,alpha:i,beta:l}=e;return{x:()=>Kk(s,r,n,a,o,i,l)}}};function oy(n,t,e,s){return t.rank<e.rank&&(t=P(t,Lt(t.shape,s))),n.rank<e.rank&&(n=P(n,Lt(n.shape,s))),{x:()=>D(n,de(ms(e,t),n.dtype))}}const iy={kernelName:el,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const s=e,{reductionIndices:r}=s,a=t[0],l=oy(n,t[1],a,ve(r,a.shape));return{x:()=>l.x()}}},ly=O({less_:function Yk(n,t){let e=C(n,"a","less","string_or_numeric"),s=C(t,"b","less","string_or_numeric");return[e,s]=At(e,s),Ve(e.shape,s.shape),F.runKernel(Ki,{a:e,b:s})}}),Zk={kernelName:ao,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>D(n,de(kr(e,s),"float32")),b:()=>D(n,de(ly(e,s),"float32"))}}},Qk=O({maxPool3dGrad_:function Jk(n,t,e,s,r,a,o){const i=C(n,"dy","maxPool3dGrad"),l=C(t,"input","maxPool3dGrad"),u=C(e,"output","maxPool3dGrad");let c=i,h=l,d=u,p=!1;4===l.rank&&(p=!0,c=P(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),h=P(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=P(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),v(5===c.rank,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`),v(5===h.rank,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`),v(5===d.rank,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`),pn("maxPool3dGrad",a,o);const m=F.runKernel(Uc,{dy:c,input:h,output:d},{filterSize:s,strides:r,pad:a,dimRoundingMode:o});return p?P(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),eT={kernelName:nl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=e;return{x:()=>Qk(n,s,r,a,o,i,l)}}},nT=O({maxPoolGrad_:function tT(n,t,e,s,r,a,o){const i=C(n,"dy","maxPoolGrad"),l=C(t,"input","maxPoolGrad"),u=C(e,"output","maxPoolGrad");return v(l.rank===i.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${i.rank})`),v(4===i.rank,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`),v(4===l.rank,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),pn("maxPoolGrad",a,o),F.runKernel(Gc,{dy:i,input:l,output:u},{filterSize:s,strides:r,pad:a,dimRoundingMode:o})}}),sT={kernelName:tl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{filterSize:a,strides:o,pad:i}=e;return{x:()=>nT(n,s,r,a,o,i)}}},rT={kernelName:sl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e,a=ve(r,s.shape),l=E(Zt(s.shape,a)[1]);return{x:()=>{const c=s.shape.slice();a.forEach(p=>{c[p]=1});const h=P(n,c);return Ce(D(h,Xs(s.shape,"float32")),l)}}}},aT={kernelName:rl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const s=e,{axis:r}=s,[a,o]=t,l=oy(n,o,a,ve(r,a.shape));return{x:()=>l.x()}}},oT={kernelName:oo,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>D(n,de(aa(e,s),"float32")),b:()=>D(n,de(Fn(e,s),"float32"))}}},iT={kernelName:al,inputsToSave:["x"],gradFunc:(n,t,e)=>{const s=t[0],{paddings:r}=e,a=r.map(o=>o[0]);return{x:()=>lt(n,a,s.shape)}}},lT={kernelName:lo,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Ve(e.shape,s.shape);return{a:()=>{const i=Wt(e.shape,r);return i.length>0?P(be(n,i),e.shape):n},b:()=>{const i=D(n,Nt(ql(Ce(e,s)))),l=Wt(s.shape,r);return l.length>0?P(be(i,l),s.shape):i}}}},uT={kernelName:uo,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Ve(e.shape,s.shape);return{a:()=>{const i=D(n,de(s,"float32")),l=Wt(e.shape,r);return l.length>0?P(be(i,l),e.shape):i},b:()=>{const i=D(n,de(e,"float32")),l=Wt(s.shape,r);return l.length>0?P(be(i,l),s.shape):i}}}},cT={kernelName:ol,gradFunc:n=>({x:()=>Nt(n)})},hT={kernelName:ul,inputsToSave:["indices"],gradFunc:(n,t)=>{const e=t[0];return{indices:()=>Jt(e.shape,"float32")}}},dT={kernelName:ll,gradFunc:n=>({x:()=>Je(n)})},pT={kernelName:cl,saveAllInputs:!0,gradFunc:(n,t,e)=>{const{axis:s}=e;return _r(n,s).map(a=>()=>a)}},uy={kernelName:hl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const s=t[0],{paddings:r}=e,a=r.map(o=>o[0]);return{x:()=>lt(n,a,s.shape)}}},fT={kernelName:co,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(n,t)=>{const[e,s,r]=t,a=e,o=s,i=Ve(a.shape,o.shape);return{a:()=>{const c=de(o,"float32");let h=D(n,D(c,ea(a,xe(c,Pe(1)))));const d=Wt(a.shape,i);return d.length>0&&(h=be(h,d)),P(h,a.shape)},b:()=>{const c=Fn(a,0),h=Tn(c,Un(a),Je(a));let d=D(n,D(r,h));const p=Wt(o.shape,i);return p.length>0&&(d=be(d,p)),P(d,o.shape)}}}},mT={kernelName:dl,inputsToSave:["x","alpha"],gradFunc:(n,t)=>{const[e,s]=t,r=Fn(e,0);return{x:()=>Tn(r,n,D(n,s)),alpha:()=>{let a=Tn(r,Je(n),D(n,e));const o=Wt(s.shape,n.shape);return o.length>0&&(a=be(a,o)),P(a,s.shape)}}}},Xd=O({cumprod_:function gT(n,t=0,e=!1,s=!1){const a={x:C(n,"x","cumprod")};return F.runKernel(_c,a,{axis:t,exclusive:e,reverse:s})}});const bT={kernelName:pl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e;let a=[];return a=null==r?s.shape.map((o,i)=>i):"number"==typeof r?[r]:r,{x:()=>function xT(n,t,e){const s=n.shape.length,r=s-e.length,a=Ct(e,s);let o=n;null!=a&&(o=Ze(n,a));const i=o.shape.slice(),u=i.splice(s-e.length,e.length).reduce((d,p)=>d*p,1);i.push(u);let h=function yT(n,t,e){const s=n.shape.slice();s[e]=1;const r=P(t,s),a=Xd(n,e,!0,!1),o=Xd(n,e,!0,!0),i=D(a,o);return D(r,i)}(o.reshape(i),t,r);if(h=h.reshape(o.shape),null!=a){const d=Ks(a);h=Ze(h,d)}return h}(s,n,a)}}},wT={kernelName:Ha,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Ve(e.shape,s.shape);return{a:()=>{const i=Ce(n,de(s,"float32")),l=Wt(e.shape,r);return l.length>0?P(be(i,l),e.shape):i},b:()=>{let i=D(n,de(e,"float32"));const l=Wt(s.shape,r);l.length>0&&(i=P(be(i,l),s.shape));const u=dt(s);return Nt(Ce(i,de(u,"float32")))}}}},vT={kernelName:ho,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ce(n,Nt(dt(e)))}}},IT={kernelName:fo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t,s=D(aa(e,6),qo(e));return{x:()=>D(n,de(s,"float32"))}}},ST={kernelName:po,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,de(qo(e),"float32"))}}},CT={kernelName:fl,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>P(n,e.shape)}}},NT={kernelName:gl,inputsToSave:["images"],gradFunc:(n,t,e)=>{const[s]=t,r={dy:n,images:s};return{images:()=>F.runKernel(Zc,r,e)}}},kT={kernelName:ml,inputsToSave:["images"],gradFunc:(n,t,e)=>{const[s]=t,r={dy:n,images:s};return{images:()=>F.runKernel(Yc,r,e)}}},TT={kernelName:yl,gradFunc:(n,t,e)=>{const{dims:s}=e,r=ve(s,n.shape);return{x:()=>Tr(n,r)}}},_T={kernelName:mo,gradFunc:n=>({x:()=>Je(n)})},$T={kernelName:go,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Nt(Ce(n,D(ea(e,1.5),2)))}}},Yd=O({logicalNot_:function ET(n){const e={x:C(n,"x","logicalNot","bool")};return F.runKernel(Zi,e)}}),DT={kernelName:xl,inputsToSave:["condition"],gradFunc:(n,t)=>{const[e]=t;return{condition:()=>de(Je(e),"float32"),t:()=>D(n,de(e,n.dtype)),e:()=>D(n,de(Yd(e),n.dtype))}}},AT={kernelName:yo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=Fn(e,Pe(0)),r=Pe(iu),a=Pe(lu),o=D(n,a),i=D(D(n,r),Gn(de(e,"float32")));return Tn(s,o,i)}}}},RT={kernelName:vo,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,D(e,xe(Pe(1),e)))}}},FT={kernelName:wo,gradFunc:n=>({x:()=>Je(n)})},Zd=O({cos_:function OT(n){const e={x:C(n,"x","cos","float32")};return F.runKernel(Ga,e)}}),PT={kernelName:xo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(Zd(de(e,"float32")),n)}}},cy=O({cosh_:function LT(n){const e={x:C(n,"x","cosh","float32")};return F.runKernel(Ua,e)}}),VT={kernelName:bo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(cy(de(e,"float32")),n)}}},MT={kernelName:bl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{begin:r,size:a}=e,o=s.shape,[i,l]=Gl(s,r,a),u=[];for(let c=0;c<n.rank;c++)u.push([i[c],o[c]-i[c]-l[c]]);return{x:()=>od(n,u)}}},zT={kernelName:Sl,outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s]=t,{dim:r}=e,o=D(n,s);return{logits:()=>xe(o,D(be(o,[r],!0),s))}}},BT={kernelName:Io,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,sa(e))}}},Jd=O({batchToSpaceND_:function WT(n,t,e){const s=C(n,"x","batchToSpaceND"),r=t.reduce((i,l)=>i*l);return v(s.rank>=1+t.length,()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`),v(e.length===t.length,()=>`crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`),v(s.shape[0]%r==0,()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`),F.runKernel(Ri,{x:s},{blockShape:t,crops:e})}}),hy={kernelName:vl,gradFunc:(n,t,e)=>{const{blockShape:s,paddings:r}=e;return{x:()=>Jd(n,s,r)}}},dy={kernelName:Il,gradFunc:(n,t,e)=>{const{axis:s}=e;return{x:()=>un(n,s)}}},s_=[Jg,WN,GN,UN,HN,jN,qN,KN,XN,YN,ZN,JN,tk,rk,ak,ik,lk,uk,ck,hk,dk,pk,mk,fk,xk,wk,Ik,Ck,Nk,kk,wT,Tk,_k,$k,Ek,Dk,Rk,Ak,Ok,Lk,Vk,Mk,zk,Bk,Wk,Gk,Uk,Hk,jk,Xk,iy,iy,Zk,eT,sT,rT,aT,oT,iT,lT,uT,cT,hT,dT,pT,uy,uy,fT,mT,bT,vT,IT,ST,CT,NT,kT,TT,_T,$T,DT,AT,RT,FT,PT,VT,MT,zT,BT,hy,hy,dy,dy,{kernelName:So,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ce(n,D(dn(de(e,"float32")),2))}}},{kernelName:Co,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Pe(2);return{a:()=>D(n,D(r,xe(e,s))),b:()=>D(n,D(r,xe(s,e)))}}},{kernelName:nh,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,D(de(e,"float32"),2))}}},{kernelName:$o,gradFunc:n=>({x:()=>Je(n)})},{kernelName:No,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Ve(e.shape,s.shape);return{a:()=>{let i=n;const l=Wt(e.shape,r);return l.length>0&&(i=be(i,l)),P(i,e.shape)},b:()=>{let i=n;const l=Wt(s.shape,r);return l.length>0&&(i=be(i,l)),P(Nt(i),s.shape)}}}},{kernelName:wl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,r=s.shape.slice(),{axis:a}=e;ve(a,s.shape).forEach(u=>{r[u]=1});const i=P(n,r),l=D(i,Xs(s.shape,"float32"));return{x:()=>l}}},{kernelName:ko,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ce(n,dt(Zd(e)))}}},{kernelName:To,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(xe(Pe(1),dt(e)),n)}}},{kernelName:_o,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{reps:r}=e;return{x:()=>{let o=Je(s);if(1===s.rank)for(let i=0;i<r[0];++i)o=re(o,lt(n,[i*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)o=re(o,lt(n,[i*s.shape[0],l*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)for(let u=0;u<r[2];++u)o=re(o,lt(n,[i*s.shape[0],l*s.shape[1],u*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)for(let u=0;u<r[2];++u)for(let c=0;c<r[3];++c)o=re(o,lt(n,[i*s.shape[0],l*s.shape[1],u*s.shape[2],c*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return o}}}},{kernelName:jr,gradFunc:(n,t,e)=>{const s=e,{perm:r}=s,a=Ks(r);return{x:()=>Ze(n,a)}}},{kernelName:Cl,gradFunc:(n,t,e)=>{const s=e,{axis:r}=s;return{value:()=>As(n,r)}}},{kernelName:Nl,inputsToSave:["segmentIds"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>function t_(n,t){const e=Hs(t,Je(t)),s=ed(n,e);let r=kr(t,Pe(0,"int32"));const a=s.rank-r.rank;for(let i=0;i<a;++i)r=Nn(r,i+1);r=Es(r,Xs(s.shape,"bool"));const o=Je(s);return Tn(r,s,o)}(n,e)}}},{kernelName:kl,gradFunc:n=>({x:()=>Je(n)})}];for(const n of s_)uv(n);K().prototype.abs=function(){return this.throwIfDisposed(),Xt(this)};const a_=O({acos_:function r_(n){const e={x:C(n,"x","acos")};return F.runKernel(Ra,e)}});K().prototype.acos=function(){return this.throwIfDisposed(),a_(this)};const i_=O({acosh_:function o_(n){const e={x:C(n,"x","acosh")};return F.runKernel(Fa,e)}});K().prototype.acosh=function(){return this.throwIfDisposed(),i_(this)},K().prototype.add=function(n){return this.throwIfDisposed(),re(this,n)},K().prototype.all=function(n,t){return this.throwIfDisposed(),Km(this,n,t)},K().prototype.any=function(n,t){return this.throwIfDisposed(),Xh(this,n,t)},K().prototype.argMax=function(n){return this.throwIfDisposed(),Vo(this,n)};const u_=O({argMin_:function l_(n,t=0){const s={x:C(n,"x","argMin")};return F.runKernel($i,s,{axis:t})}});K().prototype.argMin=function(n){return this.throwIfDisposed(),u_(this,n)},K().prototype.asScalar=function(){return this.throwIfDisposed(),v(1===this.size,()=>"The array must have only 1 element."),P(this,[])},K().prototype.asType=function(n){return this.throwIfDisposed(),de(this,n)},K().prototype.as1D=function(){return this.throwIfDisposed(),P(this,[this.size])},K().prototype.as2D=function(n,t){return this.throwIfDisposed(),P(this,[n,t])},K().prototype.as3D=function(n,t,e){return this.throwIfDisposed(),P(this,[n,t,e])},K().prototype.as4D=function(n,t,e,s){return this.throwIfDisposed(),P(this,[n,t,e,s])},K().prototype.as5D=function(n,t,e,s,r){return this.throwIfDisposed(),P(this,[n,t,e,s,r])};const h_=O({asin_:function c_(n){const e={x:C(n,"x","asin")};return F.runKernel(Oa,e)}});K().prototype.asin=function(){return this.throwIfDisposed(),h_(this)};const p_=O({asinh_:function d_(n){const e={x:C(n,"x","asinh")};return F.runKernel(Pa,e)}});K().prototype.asinh=function(){return this.throwIfDisposed(),p_(this)};const m_=O({atan_:function f_(n){const e={x:C(n,"x","atan")};return F.runKernel(La,e)}});K().prototype.atan=function(){return this.throwIfDisposed(),m_(this)};const y_=O({atan2_:function g_(n,t){let e=C(n,"a","atan2"),s=C(t,"b","atan2");return[e,s]=At(e,s),F.runKernel(Ma,{a:e,b:s})}});K().prototype.atan2=function(n){return this.throwIfDisposed(),y_(this,n)};const b_=O({atanh_:function x_(n){const e={x:C(n,"x","atanh")};return F.runKernel(Va,e)}});K().prototype.atanh=function(){return this.throwIfDisposed(),b_(this)},K().prototype.avgPool=function(n,t,e,s){return this.throwIfDisposed(),Jh(this,n,t,e,s)},K().prototype.batchToSpaceND=function(n,t){return this.throwIfDisposed(),Jd(this,n,t)},K().prototype.batchNorm=function(n,t,e,s,r){return this.throwIfDisposed(),Ul(this,n,t,e,s,r)},K().prototype.broadcastTo=function(n){return this.throwIfDisposed(),Wo(this,n)},K().prototype.cast=function(n){return this.throwIfDisposed(),de(this,n)};const v_=O({ceil_:function w_(n){const e={x:C(n,"x","ceil","float32")};return F.runKernel(Ba,e)}});K().prototype.ceil=function(){return this.throwIfDisposed(),v_(this)},K().prototype.clipByValue=function(n,t){return this.throwIfDisposed(),Rn(this,n,t)},K().prototype.concat=function(n,t){return this.throwIfDisposed(),n instanceof Ot&&(n=[n]),un([this,...n],t)},K().prototype.conv1d=function(n,t,e,s,r,a){return this.throwIfDisposed(),Xm(this,n,t,e,s,r,a)},K().prototype.conv2dTranspose=function(n,t,e,s,r){return this.throwIfDisposed(),Ym(this,n,t,e,s,r)},K().prototype.conv2d=function(n,t,e,s,r,a){return this.throwIfDisposed(),Nr(this,n,t,e,s,r,a)},K().prototype.cos=function(){return this.throwIfDisposed(),Zd(this)},K().prototype.cosh=function(){return this.throwIfDisposed(),cy(this)},K().prototype.cumprod=function(n,t,e){return this.throwIfDisposed(),Xd(this,n,t,e)},K().prototype.cumsum=function(n,t,e){return this.throwIfDisposed(),ty(this,n,t,e)};const S_=O({depthToSpace_:function I_(n,t,e="NHWC"){const s=C(n,"x","depthToSpace","float32"),r="NHWC"===e?s.shape[1]:s.shape[2],a="NHWC"===e?s.shape[2]:s.shape[3],o="NHWC"===e?s.shape[3]:s.shape[1];return v(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),v(r*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`),v(a*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${s.shape}`),v(o%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${s.shape}`),F.runKernel(Dc,{x:s},{blockSize:t,dataFormat:e})}});K().prototype.depthToSpace=function(n,t){return this.throwIfDisposed(),S_(this,n,t)},K().prototype.depthwiseConv2d=function(n,t,e,s,r,a){return this.throwIfDisposed(),Hl(this,n,t,e,s,r,a)};const N_=O({dilation2d_:function C_(n,t,e,s,r=[1,1],a="NHWC"){const o=C(n,"x","dilation2d"),i=C(t,"filter","dilation2d");v(3===o.rank||4===o.rank,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`),v(3===i.rank,()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`),v("NHWC"===a,()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`);let l=o,u=!1;3===o.rank&&(l=P(o,[1,o.shape[0],o.shape[1],o.shape[2]]),u=!0),v(l.shape[3]===i.shape[2],()=>`Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${i.shape[2]}`);const d=F.runKernel(Bi,{x:l,filter:i},{strides:e,pad:s,dilations:r});return u?P(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});K().prototype.dilation2d=function(n,t,e,s,r){return this.throwIfDisposed(),N_(this,n,t,e,s,r)};const T_=O({divNoNan_:function k_(n,t){let e=C(n,"a","div"),s=C(t,"b","div");[e,s]=At(e,s);const r=Ce(e,s),a=Je(r),o=ms(s,a);return Tn(o,a,r)}});K().prototype.divNoNan=function(n){return this.throwIfDisposed(),T_(this,n)},K().prototype.div=function(n){return this.throwIfDisposed(),Ce(this,n)};const $_=O({dot_:function __(n,t){const e=C(n,"t1","dot"),s=C(t,"t2","dot");v(!(1!==e.rank&&2!==e.rank||1!==s.rank&&2!==s.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${s.rank}.`);const r=1===e.rank?e.size:e.shape[1],a=1===s.rank?s.size:s.shape[0];if(v(r===a,()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`),1===e.rank&&1===s.rank){const o=P(e,[1,-1]),i=P(s,[-1,1]),l=st(o,i);return P(l,[])}if(1===e.rank&&2===s.rank){const o=P(e,[1,-1]),i=P(s,[s.shape[0],s.shape[1]]),l=st(o,i);return P(l,[l.size])}if(2===e.rank&&1===s.rank){const o=P(s,[-1,1]),i=st(e,o);return P(i,[i.size])}{const o=P(s,[s.shape[0],s.shape[1]]);return st(e,o)}}});K().prototype.dot=function(n){return this.throwIfDisposed(),$_(this,n)},K().prototype.elu=function(){return this.throwIfDisposed(),jl(this)},K().prototype.equal=function(n){return this.throwIfDisposed(),ms(this,n)};const D_=O({erf_:function E_(n){let t=C(n,"x","erf");return v("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=de(t,"float32")),F.runKernel(qa,{x:t})}});K().prototype.erf=function(){return this.throwIfDisposed(),D_(this)};const R_=O({euclideanNorm_:function A_(n,t=null,e=!1){return au(n,"euclidean",t,e)}});K().prototype.euclideanNorm=function(n,t){return this.throwIfDisposed(),R_(this,n,t)},K().prototype.exp=function(){return this.throwIfDisposed(),Gn(this)},K().prototype.expandDims=function(n){return this.throwIfDisposed(),Nn(this,n)};const O_=O({expm1_:function F_(n){const e={x:C(n,"x","expm1")};return F.runKernel(Xa,e)}});K().prototype.expm1=function(){return this.throwIfDisposed(),O_(this)},K().prototype.fft=function(){return this.throwIfDisposed(),gd(this)},K().prototype.flatten=function(){return this.throwIfDisposed(),P(this,[this.size])},K().prototype.floor=function(){return this.throwIfDisposed(),ql(this)},K().prototype.floorDiv=function(n){return this.throwIfDisposed(),Sm(this,n)},K().prototype.gather=function(n,t){return this.throwIfDisposed(),ed(this,n,t)},K().prototype.greaterEqual=function(n){return this.throwIfDisposed(),kr(this,n)},K().prototype.greater=function(n){return this.throwIfDisposed(),Fn(this,n)},K().prototype.ifft=function(){return this.throwIfDisposed(),Ql(this)},K().prototype.irfft=function(){return this.throwIfDisposed(),ig(this)};const L_=O({isFinite_:function P_(n){const e={x:C(n,"x","isFinite")};return F.runKernel(eo,e)}});K().prototype.isFinite=function(){return this.throwIfDisposed(),L_(this)};const M_=O({isInf_:function V_(n){const e={x:C(n,"x","isInf")};return F.runKernel(to,e)}});K().prototype.isInf=function(){return this.throwIfDisposed(),M_(this)};const B_=O({isNaN_:function z_(n){const e={x:C(n,"x","isNaN")};return F.runKernel(no,e)}});K().prototype.isNaN=function(){return this.throwIfDisposed(),B_(this)},K().prototype.leakyRelu=function(n){return this.throwIfDisposed(),td(this,n)},K().prototype.lessEqual=function(n){return this.throwIfDisposed(),aa(this,n)},K().prototype.less=function(n){return this.throwIfDisposed(),ly(this,n)};const G_=O({localResponseNormalization_:function W_(n,t=5,e=1,s=1,r=.5){const a=C(n,"x","localResponseNormalization");v(4===a.rank||3===a.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`),v(Be(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let o=a,i=!1;3===a.rank&&(i=!0,o=P(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const c=F.runKernel(Qi,{x:o},{depthRadius:t,bias:e,alpha:s,beta:r});return i?P(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});K().prototype.localResponseNormalization=function(n,t,e,s){return this.throwIfDisposed(),G_(this,n,t,e,s)};const H_=O({logSigmoid_:function U_(n){const t=C(n,"x","logSigmoid");return Ts(s=>({value:Nt(Ho(Nt(s))),gradFunc:o=>D(o,sa(Nt(s)))}))(t)}});K().prototype.logSigmoid=function(){return this.throwIfDisposed(),H_(this)},K().prototype.logSoftmax=function(n){return this.throwIfDisposed(),eg(this,n)},K().prototype.logSumExp=function(n,t){return this.throwIfDisposed(),Ig(this,n,t)},K().prototype.log=function(){return this.throwIfDisposed(),Un(this)},K().prototype.log1p=function(){return this.throwIfDisposed(),nd(this)},K().prototype.logicalAnd=function(n){return this.throwIfDisposed(),Es(this,n)},K().prototype.logicalNot=function(){return this.throwIfDisposed(),Yd(this)};const py=O({logicalOr_:function j_(n,t){const e=C(n,"a","logicalOr","bool"),s=C(t,"b","logicalOr","bool");return Ve(e.shape,s.shape),F.runKernel(Ji,{a:e,b:s})}});K().prototype.logicalOr=function(n){return this.throwIfDisposed(),py(this,n)};const K_=O({logicalXor_:function q_(n,t){const e=C(n,"a","logicalXor","bool"),s=C(t,"b","logicalXor","bool");return Ve(e.shape,s.shape),Es(py(n,t),Yd(Es(n,t)))}});K().prototype.logicalXor=function(n){return this.throwIfDisposed(),K_(this,n)},K().prototype.matMul=function(n,t,e){return this.throwIfDisposed(),st(this,n,t,e)},K().prototype.maxPool=function(n,t,e,s){return this.throwIfDisposed(),sd(this,n,t,e,s)},K().prototype.max=function(n,t){return this.throwIfDisposed(),ns(this,n,t)},K().prototype.maximum=function(n){return this.throwIfDisposed(),Hs(this,n)},K().prototype.mean=function(n,t){return this.throwIfDisposed(),Pt(this,n,t)},K().prototype.min=function(n,t){return this.throwIfDisposed(),Kl(this,n,t)},K().prototype.minimum=function(n){return this.throwIfDisposed(),Xl(this,n)};const Y_=O({mirrorPad_:function X_(n,t,e){v("reflect"===e||"symmetric"===e,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`);const s=C(n,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");v(t.length===s.rank,()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`);const r="reflect"===e?1:0;for(let i=0;i<s.rank;i++)v(2===t[i].length,()=>"Invalid number of paddings. Must be length of 2 each."),v(t[i][0]>=0&&t[i][0]<=s.shape[i]-r&&t[i][1]>=0&&t[i][1]<=s.shape[i]-r,()=>`Padding in dimension ${i} cannot be greater than or equal to ${s.shape[i]-r} or less than 0 for input of shape ${s.shape}`);return F.runKernel(al,{x:s},{paddings:t,mode:e})}});K().prototype.mirrorPad=function(n,t){return this.throwIfDisposed(),Y_(this,n,t)};const J_=O({mod_:function Z_(n,t){let e=C(n,"a","mod"),s=C(t,"b","mod");return[e,s]=At(e,s),F.runKernel(lo,{a:e,b:s})}});K().prototype.mod=function(n){return this.throwIfDisposed(),J_(this,n)},K().prototype.mul=function(n){return this.throwIfDisposed(),D(this,n)},K().prototype.neg=function(){return this.throwIfDisposed(),Nt(this)},K().prototype.norm=function(n,t,e){return this.throwIfDisposed(),au(this,n,t,e)},K().prototype.notEqual=function(n){return this.throwIfDisposed(),Go(this,n)},K().prototype.oneHot=function(n,t=1,e=0){return this.throwIfDisposed(),ng(this,n,t,e)},K().prototype.onesLike=function(){return this.throwIfDisposed(),Hn(this)},K().prototype.pad=function(n,t){return this.throwIfDisposed(),od(this,n,t)};const n$=O({pool_:function Q_(n,t,e,s,r,a,o){null==r&&(r=[1,1]),null==a&&(a=1),0===s&&(s="valid");const i=C(n,"x","maxPool");let l=i,u=!1;3===i.rank&&(u=!0,l=P(i,[1,i.shape[0],i.shape[1],i.shape[2]])),v(nn(a,r),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`);const c=Wn(l.shape,t,a,r,s),h=[c.dilationHeight,c.dilationWidth];let d;d="same"===s?function t$(n,t){const s=n.map((o,i)=>o+(o-1)*(t[i]-1)).map(o=>o-1),r=s.map(o=>Math.floor(o/2)),a=s.map((o,i)=>o-r[i]);return s.map((o,i)=>[r[i],a[i]])}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const p=1===h[0]&&1===h[1],[f,g]=function e$(n,t,e){const s=e.map(c=>c[0]),r=e.map(c=>c[1]),a=n.concat(s,r),o=t.map((c,h)=>(c-a[h]%c)%c),i=r.map((c,h)=>c+o[h]),l=t.map((c,h)=>[s[h],i[h]]),u=t.map((c,h)=>[0,o[h]]);return[l,u]}([c.inHeight,c.inWidth],h,d),m=p?s:"valid",y=p?l:Kd(l,h,f),b=("avg"===e?()=>Jh(y,t,a,m,o):()=>sd(y,t,a,m,o))(),w=p?b:Jd(b,h,g);return u?P(w,[w.shape[1],w.shape[2],w.shape[3]]):w}});K().prototype.pool=function(n,t,e,s,r,a){return this.throwIfDisposed(),n$(this,n,t,e,s,r,a)},K().prototype.pow=function(n){return this.throwIfDisposed(),ea(this,n)},K().prototype.prelu=function(n){return this.throwIfDisposed(),id(this,n)};const r$=O({prod_:function s$(n,t=null,e=!1){let s=C(n,"x","prod");return"bool"===s.dtype&&(s=de(s,"int32")),F.runKernel(pl,{x:s},{axis:t,keepDims:e})}});K().prototype.prod=function(n,t){return this.throwIfDisposed(),r$(this,n,t)};const o$=O({reciprocal_:function a$(n){const e={x:C(n,"x","reciprocal")};return F.runKernel(ho,e)}});K().prototype.reciprocal=function(){return this.throwIfDisposed(),o$(this)},K().prototype.relu=function(){return this.throwIfDisposed(),Ds(this)},K().prototype.relu6=function(){return this.throwIfDisposed(),lg(this)},K().prototype.reshapeAs=function(n){return this.throwIfDisposed(),P(this,n.shape)},K().prototype.reshape=function(n){return this.throwIfDisposed(),P(this,n)},K().prototype.resizeBilinear=function(n,t,e){return this.throwIfDisposed(),gg(this,n,t,e)},K().prototype.resizeNearestNeighbor=function(n,t,e){return this.throwIfDisposed(),yg(this,n,t,e)},K().prototype.reverse=function(n){return this.throwIfDisposed(),Tr(this,n)},K().prototype.rfft=function(){return this.throwIfDisposed(),yd(this)},K().prototype.round=function(){return this.throwIfDisposed(),xg(this)},K().prototype.rsqrt=function(){return this.throwIfDisposed(),ny(this)},K().prototype.selu=function(){return this.throwIfDisposed(),sg(this)},K().prototype.separableConv2d=function(n,t,e,s,r,a){return this.throwIfDisposed(),rg(this,n,t,e,s,r,a)},K().prototype.sigmoid=function(){return this.throwIfDisposed(),sa(this)};const l$=O({sign_:function i$(n){const e={x:C(n,"x","sign")};return F.runKernel(wo,e)}});K().prototype.sign=function(){return this.throwIfDisposed(),l$(this)},K().prototype.sin=function(){return this.throwIfDisposed(),Qg(this)},K().prototype.sinh=function(){return this.throwIfDisposed(),ey(this)},K().prototype.slice=function(n,t){return this.throwIfDisposed(),lt(this,n,t)},K().prototype.softmax=function(n){return this.throwIfDisposed(),pd(this,n)},K().prototype.softplus=function(){return this.throwIfDisposed(),Ho(this)},K().prototype.spaceToBatchND=function(n,t){return this.throwIfDisposed(),Kd(this,n,t)},K().prototype.split=function(n,t){return this.throwIfDisposed(),On(this,n,t)},K().prototype.sqrt=function(){return this.throwIfDisposed(),dn(this)},K().prototype.square=function(){return this.throwIfDisposed(),dt(this)},K().prototype.squaredDifference=function(n){return this.throwIfDisposed(),vg(this,n)},K().prototype.squeeze=function(n){return this.throwIfDisposed(),jo(this,n)},K().prototype.stack=function(n,t){this.throwIfDisposed();const e=n instanceof Ot?[this,n]:[this,...n];return As(e,t)},K().prototype.step=function(n){return this.throwIfDisposed(),qo(this,n)};const c$=O({stridedSlice_:function u$(n,t,e,s,r=0,a=0,o=0,i=0,l=0){const c={x:C(n,"x","stridedSlice","string_or_numeric")};return F.runKernel(sh,c,{begin:t,end:e,strides:s,beginMask:r,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l})}});K().prototype.stridedSlice=function(n,t,e,s,r,a,o,i){return this.throwIfDisposed(),c$(this,n,t,e,s,r,a,o,i)},K().prototype.sub=function(n){return this.throwIfDisposed(),xe(this,n)},K().prototype.sum=function(n,t){return this.throwIfDisposed(),be(this,n,t)};const d$=O({tan_:function h$(n){const e={x:C(n,"x","tan","float32")};return F.runKernel(ko,e)}});K().prototype.tan=function(){return this.throwIfDisposed(),d$(this)},K().prototype.tanh=function(){return this.throwIfDisposed(),fd(this)},K().prototype.tile=function(n){return this.throwIfDisposed(),ts(this,n)},K().prototype.toBool=function(){return this.throwIfDisposed(),de(this,"bool")},K().prototype.toFloat=function(){return this.throwIfDisposed(),de(this,"float32")},K().prototype.toInt=function(){return this.throwIfDisposed(),de(this,"int32")};const f$=O({topk_:function p$(n,t=1,e=!0){const s=C(n,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const a={x:s},o={k:t,sorted:e},[i,l]=F.runKernel(ih,a,o);return{values:i,indices:l}}});K().prototype.topk=function(n,t){return this.throwIfDisposed(),f$(this,n,t)},K().prototype.transpose=function(n){return this.throwIfDisposed(),Ze(this,n)};const g$=O({unique_:function m$(n,t=0){const e=C(n,"x","unique","string_or_numeric");v(e.rank>0,()=>"The input tensor must be at least 1D");const s={x:e},r={axis:t},[a,o]=F.runKernel(uh,s,r);return{values:a,indices:o}}});K().prototype.unique=function(n){return this.throwIfDisposed(),g$(this,n)},K().prototype.unsortedSegmentSum=function(n,t){return this.throwIfDisposed(),sy(this,n,t)},K().prototype.unstack=function(n){return this.throwIfDisposed(),_r(this,n)},K().prototype.where=function(n,t){return this.throwIfDisposed(),Tn(n,this,t)},K().prototype.zerosLike=function(){return this.throwIfDisposed(),Je(this)};class ys extends Error{constructor(t){super(t),Object.setPrototypeOf(this,ys.prototype)}}class qn extends Error{constructor(t){super(t),Object.setPrototypeOf(this,qn.prototype)}}class R extends Error{constructor(t){super(t),Object.setPrototypeOf(this,R.prototype)}}class Me extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Me.prototype)}}class Qd extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Qd.prototype)}}Error;class my{constructor(t){this.maxEntries=t||100,this.cache=new Map}get(t){let e;return this.cache.has(t)&&(e=this.cache.get(t),this.cache.delete(t),this.cache.set(t,e)),e}put(t,e){if(this.cache.has(t))this.cache.delete(t);else if(this.cache.size>=this.maxEntries){const s=this.cache.keys().next().value;this.cache.delete(s)}this.cache.set(t,e)}getMaxEntries(){return this.maxEntries}setMaxEntries(t){if(t<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${t}.`);if(this.maxEntries>t)for(let e=0;e<this.maxEntries-t;e++){const s=this.cache.keys().next().value;this.cache.delete(s)}this.maxEntries=t}}function Er(n,t){if(Array.isArray(n)){let e=[];for(let s=0;s<t;s++)e=e.concat(n);return e}{const e=new Array(t);return e.fill(n),e}}function Pn(n,t){if(!n)throw new Qd(t)}function gy(n,t){let e=0;for(const s of n)s===t&&e++;return e}function vn(n){return 1===n.length?n[0]:n}function pt(n){return Array.isArray(n)?n:[n]}function Os(n){const e=n.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function Dr(n){return n.length<=1||-1===n.indexOf("_")?n:n.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}let Kn={};function ep(n){if(null==n)return null;const t={};return t.className=n.getClassName(),t.config=n.getConfig(),t}function tp(n){if(null!=n&&"object"==typeof n)if(Array.isArray(n))n.forEach(t=>tp(t));else{const t=Object.keys(n);for(const e of t){const s=n[e];null!=s&&"object"==typeof s&&(Array.isArray(s)||"ndarray"!==s.type||"number"!=typeof s.value?tp(s):n[e]=s.value)}}}function Jo(n,t={},e={},s="object",r=!1){if("string"==typeof n){const a=n;let o;if(a in e)o=e[a];else if(a in Kn)o=Kn[a];else if(o=t[a],null==o)throw new R(`Unknown ${s}: ${n}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return o}{const a=n;if(null==a.className||null==a.config)throw new R(`${s}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const o=a.className;let i,l;if(o in e?[i,l]=e[o]:o in Kn?[i,l]=Kn.className:o in t&&([i,l]=t[o]),null==i)throw new R(`Unknown ${s}: ${o}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const u={};for(const p of Object.keys(Kn))u[p]=Kn[p];for(const p of Object.keys(e))u[p]=e[p];a.config.customObjects=u;const h=Object.assign({},Kn);for(const p of Object.keys(e))Kn[p]=e[p];tp(a.config);const d=l(i,a.config,e,r);return Kn=Object.assign({},h),d}{const u=Object.assign({},Kn);for(const h of Object.keys(e))Kn[h]=e[h];const c=new i(a.config);return Kn=Object.assign({},u),c}}}function uu(n,t){return-1*function y$(n,t){return n<t?-1:n>t?1:0}(n,t)}function Zs(n){if(null==n)return n;const t=[];for(const e of n)-1===t.indexOf(e)&&t.push(e);return t}function x$(n){if(null==n)throw new R(`Invalid value in obj: ${JSON.stringify(n)}`);for(const t in n)if(n.hasOwnProperty(t))return!1;return!0}function Ar(n,t,e){if(null!=e&&n.indexOf(e)<0)throw new R(`${e} is not a valid ${t}.  Valid values are ${n} or null/undefined.`)}function np(n,t,e=0,s=1/0){return Pn(e>=0),Pn(s>=e),Array.isArray(n)&&n.length>=e&&n.length<=s&&n.every(r=>typeof r===t)}function Qt(n,t){Array.isArray(n)?(v(n.length>0,()=>`${t} is unexpectedly an empty array.`),n.forEach((e,s)=>Qt(e,`element ${s+1} of ${t}`))):v(Number.isInteger(n)&&n>0,()=>`Expected ${t} to be a positive integer, but got ${yy(n)}.`)}function yy(n){return null===n?"null":Array.isArray(n)?"["+n.map(t=>yy(t)).join(",")+"]":"string"==typeof n?`"${n}"`:`${n}`}function xy(n){return"relu"===n?"relu":"linear"===n?"linear":"elu"===n?"elu":null}let w$=0;function by(){return w$++}const cu={};function hu(n=""){return n in cu||(cu[n]=0),cu[n]+=1,n+cu[n].toString()}const v$=["channelsFirst","channelsLast"],I$=["nearest","bilinear"],S$=["valid","same","causal"],C$=["max","avg"],N$=["sum","mul","concat","ave"],ia=new Map;function Mt(n){Ar(v$,"DataFormat",n)}function Ln(n){Ar(S$,"PaddingMode",n)}function wy(n){Ar(C$,"PoolMode",n)}const Qo=[];function Rr(n,t){Qo.push(n);try{const e=t();return Qo.pop(),e}catch(e){throw Qo.pop(),e}}function Iy(n){if(!Cy(n))throw new Error("Not a valid tensor name: '"+n+"'");return function T$(){return 0===Qo.length?"":Qo.join("/")+"/"}()+n}function Sy(n){if(!Cy(n))throw new Error("Not a valid tensor name: '"+n+"'");ia.has(n)||ia.set(n,0);const t=ia.get(n);if(ia.set(n,ia.get(n)+1),t>0){const e=`${n}_${t}`;return ia.set(e,1),e}return n}const _$=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Cy(n){return!!n.match(_$)}function $$(n){return n===parseInt(n.toString(),10)}function Js(n,t,e){null==t&&(t=0),null==e&&(e=n.length);let s=1;for(let r=t;r<e;++r)s*=n[r];return s}function la(n){if(0===n.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let e=0;e<n.length;e++){const s=n[e];s<t&&(t=s)}return t}function Qs(n){if(0===n.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let e=0;e<n.length;e++){const s=n[e];s>t&&(t=s)}return t}function ss(n,t){if(t<n)throw new R(`end (${t}) < begin (${n}) is forbidden.`);const e=[];for(let s=n;s<t;++s)e.push(s);return e}let du;function Gt(){return null==du&&(du=function u1(){return F.backend}().epsilon()),du}function xs(n,t){return de(n,t)}function ei(n,t=-1){const e=n.shape.slice();return t<0&&(t=e.length+t+1),e.splice(t,0,1),P(n,e)}function Fr(n,t,e){return M(()=>{switch(n.rank){case 1:return hd(n,t,e);case 2:return ag(n,[t,0],[e,n.shape[1]]);case 3:return dd(n,[t,0,0],[e,n.shape[1],n.shape[2]]);case 4:return Zl(n,[t,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3]]);case 5:return lt(n,[t,0,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3],n.shape[4]]);case 6:return lt(n,[t,0,0,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3],n.shape[4],n.shape[5]]);default:throw new R(`sliceAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}})}function sp(n,t,e){return M(()=>{switch(n.rank){case 1:return hd(n,t,e);case 2:return ag(n,[0,t],[n.shape[0],e]);case 3:return dd(n,[0,0,t],[n.shape[0],n.shape[1],e]);case 4:return Zl(n,[0,0,0,t],[n.shape[0],n.shape[1],n.shape[2],e]);default:throw new R(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function pu(n,t,e,s){return M(()=>{switch(n.rank){case 1:return hd(n,t,e);case 2:switch(s){case 1:return Fr(n,t,e);case 2:return sp(n,t,e);default:throw new R(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return Fr(n,t,e);case 2:return dd(n,[0,t,0],[n.shape[0],e,n.shape[2]]);case 3:return sp(n,t,e);default:throw new R(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return Fr(n,t,e);case 2:return Zl(n,[0,t,0,0],[n.shape[0],e,n.shape[2],n.shape[3]]);case 3:return Zl(n,[0,0,t,0],[n.shape[0],n.shape[1],e,n.shape[3]]);case 4:return sp(n,t,e);default:throw new R(`The axis is not within the rank of the tensor ${s}`)}default:throw new R(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function rp(n,t=-1){let e;return t<0&&(e=n[0].rank,t=0!==e?e:0),t===n[0].rank&&(t=-1),un(n,t)}function ky(n,t){switch(n.rank){case 1:return yI([n,t]);case 2:return bI([n,t],0);case 3:return vI([n,t],0);case 4:return SI([n,t],0);default:throw new R(`concatAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}}function ap(n,t){if(Array.isArray(t)||(t=[t]),n.rank!==t.length)throw new R(`The length of input n (${t.length}) does not match the number of dimensions in input x (${n.rank})`);return ts(n,t)}function fu(n,t=0,e=1,s,r){return yS(n,t,e,s,r)}function bs(n,t,e,s){if(n.rank<2||t.rank<2)throw new Me(`dot requires both inputs to be rank >= 2 but got x shape = ${n.shape} and y shape = ${t.shape}`);if(t.rank>=3&&n.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new Me(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${n.shape} and  y shape = ${t.shape}`);if(2===n.rank&&2===t.rank)return hg({a:n,b:t,transposeA:!1,transposeB:!1,bias:s?op(n.rank,s,"channelsLast"):null,activation:e});{const r=n.shape.slice(),a=r.pop();n=P(n,[-1,a]);const o=t.shape.slice(),i=o.pop(),l=o.pop(),u=[...o,i],c=Array.from({length:t.rank},(f,g)=>0===g?t.rank-2:g<=t.rank-2?g-1:g);t=P(Ze(t,c),[l,-1]);const h=[...r,...u];return P(hg({a:n,b:t,transposeA:!1,transposeB:!1,bias:s?op(n.rank,s,"channelsLast"):null,activation:e}),h)}}function Ty(n,t,e){return M(()=>(t=Array.isArray(t)?kn(t,"int32"):de(t,"int32"),ed(n,t,e)))}function ti(n){return D(n,n)}function op(n,t,e){const s=t.shape;if(1!==t.rank&&t.rank!==n)throw new R(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${n}`);if(5===n){if("channelsFirst"===e)return P(t,1===s.length?[1,s[0],1,1,1]:[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===e)return P(t,1===s.length?[1,1,1,1,s[0]]:[1].concat(s))}else if(4===n){if("channelsFirst"===e)return P(t,1===s.length?[1,s[0],1,1]:[1,s[2],s[0],s[1]]);if("channelsLast"===e)return P(t,1===s.length?[1,1,1,s[0]]:[1].concat(s))}else if(3===n){if("channelsFirst"===e)return P(t,1===s.length?[1,s[0],1]:[1,s[1],s[0]]);if("channelsLast"===e)return P(t,1===s.length?[1,1,s[0]]:[1].concat(s))}else if(n<3)return t;throw new R(`Unsupported input rank by biasAdd: ${t.rank}`)}function as(n,t,e){return M(()=>(null==e&&(e="channelsLast"),Mt(e),re(n,op(n.rank,t,e))))}function _y(n,t,e,s){return M(()=>US(n,t,e,s))}function ni(n,t,e=!1){return e?n():t()}const V$=["fanIn","fanOut","fanAvg"],M$=["normal","uniform","truncatedNormal"];class Xn extends Qr{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}ne((()=>{class n extends Xn{apply(e,s){return Jt(e,s)}}return n.className="Zeros",n})());let $y=(()=>{class n extends Xn{apply(e,s){return Xs(e,s)}}return n.className="Ones",n})();ne($y),ne((()=>{class n extends Xn{constructor(e){if(super(),"object"!=typeof e)throw new R(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new R(`config must have value set but got ${e}`);this.value=e.value}apply(e,s){return M(()=>D(Pe(this.value),Xs(e,s)))}getConfig(){return{value:this.value}}}return n.className="Constant",n})()),ne((()=>{class n extends Xn{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,s){return Yl(e,this.minval,this.maxval,s,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}return n.className="RandomUniform",n})()),ne((()=>{class n extends Xn{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,s){if("float32"!==(s=s||"float32")&&"int32"!==s)throw new Me(`randomNormal does not support dType ${s}.`);return fu(e,this.mean,this.stddev,s,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}return n.className="RandomNormal",n})()),ne((()=>{class n extends Xn{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,s){if("float32"!==(s=s||"float32")&&"int32"!==s)throw new Me(`truncatedNormal does not support dType ${s}.`);return og(e,this.mean,this.stddev,s,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}return n.className="TruncatedNormal",n})()),ne((()=>{class n extends Xn{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,s){return M(()=>{if(2!==e.length||e[0]!==e[1])throw new R("Identity matrix initializer can only be used for 2D square matrices.");return D(this.gain,Qm(e[0]))})}getConfig(){return{gain:this.gain}}}return n.className="Identity",n})());let Vn=(()=>{class n extends Xn{constructor(e){if(super(),e.scale<0)throw new R(`scale must be a positive float. Got: ${e.scale}`);this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,function z$(n){Ar(V$,"FanMode",n)}(this.mode),this.distribution=null==e.distribution?"normal":e.distribution,function B$(n){Ar(M$,"Distribution",n)}(this.distribution),this.seed=e.seed}apply(e,s){const r=function W$(n,t="channelsLast"){let e,s;if(Mt(t),2===n.length)e=n[0],s=n[1];else if(-1!==[3,4,5].indexOf(n.length)){if("channelsFirst"===t){const r=Js(n,2);e=n[1]*r,s=n[0]*r}else if("channelsLast"===t){const r=Js(n,0,n.length-2);e=n[n.length-2]*r,s=n[n.length-1]*r}}else{const r=Js(n);e=Math.sqrt(r),s=Math.sqrt(r)}return[e,s]}(e),a=r[0],o=r[1];let i=this.scale;if(i/="fanIn"===this.mode?Math.max(1,a):"fanOut"===this.mode?Math.max(1,o):Math.max(1,(a+o)/2),"normal"===this.distribution){const l=Math.sqrt(i);if("float32"!==(s=s||"float32")&&"int32"!==s)throw new Me(`${this.getClassName()} does not support dType ${s}.`);return og(e,0,l,s,this.seed)}{const l=Math.sqrt(3*i);return Yl(e,-l,l,s,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}return n.className="VarianceScaling",n})();ne(Vn);let Ey=(()=>{class n extends Vn{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Vn.className}}return n.className="GlorotUniform",n})();ne(Ey);let Dy=(()=>{class n extends Vn{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Vn.className}}return n.className="GlorotNormal",n})();ne(Dy);let Ay=(()=>{class n extends Vn{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Vn.className}}return n.className="HeNormal",n})();ne(Ay);let Ry=(()=>{class n extends Vn{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Vn.className}}return n.className="HeUniform",n})();ne(Ry);let Fy=(()=>{class n extends Vn{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Vn.className}}return n.className="LeCunNormal",n})();ne(Fy);let Oy=(()=>{class n extends Vn{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Vn.className}}return n.className="LeCunUniform",n})();ne(Oy),ne((()=>{class n extends Xn{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new Me("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,s){return M(()=>{if(e.length<2)throw new Me("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const a=fu(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let o=PN.gramSchmidt(a);return e[0]>e[1]&&(o=Ze(o)),D(this.gain,o)})}getConfig(){return{gain:this.gain,seed:this.seed}}}return n.className="Orthogonal",n})());const Py={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Ly(n,t={}){return Jo(n,Bn.getMap().classNameMap,t,"initializer")}function kt(n){return ep(n)}function xt(n){if("string"==typeof n){const t=n in Py?Py[n]:n;if("GlorotNormal"===t)return new Dy;if("GlorotUniform"===t)return new Ey;if("HeNormal"===t)return new Ay;if("HeUniform"===t)return new Ry;if("LeCunNormal"===t)return new Fy;if("LeCunUniform"===t)return new Oy;{const e={};return e.className=t,e.config={},Ly(e)}}return n instanceof Xn?n:Ly(n)}function ip(n){return Array.isArray(n)&&Array.isArray(n[0])}function mu(n){return 0===n.length?[]:Array.isArray(n[0])?n:[n]}function Fe(n){let t;if(Array.isArray(n)){if(1!==n.length)throw new R(`Expected Tensor length to be 1; got ${n.length}`);t=n[0]}else t=n;return t}function nt(n){if(Array.isArray(n)&&Array.isArray(n[0])){if(1===n.length)return n[0];throw new R(`Expected exactly 1 Shape; got ${n.length}`)}return n}function gu(n){let t=0;for(const e of n)t+=0===e.shape.length?1:e.shape.reduce((s,r)=>s*r);return t}const Vy="Variable";class ws{constructor(t,e="float32",s=Vy,r=!0,a=null){this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=by(),this.originalName=Iy(s=null==s?Vy:s),this.name=Sy(this.originalName),this.trainable_=r,this.constraint=a,this.val=function LS(n,t=!0,e,s){return F.makeVariable(n,t,e,s)}(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function G$(n,t){if(n.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(n.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function lp(n){return n.map(t=>t.read())}function up(n){n.forEach(t=>{t[0].write(t[1])})}class Ut{constructor(t){this.dtype=t.dtype,this.shape=t.shape,this.ndim=null!=t.shape?t.shape.length:t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class vs{constructor(t,e,s,r,a,o,i){this.dtype=t,this.shape=e,this.sourceLayer=s,this.inputs=r,this.callArgs=a,this.outputTensorIndex=i,this.id=by(),null!=o&&(this.originalName=Iy(o),this.name=Sy(this.originalName)),this.rank=e.length}}let U$=0;class yu{constructor(t,e){this.callArgs=e,this.id=U$++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const s of t.inboundLayers)null!=s&&s.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)t.push(null!=e?e.name:null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let H$=0;class je extends Qr{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=H$++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const s=this.getClassName();e=Os(s)+"_"+hu(s)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let s;if(null!=t.batchInputShape)s=t.batchInputShape;else if(null!=t.inputShape){let a=null;null!=t.batchSize&&(a=t.batchSize),s=[a].concat(t.inputShape)}this.batchInputShape=s;let r=t.dtype;null==r&&(r=t.inputDType),null==r&&(r="float32"),this.dtype=r}this.initialWeights=null!=t.weights?t.weights:null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new qn(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new R(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return vn(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return vn(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new ys(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new ys(`Layer ${this.name} is not connected, no input to return.`);return vn(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new ys(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new ys(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return vn(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=pt(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=pt(this.inputSpec);if(t.length!==e.length)throw new R(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: ${t}`);for(let s=0;s<t.length;s++){const r=t[s],a=e[s];if(null==a)continue;const o=r.rank;if(null!=a.ndim&&o!==a.ndim)throw new R(`Input ${s} is incompatible with layer ${this.name}: expected ndim=${a.ndim}, found ndim=${o}`);if(null!=a.maxNDim&&o>a.maxNDim)throw new R(`Input ${s} is incompatible with layer ${this.name}: expected max_ndim=${a.maxNDim}, found ndim=${o}`);if(null!=a.minNDim&&o<a.minNDim)throw new R(`Input ${s} is incompatible with layer ${this.name}: expected min_ndim=${a.minNDim}, found ndim=${o}.`);if(null!=a.dtype&&r.dtype!==a.dtype)throw new R(`Input ${s} is incompatible with layer ${this.name} : expected dtype=${a.dtype}, found dtype=${r.dtype}.`);if(a.axes){const i=r.shape;for(const l in a.axes){const u=Number(l),c=a.axes[l],h=u>=0?i[u]:i[i.length+u];if(null!=c&&-1===[c,null].indexOf(h))throw new R(`Input ${s} is incompatible with layer ${this.name}: expected axis ${u} of input shape to have value ${c} but got shape ${i}.`)}}if(null!=a.shape)for(let i=0;i<a.shape.length;++i){const l=a.shape[i],u=r.shape[i];if(null!=l&&null!=u&&l!==u)throw new R(`Input ${s} is incompatible with layer ${this.name}: expected shape=${a.shape}, found shape=${r.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const s=pt(t);let r=!0;for(const o of s)if(!(o instanceof vs)){r=!1;break}let a=!0;for(const o of s)if(o instanceof vs){a=!1;break}if(r===a)throw new R("Arguments to apply() must be all SymbolicTensors or all Tensors");return Rr(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);const o=[];for(const i of pt(t))o.push(i.shape);this.build(vn(o)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&a&&(this._refCount=1)}if(this.assertInputCompatibility(t),a){let o=this.call(t,e);const i=pt(o),l=[];for(let u of i)-1!==s.indexOf(u)&&(u=u.clone()),l.push(u);if(o=vn(l),null!=this.activityRegularizer)throw new Me("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return o}{const o=function j$(n){n=pt(n);const t=[];for(const e of n)t.push(e.shape);return vn(t)}(t),i=this.computeOutputShape(o);let l;const u="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?o[0]:o),l=null!=i&&i.length>0&&Array.isArray(i[0])?i.map((c,h)=>new vs(u,c,this,pt(t),e,this.name,h)):new vs(u,i,this,pt(t),e,this.name),this.addInboundNode(t,l,null,null,o,i,e),this._refCount++,null!=this.activityRegularizer)throw new Me("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return l}})}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let e=!1;this.batchInputShape.forEach((s,r)=>{null!=s&&null!=t[r]&&t[r]!==s&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new ys(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const s=JSON.stringify(e.outputShapes);-1===t.indexOf(s)&&t.push(s)}if(1===t.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new ys(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new qn(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return gu(this.weights)}build(t){this.built=!0}getWeights(t=!1){return lp(t?this.trainableWeights:this.weights)}setWeights(t){M(()=>{const e=this.weights;if(e.length!==t.length)throw new R(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const s=[],r=lp(e);for(let a=0;a<r.length;++a){const o=r[a],i=e[a],l=t[a];if(!ye(o.shape,l.shape))throw new R(`Layer weight shape ${o.shape} not compatible with provided weight shape ${l.shape}`);s.push([i,l])}up(s)})}addWeight(t,e,s,r,a,o,i,l){if(-1!==this._addedWeightNames.indexOf(t))throw new R(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==s&&(s="float32"),this.fastWeightInitDuringBuild&&(r=null!=l?l():xt("zeros"));const u=r.apply(e,s),c=new ws(u,s,t,o,i);return u.dispose(),null!=a&&this.addLoss(()=>a.apply(c.read())),null==o&&(o=!0),o?this._trainableWeights.push(c):this._nonTrainableWeights.push(c),c}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=pt(t),null!=this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach(s=>{if(null!=s)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return e}addInboundNode(t,e,s,r,a,o,i=null){const l=pt(t);e=pt(e),s=pt(s),r=pt(r),a=mu(a),o=mu(o);const u=[],c=[],h=[];for(const d of l)u.push(d.sourceLayer),c.push(d.nodeIndex),h.push(d.tensorIndex);new yu({outboundLayer:this,inboundLayers:u,nodeIndices:c,tensorIndices:h,inputTensors:l,outputTensors:e,inputMasks:s,outputMasks:r,inputShapes:a,outputShapes:o},i);for(let d=0;d<e.length;d++)e[d].sourceLayer=this,e[d].nodeIndex=this.inboundNodes.length-1,e[d].tensorIndex=d}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}function My(n,t,e){if((null==t||null!=e&&e>0)&&(t=n.sourceLayer,e=n.nodeIndex),0===t.inboundNodes.length)return[n];{const s=t.inboundNodes[e];if(0===s.inboundLayers.length)return s.inputTensors;{const r=[];for(let a=0;a<s.inboundLayers.length;a++){const u=My(s.inputTensors[a],s.inboundLayers[a],s.nodeIndices[a]);for(const c of u)-1===r.indexOf(c)&&r.push(c)}return r}}}let xu=(()=>{class n extends je{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:hu("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new R("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let s=e.batchInputShape;if(null==s){if(null==e.inputShape)throw new R("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");s=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new R("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const r=e.dtype||"float32";this.batchInputShape=s,this.dtype=r,this.inputSpec=[{shape:s}];const a=new vs(this.dtype,this.batchInputShape,this,[],{},this.name);a.nodeIndex=0,a.tensorIndex=0,new yu({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[a],outputTensors:[a],inputMasks:[null],outputMasks:[null],inputShapes:[s],outputShapes:[s]})}apply(e,s){throw new R(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}return n.className="InputLayer",n})();ne(xu);class er{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof er)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,s){if(null!=this.id2Value[t.id])throw new R(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function X$(n,t){if(null==n.dtype||n.dtype===t.dtype)return t;try{return de(t,n.dtype)}catch(e){throw new R(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${n.name}' (${n.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=s&&(this.id2Mask[t.id]=s),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof vs){if(null==this.id2Value[t.id])throw new R(`Nonexistent key: ${t.name}`);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new R(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Value[e]}}getMask(t){if(t instanceof vs){if(null==this.id2Value[t.id])throw new R(`Nonexistent key: ${t.name}`);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new R(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&Ge(this.id2Mask)}}const bu=new my,wu=new my;function si(n,t,e,s){const r=null!=e&&e.training,a=Array.isArray(n),o=a?n:[n],i=o.map(f=>f.name),l=[],u=t.names();for(const f of i)-1!==u.indexOf(f)?l.push(t.getValue(f)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=i.join(",")+"|"+t.names().sort().join(",");let d,h=bu.get(c);if(null==h){const f=function Z$(n,t){v(null!=n&&n.length>0,()=>"Expected at least one fetch, got none");let e=[],s={};if(1===n.length){const r=zy(n[0],t);e=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of n){const{sorted:o,recipientMap:i}=zy(a,t);for(const l of o)r.has(l.name)||(e.push(l),r.add(l.name));for(const l in i)null==s[l]&&(s[l]=new Set),i[l].forEach(u=>s[l].add(u))}}return{sorted:e,recipientCounts:J$(s)}}(o,t);h=f.sorted,d=f.recipientCounts,bu.put(c,h),wu.put(c,d)}d={},r||Object.assign(d,wu.get(c));const p=new er(t);for(let f=0;f<h.length;++f){if(null!=s){const _=Oh().numTensors;_>s.maxNumTensors&&(s.maxNumTensors=_),_<s.minNumTensors&&(s.minNumTensors=_)}const g=h[f],m=g.sourceLayer;if(m instanceof xu)continue;const y=[],x=[],b=[];let w=!1;for(const _ of g.inputs){const $=p.getValue(_),L=p.getMask(_);y.push($),x.push(L),null!=L&&(w=!0),r||(d[_.name]--,0===d[_.name]&&!t.hasKey(_)&&-1===i.indexOf(_.name)&&!$.isDisposed&&!0!==_.sourceLayer.stateful&&b.push($))}w&&((e=e||{}).mask=x[0]);const I=pt(m.apply(y,e));let S=null;m.supportsMasking&&(S=m.computeMask(y,x));const N=Q$(g),k=Array.isArray(N)?N:[N];for(let _=0;_<k.length;++_){p.hasKey(k[_])||p.add(k[_],I[_],Array.isArray(S)?S[0]:S);const $=i.indexOf(k[_].name);-1!==$&&(l[$]=I[_])}r||Ge(b)}return p.disposeMasks(),a?l:l[0]}function J$(n){const t={};for(const e in n)t[e]=n[e].size;return t}function zy(n,t){const e=new Set,s=[],r={};for(const i of t.names())e.add(i);const a=[],o=[];for(a.push(n);a.length>0;){const i=a[a.length-1];if(e.has(i.name)){a.pop();continue}const l=o[o.length-1]===a.length-1;if(0===i.inputs.length||l)a.pop(),s.push(i),e.add(i.name),l&&o.pop();else{o.push(a.length-1);for(const u of i.inputs)null==r[u.name]&&(r[u.name]=new Set),r[u.name].add(i.name),!e.has(u.name)&&a.push(u)}}return{sorted:s,recipientMap:r}}function Q$(n){let t;if(1===n.sourceLayer.inboundNodes.length)t=n.sourceLayer.output;else{let e=null;for(let s=0;s<n.sourceLayer.inboundNodes.length;++s)for(const r of n.sourceLayer.inboundNodes[s].outputTensors)if(r.id===n.id){e=s;break}t=n.sourceLayer.getOutputAt(e)}return t}function cp(n,t){return M(()=>dn(be(D(n,n),t,!0)))}z().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,function Y$(n){null!=bu&&bu.setMaxEntries(n),null!=wu&&wu.setMaxEntries(n)});class ri extends Qr{getConfig(){return{}}}ne((()=>{class n extends ri{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return M(()=>{const s=cp(e,this.axis),r=Rn(s,0,this.maxValue);return D(e,Ce(r,re(Gt(),s)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}return n.className="MaxNorm",n})()),ne((()=>{class n extends ri{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return M(()=>Ce(e,re(Gt(),cp(e,this.axis))))}getConfig(){return{axis:this.axis}}}return n.className="UnitNorm",n})()),ne((()=>{class n extends ri{apply(e){return Ds(e)}}return n.className="NonNeg",n})()),ne((()=>{class n extends ri{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return M(()=>{const s=cp(e,this.axis),r=re(D(this.rate,Rn(s,this.minValue,this.maxValue)),D(1-this.rate,s));return D(e,Ce(r,re(Gt(),s)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}return n.className="MinMaxNorm",n})());const By={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Ht(n){return ep(n)}function Wy(n,t={}){return Jo(n,Bn.getMap().classNameMap,t,"constraint")}function jt(n){return null==n?null:"string"==typeof n?Wy({className:n in By?By[n]:n,config:{}}):n instanceof ri?n:Wy(n)}function tr(n){return hp.apply(this,arguments)}function hp(){return(hp=A(function*(n){if(null==n)return;const t=[],e=[],s=[];for(const r in n){const a=n[r];if("number"!=typeof a){const o=a;t.push(o.data()),e.push(r),s.push(o)}}if(t.length>0){const r=yield Promise.all(t);for(let a=0;a<r.length;++a)n[e[a]]=r[a][0];Ge(s)}})).apply(this,arguments)}function Gy(n){if(null!=n)for(const t in n){const e=n[t];"number"!=typeof e&&e.dispose()}}class ua{constructor(){this.validationData=null}setParams(t){this.params=t}onEpochBegin(t,e){return A(function*(){})()}onEpochEnd(t,e){return A(function*(){})()}onBatchBegin(t,e){return A(function*(){})()}onBatchEnd(t,e){return A(function*(){})()}onTrainBegin(t){return A(function*(){})()}onTrainEnd(t){return A(function*(){})()}setModel(t){}}class t2{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}onEpochBegin(t,e){var s=this;return A(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onEpochBegin(t,e)})()}onEpochEnd(t,e){var s=this;return A(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onEpochEnd(t,e)})()}onBatchBegin(t,e){var s=this;return A(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onBatchBegin(t,e)})()}onBatchEnd(t,e){var s=this;return A(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onBatchEnd(t,e)})()}onTrainBegin(t){var e=this;return A(function*(){null==t&&(t={});for(const s of e.callbacks)yield s.onTrainBegin(t)})()}onTrainEnd(t){var e=this;return A(function*(){null==t&&(t={});for(const s of e.callbacks)yield s.onTrainEnd(t)})()}}class n2 extends ua{constructor(){super()}onEpochBegin(t){var e=this;return A(function*(){e.seen=0,e.totals={}})()}onBatchEnd(t,e){var s=this;return A(function*(){null==e&&(e={});const r=null==e.size?0:e.size;s.seen+=r;for(const a in e){const o=e[a];if("number"==typeof o)s.totals.hasOwnProperty(a)||(s.totals[a]=0),s.totals[a]=s.totals[a]+o*r;else{let i;a in s.totals?i=s.totals[a]:s.totals[a]=0;const l=M(()=>re(s.totals[a],D(o,r)));s.totals[a]=l,null!=i&&i.dispose()}}})()}onEpochEnd(t,e){var s=this;return A(function*(){if(null!=e)for(const r of s.params.metrics)null!=s.totals[r]&&("number"==typeof s.totals[r]?e[r]=s.totals[r]/s.seen:M(()=>{const a=D(Ce(1,s.seen),s.totals[r]);e[r]=a,s.totals[r].dispose(),fs(e[r])}))})()}}class s2 extends ua{onTrainBegin(t){var e=this;return A(function*(){e.epoch=[],e.history={}})()}onEpochEnd(t,e){var s=this;return A(function*(){null==e&&(e={}),s.epoch.push(t);for(const r in e)null==s.history[r]&&(s.history[r]=[]),s.history[r].push(e[r])})()}syncData(){var t=this;return A(function*(){const e=[],s=[],r=[];for(const o in t.history){const i=t.history[o];for(let l=0;l<i.length;++l)"number"!=typeof i[l]&&(e.push(i[l].data()),s.push(o),r.push(l))}const a=yield Promise.all(e);for(let o=0;o<a.length;++o)t.history[s[o]][r[o]].dispose(),t.history[s[o]][r[o]]=a[o][0]})()}}class r2 extends ua{constructor(t,e){if(super(),this.currentEpoch=0,this.nowFunc=t.nowFunc,this.nextFrameFunc=t.nextFrameFunc||Sg,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");hc(this.yieldEvery)&&(this.maybeWait=function b$(n,t,e){let r,s=null!=e?e():wn();return(...o)=>{const i=null!=e?e():wn();return i-s<t||(s=i,r=n(...o)),r}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}maybeWait(t,e,s){var r=this;return A(function*(){const a=[];null!=r.yield&&(yield tr(s),a.push(r.yield(t,e,s))),a.push(r.nextFrameFunc()),yield Promise.all(a)})()}onEpochBegin(t,e){var s=this;return A(function*(){s.currentEpoch=t,null!=s.epochBegin&&(yield tr(e),yield s.epochBegin(t,e))})()}onEpochEnd(t,e){var s=this;return A(function*(){const r=[];null!=s.epochEnd&&(yield tr(e),r.push(s.epochEnd(t,e))),"epoch"===s.yieldEvery&&r.push(s.nextFrameFunc()),yield Promise.all(r)})()}onBatchBegin(t,e){var s=this;return A(function*(){null!=s.batchBegin&&(yield tr(e),yield s.batchBegin(t,e))})()}onBatchEnd(t,e){var s=this;return A(function*(){const r=[];null!=s.batchEnd&&(yield tr(e),r.push(s.batchEnd(t,e))),"batch"===s.yieldEvery?r.push(s.nextFrameFunc()):hc(s.yieldEvery)&&r.push(s.maybeWait(s.currentEpoch,t,e)),yield Promise.all(r)})()}onTrainBegin(t){var e=this;return A(function*(){null!=e.trainBegin&&(yield tr(t),yield e.trainBegin(t))})()}onTrainEnd(t){var e=this;return A(function*(){null!=e.trainEnd&&(yield tr(t),yield e.trainEnd(t))})()}}function Uy(n,t){return null==n&&(n={}),n instanceof ua?[n]:Array.isArray(n)&&n[0]instanceof ua?n:pt(n).map(s=>new r2(s,t))}let a2=(()=>{class n{constructor(){}static registerCallbackConstructor(e,s){v(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),n.checkForDuplicate(s),null==n.constructors[e]&&(n.constructors[e]=[]),n.constructors[e].push(s)}static checkForDuplicate(e){for(const s in n.constructors)n.constructors[+s].forEach(a=>{if(a===e)throw new R("Duplicate callback constructor.")})}static clear(){n.constructors={}}static createCallbacks(e){const s=[];for(const r in n.constructors){const a=+r;e>=a&&s.push(...n.constructors[a])}return s.map(r=>new r)}}return n.constructors={},n})();function Hy(n,t,e,s,r,a,o,i,l){const u=new s2,c=[new n2,...a2.createCallbacks(t)];null!=n&&c.push(...n),c.push(u);const h=new t2(c);return h.setParams({epochs:e,initialEpoch:s,samples:r,steps:a,batchSize:o,verbose:t,doValidation:i,metrics:l}),{callbackList:h,history:u}}function Is(n,t={},e=!1){return Jo(n,Bn.getMap().classNameMap,t,"layer",e)}function vu(n,t){return M(()=>{"float32"!==n.dtype&&(n=de(n,"float32"));const e=be(ti(n),t,!0),s=Lo(e.shape,Gt()),r=dn(Hs(e,s));return Ce(n,r)})}function Iu(n,t){return M(()=>Pt(ti(xe(t,n)),-1))}function dp(n,t){return M(()=>Pt(Xt(xe(t,n)),-1))}function pp(n,t){return M(()=>{const e=xe(n,t),s=Rn(Xt(n),Gt(),Number.MAX_VALUE),r=Xt(Ce(e,s));return D(100,Pt(r,-1))})}function ai(n,t,e=!1){return M(()=>{if(e)t=pd(t);else{const s=be(t,t.shape.length-1,!0);t=Ce(t,s)}return t=Rn(t,Gt(),1-Gt()),Nt(be(D(de(n,"float32"),Un(t)),t.shape.length-1))})}function Su(n,t,e=!1){return M(()=>{const s=de(ql(function R$(n){const t=[Js(n.shape)];return P(n,t)}(n)),"int32"),r=(t=Rn(t,Gt(),1-Gt())).shape;return ai(P(ng(s,r[r.length-1]),r),t,e)})}function Cu(n,t){return M(()=>{let e;return e=Rn(t,Gt(),1-Gt()),e=Un(Ce(e,xe(1,e))),Pt(function h2(n,t){if(!ye(n.shape,t.shape))throw new R(`logits and labels must have the same shape, but got shapes ${JSON.stringify(n.shape)} and ${JSON.stringify(t.shape)}`);return M(()=>{const e=Ds(t),s=Nt(Xt(t));return re(xe(e,D(t,n)),nd(Gn(s)))})}(n,e),-1)})}function jy(n,t){return M(()=>{const e=vu(n,-1),s=vu(t,-1),r=D(e,s);return Nt(be(r,-1))})}const Nu={meanSquaredError:Iu,meanAbsoluteError:dp,meanAbsolutePercentageError:pp,meanSquaredLogarithmicError:function o2(n,t){return M(()=>{const e=Rn(t,Gt(),Number.MAX_VALUE),s=Un(re(1,e)),r=Rn(n,Gt(),Number.MAX_VALUE),a=Un(re(1,r));return Pt(ti(xe(s,a)),-1)})},squaredHinge:function i2(n,t){return M(()=>{const e=Hs(0,xe(1,D(n,t)));return Pt(ti(e),-1)})},hinge:function l2(n,t){return M(()=>{const e=Hs(0,xe(1,D(n,t)));return Pt(e,-1)})},categoricalHinge:function u2(n,t){return M(()=>{const e=be(D(n,t),-1),s=ns(D(xe(1,n),t),-1);return Hs(0,re(1,xe(s,e)))})},logcosh:function c2(n,t){return M(()=>{const e=Math.log(2),s=xe(t,n),r=xe(re(s,Ho(D(-2,s))),e);return Pt(r,-1)})},categoricalCrossentropy:ai,sparseCategoricalCrossentropy:Su,binaryCrossentropy:Cu,kullbackLeiblerDivergence:function d2(n,t){return M(()=>{const e=Rn(n,Gt(),1),s=Rn(t,Gt(),1);return be(D(n,Un(Ce(e,s))),-1)})},poisson:function p2(n,t){return M(()=>{const e=Un(re(Gt(),t));return Pt(xe(t,D(n,e)),-1)})},cosineProximity:jy};function fp(n){if("string"==typeof n){if(n in Nu)return Nu[n];let t=`Unknown loss ${n}`;throw n.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${n}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new R(t)}return n}function qy(n,t){return M(()=>{const e=D(.5,Hn(t)),s=xs(Fn(t,e),n.dtype);return Pt(ms(n,s),-1)})}function Ky(n,t){return M(()=>xs(ms(Vo(n,-1),Vo(t,-1)),"float32"))}function y2(n,t){return Cu(n,t)}function x2(n,t){return n.rank===t.rank&&(n=jo(n,[n.rank-1])),(t=Vo(t,-1)).dtype!==n.dtype&&(t=de(t,n.dtype)),de(ms(n,t),"float32")}const Yy=ai,Zy=Su,ku={binaryAccuracy:qy,categoricalAccuracy:Ky,precision:function g2(n,t){return M(()=>{const e=function Xy(n,t){return M(()=>de(be(Es(ms(n,1),ms(t,1))),"float32"))}(n,t),s=function m2(n,t){return M(()=>de(be(Es(ms(n,0),ms(t,1))),"float32"))}(n,t),r=re(e,s);return de(Tn(Fn(r,0),Ce(e,r),0),"float32")})},categoricalCrossentropy:Yy,sparseCategoricalCrossentropy:Zy,mse:Iu,MSE:Iu,mae:dp,MAE:dp,mape:pp,MAPE:pp,cosine:jy};function k2(n){if("string"==typeof n&&n in ku)return ku[n];if("string"!=typeof n&&null!=n)return n;throw new R(`Unknown metric ${n}`)}function Tu(n){if(Pn(null!==n,`Unknown LossOrMetricFn ${n}`),"string"==typeof n)return n;{let t;for(const e of Object.keys(Nu))if(Nu[e]===n){t=e;break}if(void 0!==t)return t;for(const e of Object.keys(ku))if(ku[e]===n){t=e;break}return void 0!==t?t:n.name}}function Qy(n,t,e=!1){if(null==n||"object"!=typeof n||Object.getPrototypeOf(n)!==Object.prototype||!mp(n))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(e){const s=JSON.stringify(n);s.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function mp(n){if(null===n)return!0;if("object"==typeof n){if(Object.getPrototypeOf(n)===Object.prototype){const t=Object.keys(n);for(const e of t)if("string"!=typeof e||!mp(n[e]))return!1;return!0}if(Array.isArray(n)){for(const t of n)if(!mp(t))return!1;return!0}return!1}{const t=typeof n;return"string"===t||"number"===t||"boolean"===t}}function _u(n,t,e=console.log){let s="";for(let r=0;r<n.length;++r)r>0&&(s=s.slice(0,s.length-1)+" "),s+=n[r],s=s.slice(0,t[r]),s+=" ".repeat(t[r]-s.length);e(s)}function D2(n,t,e){let s,r;try{r=n.inboundNodes.map(l=>JSON.stringify(l.inputShapes)).join(",")}catch(l){r="multiple"}try{s=JSON.stringify(n.outputShape)}catch(l){s="multiple"}_u([`${n.name} (${n.getClassName()})`,r,s,n.countParams().toString()],t,e)}function A2(n,t,e,s){let r,a;try{a=n.inboundNodes.map(h=>JSON.stringify(h.inputShapes)).join(",")}catch(h){a="multiple"}try{r=JSON.stringify(n.outputShape)}catch(h){r="multiple"}const o=[];for(const h of n.inboundNodes)if(!(null!=e&&e.length>0&&-1===e.indexOf(h)))for(let d=0;d<h.inboundLayers.length;++d)o.push(`${h.inboundLayers[d].name}[${h.nodeIndices[d]}][${h.tensorIndices[d]}]`);const i=n.name,l=n.getClassName(),u=0===o.length?"":o[0];_u([`${i} (${l})`,a,r,n.countParams().toString(),u],t,s);for(let h=1;h<o.length;++h)_u(["","","","",o[h]],t,s)}function ex(n,t,e){return("inboundNodes"===n||"outputLayers"===n||"inputLayers"===n)&&0===t&&"string"==typeof e}function $u(n,t){if(null===n)return null;if("string"==typeof n)return Dr(n);if("number"==typeof n||"boolean"==typeof n)return n;if(n instanceof Array){const e=[],s=n.length;for(let r=0;r<s;++r){const a=n[r];ex(t,r,a)?e.push(a):e.push($u(a,t))}return e}{const e={};for(const s of Object.keys(n)){const r=n[s];if("name"===s&&"string"==typeof r)e[s]=r;else{const a=Dr(s);e[a]=$u(r,a)}}return e}}function gp(n,t){if(null==n)return null;if("string"==typeof n)return Os(n);if("number"==typeof n||"boolean"==typeof n)return n;if(n instanceof Array){const e=[],s=n.length;for(let r=0;r<s;++r){const a=n[r];ex(t,r,a)?e.push(a):e.push(gp(a,t))}return e}{const e={};for(const s of Object.keys(n)){const r=n[s];e[Os(s)]="name"!==s&&"className"!==s||"string"!=typeof r?gp(r,s):r}return e}}class os extends je{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const x=this.getClassName().toLowerCase();this.name=hu(x)}if(this.supportsMasking=!1,this.trainable_=!0,this.inputs=Array.isArray(t.inputs)?t.inputs.slice():[t.inputs],this.outputs=Array.isArray(t.outputs)?t.outputs.slice():[t.outputs],Zs(this.inputs).length!==this.inputs.length)throw new R(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(x=>x.name)}`);Zs(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(x=>x.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const x of this.outputs){const w=x.nodeIndex,I=x.tensorIndex;this.outputLayers.push(x.sourceLayer),this.outputLayersNodeIndices.push(w),this.outputLayersTensorIndices.push(I)}for(const x of this.inputs){const b=x.sourceLayer,w=x.nodeIndex,I=x.tensorIndex;Pn(0===w,"input layer has >1 nodes"),Pn(0===I,"input layer has >1 tensors"),this.inputLayers.push(b),this.inputLayersNodeIndices.push(w),this.inputLayersTensorIndices.push(I)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let x=0;x<this.inputLayers.length;x++){const b=this.inputLayers[x];if(!(b instanceof xu))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${x} (0-based) originates from layer type ${b.getClassName()}.`);this.inputNames.push(b.name),this.feedInputShapes.push(b.batchInputShape),this.feedInputNames.push(b.name)}for(const x of this.outputLayers)this.outputNames.push(x.name);this.internalInputShapes=this.inputs.map(x=>x.shape),this.internalOutputShapes=this.outputs.map(x=>x.shape);const e={},s={},r={},a={},o={},i=[],l=(x,b,w,I,S,N)=>{(null==I||null==S||null==N)&&(I=x.sourceLayer,S=x.nodeIndex,N=x.tensorIndex);const k=I.inboundNodes[S];if(-1!==w.indexOf(k))throw new qn(`The tensor ${x.name} at layer "${I.name}" is part of a cycle.`);if(-1!==b.indexOf(k))return;this.containerNodes.add(os.nodeKey(I,S)),I.id in o||(o[I.id]=Object.keys(o).length),-1===w.indexOf(k)&&w.push(k);const _=k.inboundLayers.length;for(let $=0;$<_;$++)l(k.inputTensors[$],b,w,k.inboundLayers[$],k.nodeIndices[$],k.tensorIndices[$]);for(b.push(k);w.indexOf(k)>=0;)w.splice(w.indexOf(k),1);i.push(k)},u=[],c=[];for(const x of this.outputs)l(x,u,c);const h=i.slice().reverse();for(const x of h){s[x.id]=x,x.id in e||(e[x.id]=0);let b=e[x.id];b=Math.max(b,null==r[x.outboundLayer.id]?0:r[x.outboundLayer.id]),r[x.outboundLayer.id]=b,a[x.outboundLayer.id]=x.outboundLayer,e[x.id]=b;for(let I=0;I<x.inboundLayers.length;I++){const k=x.inboundLayers[I].inboundNodes[x.nodeIndices[I]];e[k.id]=Math.max(b+1,null==e[k.id]?0:e[k.id]),s[k.id]=k}}const d={};for(const x in e){const b=e[x];b in d||(d[b]=[]),d[b].push(s[x])}const p={};for(const x in r){const b=r[x];b in p||(p[b]=[]),p[b].push(a[x])}let f=Object.keys(p).map(x=>parseInt(x,10)).sort(uu);this.layers=[];for(const x of f){const b=p[x];b.sort((w,I)=>{const S=o[w.id],N=o[I.id];return S<N?-1:S>N?1:0});for(const w of b)w instanceof os&&this.internalContainerRefs.push(w),this.layers.push(w)}this.layersByDepth=p,f=Object.keys(d).map(x=>parseInt(x,10)).sort(uu);const g=this.inputs.slice(),m=[];for(const x of f)for(const b of d[x]){const w=b.outboundLayer;if(null!=w){for(const I of b.inputTensors)if(-1===g.indexOf(I))throw new qn(`Graph disconnected: cannot obtain value for tensor ${I} at layer "${w.name}". The following previous layers were accessed without issue: ${m}`);for(const I of b.outputTensors)g.push(I);m.push(w.name)}}this.nodesByDepth=d;const y=this.layers.map(x=>x.name);for(const x of y){const b=y.filter(w=>w===x).length;if(1!==b)throw new qn(`The name "${x}" is used ${b} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(y))}this.outboundNodes=[],this.inboundNodes=[],new yu({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(x=>null),outputMasks:this.outputs.map(x=>null),inputShapes:this.inputs.map(x=>x.shape),outputShapes:this.outputs.map(x=>x.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(s=>s.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new R("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const s of this.layers)e.push(...s.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const s={};let r=0;for(const o of this.layers)for(const i of o.weights){if(null!=s[i.originalName])throw new R(`Duplicate weight name: ${i.originalName}`);s[i.originalName]=i,r++}const a=[];for(const o in t){let i=o;if(null==s[o]){const l=o.split("/");i=l.slice(0,-2).concat([l[l.length-1]]).join("/")}if(null!=s[i])a.push([s[i],t[o]]);else if(e)throw new R(`Provided weight data has no target variable: ${o}`);delete s[i]}if(e){const o=[];for(const i in s)o.push(i);if(o.length>0)throw new R(`${o.length} of ${r} weights are not set: ${o}`)}up(a)}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 4.2.0",e.backend="TensorFlow.js",e}toJSON(t,e=!0){const s=gp(this.updatedConfig());return e?JSON.stringify(s):s}call(t,e){return M(()=>{t=pt(t);const s=new er;for(let r=0;r<this.inputs.length;++r)s.add(this.inputs[r],t[r]);return si(this.outputs,s,e)})}computeMask(t,e){return M(()=>{let s;return t=pt(t),s=null==e?Er(null,t.length):pt(e),this.runInternalGraph(t,s)[1]})}computeOutputShape(t){const e=mu(t);if(e.length!==this.inputLayers.length)throw new R(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const s={};for(let i=0;i<e.length;i++)s[this.inputLayers[i].name+"_0_0"]=e[i];const r=Object.keys(this.nodesByDepth).map(i=>parseInt(i,10)).sort(uu);if(r.length>1)for(const i of r){const l=this.nodesByDepth[i];for(const u of l){const c=u.outboundLayer;if(-1!==this.inputLayers.map(g=>g.id).indexOf(c.id))continue;const h=[];for(let g=0;g<u.inboundLayers.length;g++)h.push(s[`${u.inboundLayers[g].name}_${u.nodeIndices[g]}_${u.tensorIndices[g]}`]);const p=mu(c.computeOutputShape(vn(h))),f=c.inboundNodes.indexOf(u);for(let g=0;g<p.length;g++)s[`${c.name}_${f}_${g}`]=p[g]}}const a=[],o=[];for(let i=0;i<this.outputLayers.length;i++)o.push(`${this.outputLayers[i].name}_${this.outputLayersNodeIndices[i]}_${this.outputLayersTensorIndices[i]}`);for(let i=0;i<o.length;i++){const l=o[i];Pn(l in s),a.push(s[l])}return vn(a)}runInternalGraph(t,e){null==e&&(e=Er(null,t.length));const s={};for(let l=0;l<this.inputs.length;++l)s[this.inputs[l].id]=[t[l],e[l]];const r=Object.keys(this.nodesByDepth).map(l=>parseInt(l,10)).sort(uu);for(const l of r){const u=this.nodesByDepth[l];for(const c of u){const h=c.outboundLayer,d=c.inputTensors,p=c.outputTensors,f=new Array;for(const g of d)g.id in s&&f.push(s[g.id]);if(f.length===d.length){let m,y,x,b,g={};if(null!=c.callArgs&&(g=c.callArgs),1===f.length){const[w,I]=f[0];null==g.mask&&(g.mask=I),x=pt(h.call(w,g)),b=pt(h.computeMask(w,I)),m=[w],y=[I]}else m=f.map(w=>w[0]),y=f.map(w=>w[1]),null==g.mask&&(g.mask=y),x=pt(h.call(m,g)),b=pt(h.computeMask(m,y));if(h.activityRegularizer)throw new Me("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let w=0;w<p.length;++w)s[p[w].id]=[x[w],b[w]]}}}const a=[],o=[],i=[];for(const l of this.outputs){Pn(l.id in s,`Could not compute output ${l.name} : ${l.id}`);const[u,c]=s[l.id];i.push(u.shape),a.push(u),o.push(c)}return[a,o,i]}buildNodeConversionMap(t){const e={};let s;for(const r of this.layers){s=r instanceof os?1:0;for(let a=0;a<r.inboundNodes.length;a++){const o=os.nodeKey(r,a);this.containerNodes.has(o)&&(e[o]=s,s+=1)}}return e}getLayer(t,e){if(null!=e){if(this.layers.length<=e)throw new R(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}if(null==t)throw new R("Provide either a layer name or layer index");for(const s of this.layers)if(s.name===t)return s;throw new R(`No such layer: ${t}`)}calculateLosses(){return M(()=>{const t=[];for(const e of this.layers)for(let s=0;s<e.inboundNodes.length;++s){const r=os.nodeKey(e,s);this.containerNodes.has(r)&&t.push(...e.calculateLosses())}return t})}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),s=[];for(const o of this.layers){const i=o.getClassName(),l=o.getConfig(),u=[];for(let h=0;h<o.inboundNodes.length;h++){const d=o.inboundNodes[h],p=os.nodeKey(o,h);let f={};if(this.containerNodes.has(p)){if(d.callArgs)try{JSON.stringify(d.callArgs),f=d.callArgs}catch(g){console.warn(`Layer ${o.name} was passed non-serializable keyword arguments: ${d.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),f={}}if(d.inboundLayers.length>0){const g=[];for(let m=0;m<d.inboundLayers.length;m++){const y=d.inboundLayers[m],b=d.tensorIndices[m];let I=e[os.nodeKey(y,d.nodeIndices[m])];null==I&&(I=0),g.push([y.name,I,b,f])}u.push(g)}}}const c={};c.name=o.name,c.className=i,c.config=l,c.inboundNodes=u,s.push(c)}t.layers=s;const r=[];for(let o=0;o<this.inputLayers.length;o++){const i=this.inputLayers[o],u=os.nodeKey(i,this.inputLayersNodeIndices[o]);if(!this.containerNodes.has(u))continue;let c=e[u];null==c&&(c=0),r.push([i.name,c,this.inputLayersTensorIndices[o]])}t.inputLayers=r;const a=[];for(let o=0;o<this.outputLayers.length;o++){const i=this.outputLayers[o],u=os.nodeKey(i,this.outputLayersNodeIndices[o]);if(!this.containerNodes.has(u))continue;let c=e[u];null==c&&(c=0),a.push([i.name,c,this.outputLayersTensorIndices[o]])}return t.outputLayers=a,t}static fromConfig(t,e,s={},r=!1){const a={},o={};function i(m,y){m.name in o?o[m.name].push(y):o[m.name]=[y]}function l(m,y){const x=[];let b;for(const w of y){const I=w[0],S=w[1],N=w[2];if(b=null==w[3]?{}:w[3],!(I in a))return void i(m,y);const k=a[I];if(k.inboundNodes.length<=S)return void i(m,y);x.push(k.inboundNodes[S].outputTensors[N])}x.length>0&&m.apply(vn(x),b)}function u(m){const y=m.name,x=Is(m,null!=e.customObjects?e.customObjects:{});x.setFastWeightInitDuringBuild(r),a[y]=x,m.inboundNodes.forEach(w=>{if(!(w instanceof Array))throw new R(`Corrupted configuration, expected array for nodeData: ${w}`);i(x,w)})}const c=e.name,h=e.layers;for(const m of h)u(m);for(;!x$(o);)for(const m of h){const y=a[m.name];if(y.name in o){const x=o[y.name];delete o[y.name];for(const b of x)l(y,b)}}const d=[],p=[],f=e.inputLayers;for(const m of f){const y=m[0],x=m[1],b=m[2];Pn(y in a),d.push(a[y].inboundNodes[x].outputTensors[b])}const g=e.outputLayers;for(const m of g){const y=m[0],x=m[1],b=m[2];Pn(y in a),p.push(a[y].inboundNodes[x].outputTensors[b])}return new t({inputs:d,outputs:p,name:c})}get stateful(){if(this._stateful)throw new R("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){M(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}}function nx(n,t){return function tx(n,t,e){const s=t.length;if(null==n||Array.isArray(n)&&0===n.length)return t.map(r=>null);if(1===s)return Array.isArray(n)&&1===n.length?n:"object"==typeof n&&t[0]in n?[n[t[0]]]:[n];if(Array.isArray(n)){if(n.length!==s)throw new Error(`Provided ${e} is an array of ${n.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return n}if("object"==typeof n&&Object.keys(n).length>0&&"object"==typeof n[Object.keys(n)[0]]){const r=[];return t.forEach(a=>{r.push(a in n?n[a]:null)}),r}throw new Error(`The model has multiple (${s}) outputs, so ${e} must be either an array with ${s} elements or an object with ${t} keys. Provided ${e} not understood: ${JSON.stringify(n)}`)}(n,t,"classWeight")}function sx(n,t,e,s){return xp.apply(this,arguments)}function xp(){return(xp=A(function*(n,t,e,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=e){const r=M(()=>{if(1===n.shape.length)return Ir(n);if(2===n.shape.length){if(n.shape[1]>1)return Vo(n,1);if(1===n.shape[1])return P(n,[n.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${n.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${n.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),a=Array.from(yield r.data());Ge(r);const o=[];return a.forEach(i=>{if(null==e[i])throw new Error(`classWeight must contain all classes in the training data. The class ${i} exists in the data but not in classWeight`);o.push(e[i])}),kn(o,"float32")}return null})).apply(this,arguments)}function R2(n,t){return D(n,t)}function rx(n,t){let e,s;e=t.xs,s=t.ys,v(null!=e&&null!=s,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);const a=ax("input",n.inputNames,e),o=ax("output",n.outputNames,s),i=a[0].shape[0];v(a.length===n.inputs.length,()=>`LayersModel has ${n.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(n.inputNames)})`),v(o.length===n.outputs.length,()=>`LayersModel has ${n.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(n.outputNames)})`);for(let l=0;l<a.length;l++)v(a[l].shape[0]===i,()=>`Batch size mismatch: input ${n.inputNames[l]} has ${a[l].shape[0]}; expected  ${i} based on input ${n.inputNames[0]}.`);for(let l=0;l<o.length;l++)v(o[l].shape[0]===i,()=>`Batch size mismatch: output ${n.outputNames[l]} has ${o[l].shape[0]}; expected  ${i} based on input ${n.inputNames[0]}.`);return{xs:a,ys:o}}function ax(n,t,e){if(e instanceof Ot)return[e];if(Array.isArray(e))return v(e.length===t.length,()=>`Received an array of ${e.length} Tensors, but expected ${t.length} to match the ${n} keys ${t}.`),e;{const s=[];for(const r of t){if(null==e[r])throw new R(`The feature data generated by the dataset lacks the required ${n} key '${r}'.`);s.push(e[r])}return s}}function O2(n){if(3===n.length)throw new Me("Validation with sample weights is not implemented yet.");return{xs:n[0],ys:n[1]}}function bp(){return(bp=A(function*(n,t,e){const s=null!=e.batchesPerEpoch;if(v(null!=n.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),v(null!=e,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),v(null!=e.epochs&&e.epochs>0&&Number.isInteger(e.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${e.epochs}`),v(!s||e.batchesPerEpoch>0&&Number.isInteger(e.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${e.batchesPerEpoch}`),v(null==e.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),n.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");n.isTraining=!0;try{const r=null!=e.validationData;let a,o;if(r)if(ox(e.validationData))v(null==e.validationBatches||e.validationBatches>0&&Number.isInteger(e.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${e.validationBatches}`);else{const m=O2(e.validationData);a=m.xs,o=m.ys}const i=n.makeTrainFunction(),l=n.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map(m=>"val_"+m)):l.slice();const c=Uy(e.callbacks,e.yieldEvery),h=null==e.verbose?1:e.verbose,{callbackList:d,history:p}=Hy(c,h,e.epochs,null,null,L2(t,e),null,r,u);d.setModel(n),n.history=p,yield d.onTrainBegin(),n.stopTraining_=!1;let f=null==e.initialEpoch?0:e.initialEpoch,g=yield t.iterator();for(;f<e.epochs;){const m={};yield d.onEpochBegin(f);let y=0,x=0;for(s||(g=yield t.iterator());!s||y<e.batchesPerEpoch;){const b=yield g.next();if(s&&b.done){console.warn(`You provided \`batchesPerEpoch\` as ${e.batchesPerEpoch}, but your dataset iterator ran out of data after ${y} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${e.batchesPerEpoch*e.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(null!=b.value){const{xs:w,ys:I}=rx(n,b.value),S={};S.batch=x,S.size=w[0].shape[0],yield d.onBatchBegin(x,S);const N=[];if(null!=e.classWeight){const $=nx(e.classWeight,n.outputNames);for(let L=0;L<$.length;++L)N.push(yield sx(I[L],null,$[L]))}const k=w.concat(I).concat(N),_=i(k);Ge(k);for(let $=0;$<l.length;++$){const B=_[$];S[l[$]]=B,fs(B)}yield d.onBatchEnd(x,S),Gy(S),x++,y++}if(s?y>=e.batchesPerEpoch:b.done){if(r){let w;w=ox(e.validationData)?pt(yield n.evaluateDataset(e.validationData,{batches:e.validationBatches})):pt(n.evaluate(a,o,{batchSize:null==e.validationBatchSize?32:e.validationBatchSize,verbose:0}));for(let I=0;I<n.metricsNames.length;++I)m[`val_${n.metricsNames[I]}`]=w[I]}break}if(n.stopTraining_)break}if(yield d.onEpochEnd(f,m),f++,n.stopTraining_)break}return yield d.onTrainEnd(),yield n.history.syncData(),n.history}finally{n.isTraining=!1}})).apply(this,arguments)}function L2(n,t){let e=null;return null!=t.batchesPerEpoch?e=t.batchesPerEpoch:Number.isFinite(n.size)&&(e=n.size),e}function ox(n){return"function"==typeof n.iterator}function V2(n){return"function"==typeof n.next}function wp(){return(wp=A(function*(n,t,e){const s=null!=(e=e||{}).batches,r=n.testFunction;let a=[];if(e.verbose>0)throw new Me("Verbose mode is not implemented yet.");v(!s||e.batches>0&&Number.isInteger(e.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(e.batches)}`);const o=V2(t)?t:yield t.iterator();let i=0,l=0;for(;!s||l<e.batches;){const u=yield o.next();if(a=M(()=>{if(u.value){const{xs:c,ys:h}=rx(n,u.value),d=c.concat(h),p=M(()=>r(d));if(Ge(d),0===l)for(let g=0;g<p.length;++g)a.push(Pe(0));const f=d[0].shape[0];for(let g=0;g<p.length;++g){const m=p[g],y=a[g];a[g]=M(()=>re(a[g],D(f,m))),l>0&&Ge(y)}Ge(p),i+=f,++l}return a}),u.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${e.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let u=0;u<a.length;++u){const c=a[u];a[u]=Ce(a[u],i),Ge(c)}return vn(a)})).apply(this,arguments)}function vp(n){v(n>0&&Number.isInteger(n),()=>`batchSize is required to be a positive integer, but got ${n}`)}function oi(n,t,e){return null==n?[null]:Array.isArray(n)?n.map(s=>Fr(s,t,e-t)):Fr(n,t,e-t)}function Ip(n,t){return M(()=>null==n?null:Array.isArray(n)?n.map(e=>Ip(e,t)):Ty(n,"int32"===t.dtype?t:de(t,"int32")))}function Sp(n,t){const e=[];let s=0,r=null;for(;s<n;)r=s+t,r>=n&&(r=n),e.push([s,r]),s=r;return e}function ix(n){const t=[];n instanceof Ot&&(n=[n]);for(let e=0;e<n.length;++e){const s=n[e];if(1===s.rank)t.push(ei(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function is(n,t){if(null==n)return;const e=[];if(t instanceof Ot)e.push(t.id);else if(Array.isArray(t))t.forEach(r=>e.push(r.id));else if(null!=t)for(const r in t)e.push(t[r].id);const s=[];if(n instanceof Ot)-1===e.indexOf(n.id)&&s.push(n);else if(Array.isArray(n))n.forEach(r=>{-1===e.indexOf(r.id)&&s.push(r)});else if(null!=n)for(const r in n){const a=n[r];-1===e.indexOf(a.id)&&s.push(a)}s.forEach(r=>{r.isDisposed||r.dispose()})}function Cp(n){return Array.isArray(n)}function lx(n){return!function z2(n){return n instanceof Ot}(n)&&!Cp(n)}function ux(n,t,e,s=!0,r=""){if(null==t||0===t.length){if(null!=n){let o=!1;if(Cp(n)&&n.length>0)o=!0;else if(lx(n)){for(const i in n)if(n.hasOwnProperty(i)){o=!0;break}}else o=!0;if(o)throw new R(`Error when checking model ${r} expected no data, but got ${n}`)}return[]}if(null==n)return t.map(o=>null);let a;if(lx(n)){a=[];for(const o of t){if(null==n[o])throw new R(`No data provided for "${o}". Need data for each key in: ${t}`);a.push(n[o])}}else if(Cp(n)){if(n.length!==t.length)throw new R(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${n}`);a=n}else{if(t.length>1)throw new R(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${n.shape}`);a=[n]}if(a=ix(a),null!=e)for(let o=0;o<t.length;++o){if(null==e[o])continue;const i=a[o];if(i.shape.length!==e[o].length)throw new R(`Error when checking ${r}: expected ${t[o]} to have ${e[o].length} dimension(s). but got array with shape ${i.shape}`);for(let l=0;l<e[o].length;++l){if(0===l&&!s)continue;const u=i.shape[l],c=e[o][l];if(null!=c&&c>=0&&u!==c)throw new R(`${r} expected a batch of elements where each example has shape [${e[o].slice(1,e[o].length)}] (i.e.,tensor shape [*,${e[o].slice(1,e[o].length)}]) but the ${r} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1,i.shape.length)}] (tensor shape [${i.shape}])`)}}return a}function cx(n,t,e,s=!0,r=""){let a;if(Array.isArray(n)){if(n.length!==t.length)throw new R(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${n.length} Tensors(s).`);a=n}else{if(t.length>1)throw new R(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(n.shape)}.`);a=[n]}if(null!=e)for(let o=0;o<t.length;++o){if(null==e[o])continue;const i=a[o];if(i.shape.length!==e[o].length)throw new R(`Error when checking ${r}: expected ${t[o]} to have ${e[o].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let l=0;l<e[o].length;++l){if(0===l&&!s)continue;const u=i.shape[l],c=e[o][l];if(null!=c&&c!==u)throw new R(`Error when checking ${r}: expected ${t[o]} to have shape ${JSON.stringify(e[o])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}let ca=(()=>{class n extends os{constructor(e){super(e),this.isTraining=!1}summary(e,s,r=console.log){if(!this.built)throw new R("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function _2(n,t,e,s=console.log){const r=function E2(n){let t=!0;const e=[],s=[];for(const r in n.nodesByDepth)e.push(n.nodesByDepth[r]);for(const r of e){if(r.length>1||1===r.length&&r[0].inboundLayers.length>1){t=!1;break}s.push(...r)}if(t)for(const r of n.layers){let a=!1;for(const o of r.inboundNodes)if(-1!==s.indexOf(o)){if(a){t=!1;break}a=!0}if(!t)break}return t}(n),a=["Layer (type)","Input Shape","Output shape","Param #"];let o;if(r?(t=t||90,e=e||[.32,.61,.89,1]):(t=t||115,e=e||[.24,.48,.7,.8,1]),e[e.length-1]<=1&&(e=e.map(c=>Math.floor(t*c))),!r){a.push("Receives inputs"),o=[];for(const c in n.nodesByDepth)o.push(...n.nodesByDepth[c])}s("_".repeat(t)),_u(a,e,s),s("=".repeat(t));const i=n.layers;for(let c=0;c<i.length;++c)r?D2(i[c],e,s):A2(i[c],e,o,s),s((c===i.length-1?"=":"_").repeat(t));n.checkTrainableWeightsConsistency();const l=function $2(n){let t;return t=gu(null!=n.collectedTrainableWeights?n.collectedTrainableWeights:n.trainableWeights),t}(n),u=gu(n.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}(this,e,s,r)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function T2(n){const t={Adagrad:()=>oa.adagrad(.01),Adadelta:()=>oa.adadelta(1,.95,Gt()),Adam:()=>oa.adam(.001,.9,.999,Gt()),Adamax:()=>oa.adamax(.002,.9,.999,Gt(),0),RMSProp:()=>oa.rmsprop(.001,.9,0,Gt()),SGD:()=>oa.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,n in t)return t[n]();throw new R(`Unknown Optimizer ${n}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Us))throw new R("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let s=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new R(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);s=e.loss.map(l=>fp(l))}else{const i=fp(e.loss);this.outputs.forEach(l=>{s.push(i)})}else{e.loss=e.loss;for(const i in e.loss)if(-1===this.outputNames.indexOf(i))throw new R(`Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`);for(const i of this.outputNames)null==e.loss[i]&&console.warn(`Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`),s.push(fp(e.loss[i]))}this.lossFunctions=s,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let i=0;i<this.outputs.length;++i){const l=this.internalOutputShapes[i];this.feedOutputNames.push(this.outputNames[i]),this.feedOutputShapes.push(l),this.feedLossFns.push(this.lossFunctions[i])}const r=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Rr("loss",()=>{for(let i=0;i<this.outputs.length;++i){if(-1!==r.indexOf(i))continue;const l=this.lossFunctions[i];this.outputs.length>1&&(this.metricsTensors.push([l,i]),this.metricsNames.push(this.outputNames[i]+"_loss"))}});const a=function G2(n,t){if(null==n||Array.isArray(n)&&0===n.length)return t.map(s=>[]);let e;if("string"==typeof n||"function"==typeof n)e=[n];else{if(!Array.isArray(n)&&"object"!=typeof n)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${n}`);e=n}if(Array.isArray(e))return t.map(s=>e);{const s=[];for(const r of t){let a=e.hasOwnProperty(r)?e[r]:[];Array.isArray(a)||(a=[a]),s.push(a)}return s}}(e.metrics,this.outputNames),o=(i,l,u)=>{this.outputNames.length>1&&(l=this.outputNames[i]+"_"+l),this.metricsNames.push(l),this.metricsTensors.push([u,i])};Rr("metric",()=>{for(let i=0;i<this.outputs.length;++i)-1===r.indexOf(i)&&(c=>{let d,p,f;for(const g of c){if("string"==typeof g&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(g)){const y=this.internalOutputShapes[i];let x;1===y[y.length-1]||this.lossFunctions[i]===Cu?-1!==["accuracy","acc"].indexOf(g)?p=qy:-1!==["crossentropy","ce"].indexOf(g)&&(p=y2):this.lossFunctions[i]===Su?-1!==["accuracy","acc"].indexOf(g)?p=x2:-1!==["crossentropy","ce"].indexOf(g)&&(p=Zy):-1!==["accuracy","acc"].indexOf(g)?p=Ky:-1!==["crossentropy","ce"].indexOf(g)&&(p=Yy),-1!==["accuracy","acc"].indexOf(g)?x="acc":-1!==["crossentropy","ce"].indexOf(g)&&(x="ce"),f=p,d=""+x}else f=k2(g),d=""+Tu(g);let m;Rr(d,()=>{m=f}),o(i,d,m)}})(a[i])}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,s,r={}){const a=null==r.batchSize?32:r.batchSize;vp(a);const i=this.standardizeUserDataXY(e,s,!0,a);try{const l=i[0].concat(i[1]);return this.makeTestFunction(),vn(this.testLoop(this.testFunction,l,a,r.verbose,r.steps))}finally{is(i[0],e),is(i[1],s)}}evaluateDataset(e,s){var r=this;return A(function*(){return r.makeTestFunction(),function M2(n,t,e){return wp.apply(this,arguments)}(r,e,s)})()}checkNumSamples(e,s,r,a="steps"){let o;if(null!=r){if(o=null,null!=s)throw new R(`If ${a} is set, batchSize must be null or undefined.Got batchSize = ${s}`)}else{if(null==e)throw new R(`Either the input data should have a defined shape, or ${a} shoud be specified.`);o=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return o}execute(e,s){if(Array.isArray(s)&&0===s.length)throw new R("`outputs` is an empty Array, which is not allowed.");const r=Array.isArray(s),o=this.retrieveSymbolicTensors(r?s:[s]),i=new er;if(e instanceof Ot&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new R(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let u=0;u<this.inputs.length;++u)i.add(this.inputs[u],e[u])}else for(const u of this.inputs){const c=e[u.name];if(null==c)throw new R(`No value is provided for the model's input ${u.name}`);i.add(u,c)}const l=si(o,i);return r?l:l[0]}retrieveSymbolicTensors(e){const s=Er(null,e.length);let r=e.length;for(const a of this.layers){const o=Array.isArray(a.output)?a.output:[a.output],i=o.map(l=>l.name);for(let l=0;l<e.length;++l){const u=i.indexOf(e[l]);if(-1!==u&&(s[l]=o[u],r--),0===r)break}if(0===r)break}if(r>0){const a=[];throw s.forEach((o,i)=>{null==o&&a.push(e[i])}),new R(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(a)}`)}return s}predictLoop(e,s=32,r=!1){return M(()=>{const a=this.checkNumSamples(e);if(r)throw new Me("Verbose predictLoop() is not implemented yet.");const o=Sp(a,s),i=this.outputs.map(l=>[]);for(let l=0;l<o.length;++l)M(()=>{const d=oi(e,o[l][0],o[l][1]),p=[];if(Array.isArray(d))for(let g=0;g<d.length;++g)p.push({key:this.inputs[g],value:d[g]});else p.push({key:this.inputs[0],value:d});const f=new er(p);return si(this.outputs,f)}).forEach((c,h)=>i[h].push(c));return vn(i.map(l=>un(l,0)))})}predict(e,s={}){const r=ix(e);cx(r,this.inputNames,this.feedInputShapes,!1);try{const a=null==s.batchSize?32:s.batchSize;return vp(a),this.predictLoop(r,a)}finally{is(r,e)}}predictOnBatch(e){cx(e,this.inputNames,this.feedInputShapes,!0);const s=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,s)}standardizeUserDataXY(e,s,r=!0,a){if(null==this.optimizer_)throw new qn("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const o=[];for(let i=0;i<this.feedOutputShapes.length;++i){const l=this.feedOutputShapes[i];o.push(this.feedLossFns[i]===Su?l.slice(0,l.length-1).concat([1]):l)}if(function B2(n,t,e){const s=Zs(n.map(a=>a.shape[0]));s.sort();const r=Zs(t.map(a=>a.shape[0]));if(r.sort(),s.length>1)throw new R(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(n.map(a=>a.shape))}`);if(r.length>1)throw new R(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(a=>a.shape))}`);if(s.length>0&&r.length>0&&!ye(s,r))throw new R(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=ux(e,this.feedInputNames,this.feedInputShapes,!1,"input"),s=ux(s,this.feedOutputNames,o,!1,"target")),function W2(n,t,e){const s=[Iu,Cu,ai];for(let r=0;r<n.length;++r){const a=n[r],o=t[r],i=e[r];if(null!=o){if(o===ai&&1===a.shape[a.shape.length-1])throw new R(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(o)){const l=a.shape.slice(1),u=i.slice(1);for(let c=0;c<l.length;++c){const h=l[c],d=u[c];if(null!=d&&h!==d)throw new R(`A target Tensor with shape ${a.shape} was passed for an output of shape ${i}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(s,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=a&&a>0&&e[0].shape[0]%a!=0)throw new R(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${a}. Found: ${e[0].shape[0]} sample(s).`);return[e,s]}standardizeUserData(e,s,r,a,o=!0,i){var l=this;return A(function*(){const[u,c]=l.standardizeUserDataXY(e,s,o,i);if(null!=r)throw new Error("sample weight is not supported yet.");let h=null;if(null!=a){const d=nx(a,l.outputNames);h=[];for(let p=0;p<d.length;++p)h.push(yield sx(c[p],null,d[p]))}return[u,c,h]})()}testLoop(e,s,r,a=0,o){return M(()=>{const i=this.checkNumSamples(s,r,o,"steps"),l=[];if(a>0)throw new Me("Verbose mode is not implemented yet.");if(null!=o)throw new Me("steps mode in testLoop() is not implemented yet");{const u=Sp(i,r),c=kn(ss(0,i));for(let h=0;h<u.length;++h){const d=u[h][0],p=u[h][1],f=Fr(c,d,p-d),g=Ip(s,f),m=e(g);if(0===h)for(let y=0;y<m.length;++y)l.push(Pe(0));for(let y=0;y<m.length;++y)l[y]=re(l[y],D(p-d,m[y]))}for(let h=0;h<l.length;++h)l[h]=Ce(l[h],i)}return l})}getDedupedMetricsNames(){const e=this.metricsNames,s=[];for(let r=0;r<e.length;++r){const a=e[r];let o=a;gy(e,a)>1&&(o+=`_${gy(e.slice(0,r),a)}`),s.push(o)}return s}makeTrainFunction(){return e=>{const s=[],r=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),o=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),i=[],u=this.collectedTrainableWeights.map(d=>d.read());return[this.optimizer_.minimize(()=>{const d=[];for(let m=0;m<this.inputs.length;++m)d.push({key:this.inputs[m],value:r[m]});const p=new er(d),f=si(this.outputs,p,{training:!0});let g;for(let m=0;m<this.lossFunctions.length;++m){let x=(0,this.lossFunctions[m])(a[m],f[m]);null!=o[m]&&(x=R2(x,o[m]));const b=Pt(x);s.push(b),g=0===m?x:re(g,x)}for(let m=0;m<this.metricsTensors.length;++m){let y;if(this.outputs.length>1&&m<this.outputs.length)y=s[m];else{const b=this.metricsTensors[m][1];y=Pt((0,this.metricsTensors[m][0])(a[b],f[b]))}fs(y),i.push(y)}return g=Pt(g),this.calculateLosses().forEach(m=>{g=re(g,m)}),g},!0,u)].concat(i)}}makeTestFunction(){this.testFunction=e=>M(()=>{const s=[];let r;const a=e.slice(0,this.inputs.length),o=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let c=0;c<this.inputs.length;++c)i.push({key:this.inputs[c],value:a[c]});const l=new er(i),u=si(this.outputs,l);for(let c=0;c<this.lossFunctions.length;++c){const d=Pt((0,this.lossFunctions[c])(o[c],u[c]));r=0===c?d:re(r,d),s.push(r)}for(let c=0;c<this.metricsTensors.length;++c){const d=this.metricsTensors[c][1],p=Pt((0,this.metricsTensors[c][0])(o[d],u[d]));s.push(p)}return s})}fit(e,s,r={}){var a=this;return A(function*(){if(a.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let o,i,l,u,c,h,d,p,f;a.isTraining=!0;try{const g=null==r.batchSize?32:r.batchSize;vp(g);const m=!1,y=yield a.standardizeUserData(e,s,r.sampleWeight,r.classWeight,m,g);o=y[0],i=y[1],f=y[2];let b,x=!1;if(null!=r.validationData&&r.validationData.length>0){if(x=!0,2!==r.validationData.length)throw 3===r.validationData.length?new Me("validationData including sample weights is not supported yet."):new R(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);c=r.validationData[0],h=r.validationData[1];const L=!0,B=yield a.standardizeUserData(c,h,null,null,L,g);d=B[0],p=B[1],b=d.concat(p)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){x=!0;const L=Math.floor(o[0].shape[0]*(1-r.validationSplit)),B=o[0].shape[0];d=oi(o,L,B),l=o,o=oi(o,0,L),p=oi(i,L,B),u=i,i=oi(i,0,L),b=d.concat(p)}else null!=r.validationSteps&&(x=!0);const w=o.concat(i).concat(f);a.checkTrainableWeightsConsistency();const I=a.makeTrainFunction(),S=a.getDedupedMetricsNames();let N,k;x?(a.makeTestFunction(),N=a.testFunction,k=S.slice().concat(S.map(L=>"val_"+L))):(N=null,b=[],k=S.slice());const _=Uy(r.callbacks,r.yieldEvery);return yield a.fitLoop(I,w,S,g,r.epochs,r.verbose,_,N,b,r.shuffle,k,r.initialEpoch,null,null)}finally{a.isTraining=!1,is(o,e),is(i,s),is(l,e),is(u,s),is(d,c),is(p,h),null!=f&&Ge(f)}})()}fitLoop(e,s,r,a,o,i,l,u,c,h,d,p,f,g){var m=this;return A(function*(){null==a&&(a=32),null==o&&(o=1),null==h&&(h=!0),null==p&&(p=0);let y=!1;if(null!=u&&null!=c&&(y=!0),null!=g&&(y=!0,null==f))throw new R("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const x=m.checkNumSamples(s,a,f,"steps_per_epoch");let b;null!=x&&(b=ss(0,x)),null==i&&(i=1);const{callbackList:w,history:I}=Hy(l,i,o,p,x,f,a,y,d);w.setModel(m),m.history=I,yield w.onTrainBegin(),m.stopTraining_=!1;for(let S=p;S<o;++S){yield w.onEpochBegin(S);const N={};if(null!=f)throw new Me("stepsPerEpoch mode is not implemented yet.");{if("batch"===h)throw new Me("batch shuffling is not implemneted yet");h&&De(b);const k=kn(b),_=Sp(x,a);for(let $=0;$<_.length;++$){const L={};if(yield w.onBatchBegin($,L),M(()=>{const B=_[$][0],G=_[$][1],H=Fr(k,B,G-B);L.batch=$,L.size=G-B;const j=Ip(s,H),X=e(j);for(let Q=0;Q<r.length;++Q){const ee=X[Q];L[r[Q]]=ee,fs(ee)}if($===_.length-1&&y){const Q=m.testLoop(u,c,a);for(let q=0;q<r.length;++q){const ee=r[q],se=Q[q];fs(se),N["val_"+ee]=se}}}),yield w.onBatchEnd($,L),Gy(L),m.stopTraining_)break}k.dispose()}if(yield w.onEpochEnd(S,N),m.stopTraining_)break}return yield w.onTrainEnd(),yield m.history.syncData(),m.history})()}fitDataset(e,s){var r=this;return A(function*(){return function P2(n,t,e){return bp.apply(this,arguments)}(r,e,s)})()}trainOnBatch(e,s){var r=this;return A(function*(){const a=yield r.standardizeUserData(e,s),o=a[0],i=a[1],u=r.makeTrainFunction()(o.concat(i)),c=[];for(const h of u){const d=yield h.data();c.push(d[0])}return Ge(u),is(a[0],e),is(a[1],s),vn(c)})()}getNamedWeights(e){const s=[],r=null!=e&&e.trainableOnly,a=r?this.trainableWeights:this.weights,o=this.getWeights(r);for(let i=0;i<a.length;++i)r&&!a[i].trainable||s.push({name:a[i].originalName,tensor:o[i]});return s}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const s=Oh().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=s-Oh().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=Os(this.loss);else if(Array.isArray(this.loss)){for(const s of this.loss)if("string"!=typeof s)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(s=>Os(s))}else{const s=Object.keys(this.loss);e={};const r=this.loss;for(const a of s){if("string"!=typeof r[a])throw new Error("Serialization of non-string loss is not supported.");e[a]=Os(r[a])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Os(Tu(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>Os(Tu(e)));{const e={};for(const s in this.metrics)e[s]=Os(Tu(this.metrics[s]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const r=Is($u(e.optimizer_config));let a,o;if("string"==typeof e.loss)a=Dr(e.loss);else if(Array.isArray(e.loss))a=e.loss.map(i=>Dr(i));else if(null!=e.loss){a={};for(const i in e.loss)a[i]=Dr(e.loss[i])}if(Array.isArray(e.metrics))o=e.metrics.map(i=>Dr(i));else if(null!=e.metrics){o={};for(const i in e.metrics)o[i]=Dr(e.metrics[i])}this.compile({loss:a,metrics:o,optimizer:r})}save(e,s){var r=this;return A(function*(){if("string"==typeof e){const h=(n=>St.getSaveHandlers(n))(e);if(0===h.length)throw new R(`Cannot find any save handlers for URL '${e}'`);if(h.length>1)throw new R(`Found more than one (${h.length}) save handlers for URL '${e}'`);e=h[0]}if(null==e.save)throw new R("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const a=yield um(r.getNamedWeights(s)),u={modelTopology:r.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v4.2.0",convertedBy:null};if(null!=s&&s.includeOptimizer&&null!=r.optimizer){u.trainingConfig=r.getTrainingConfig();const h="optimizer",{data:d,specs:p}=yield um(yield r.optimizer.getWeights(),h);a.specs.push(...p),a.data=Ch([a.data,d])}return null!=r.userDefinedMetadata&&(Qy(r.userDefinedMetadata,r.name,!0),u.userDefinedMetadata=r.userDefinedMetadata),u.weightData=a.data,u.weightSpecs=a.specs,e.save(u)})()}setUserDefinedMetadata(e){Qy(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}return n.className="Model",n})();function kp(){return(kp=A(function*(n,t){if(null==t&&(t={}),"string"==typeof n){const e=Hv(n,t);if(0===e.length)e.push(F1(n,t));else if(e.length>1)throw new R(`Found more than one (${e.length}) load handlers for URL '${n}'`);n=e[0]}return j2(n,void 0,t)})).apply(this,arguments)}function j2(n,t,e){return Tp.apply(this,arguments)}function Tp(){return(Tp=A(function*(n,t,e){if(null==e&&(e={}),null==n.load)throw new R("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const s=yield n.load();let r=s.modelTopology;null!=r.model_config&&(r=r.model_config);const a=null==e.strict||e.strict,o=null!=s.weightData&&null!=s.weightSpecs&&a,i=Is($u(r),t,o),l=s.trainingConfig;if(null!=l&&i.loadTrainingConfig(l),null!=s.userDefinedMetadata&&i.setUserDefinedMetadata(s.userDefinedMetadata),null!=s.weightData){if(null==s.weightSpecs)throw new R("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:u,optimizerWeights:c}=q2(s.weightData,s.weightSpecs);i.loadWeights(u,a),null!=i.optimizer&&c.length>0&&(yield i.optimizer.setWeights(c)),Ge(u),Ge(c.map(h=>h.tensor))}return i})).apply(this,arguments)}function q2(n,t){const e=function cm(n,t){const e={};let s,r=0;for(const a of t){const o=a.name,i=a.dtype,l=a.shape,u=E(l);let c;if("quantization"in a){const h=a.quantization;if("uint8"===h.dtype||"uint16"===h.dtype){if(!("min"in h)||!("scale"in h))throw new Error(`Weight ${a.name} with quantization ${h.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==h.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${h.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${h.dtype} which only supports weights of type float32 not ${i}.`)}const d=vh[h.dtype],p=n.slice(r,r+u*d),f="uint8"===h.dtype?new Uint8Array(p):new Uint16Array(p);if("float32"===i)if("uint8"===h.dtype||"uint16"===h.dtype){c=new Float32Array(f.length);for(let g=0;g<f.length;g++)c[g]=f[g]*h.scale+h.min}else{if("float16"!==h.dtype)throw new Error(`Unsupported quantization type ${h.dtype} for weight type float32.`);void 0===s&&(s=Gv()),c=s(f)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${o}': ${i}`);if("uint8"!==h.dtype&&"uint16"!==h.dtype)throw new Error(`Unsupported quantization type ${h.dtype} for weight type int32.`);c=new Int32Array(f.length);for(let g=0;g<f.length;g++)c[g]=Math.round(f[g]*h.scale+h.min)}r+=u*d}else if("string"===i){const h=E(a.shape);c=[];for(let d=0;d<h;d++){const p=new Uint32Array(n.slice(r,r+4))[0];r+=4;const f=new Uint8Array(n.slice(r,r+p));c.push(f),r+=p}}else{const h=vh[i],d=n.slice(r,r+u*h);if("float32"===i)c=new Float32Array(d);else if("int32"===i)c=new Int32Array(d);else if("bool"===i)c=new Uint8Array(d);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${o}': ${i}`);{c=new Float32Array(d);const p=new Float32Array(c.length/2),f=new Float32Array(c.length/2);for(let y=0;y<p.length;y++)p[y]=c[2*y],f[y]=c[2*y+1];const g=Po(p,l,"float32"),m=Po(f,l,"float32");e[o]=br(g,m),g.dispose(),m.dispose()}}r+=u*h}"complex64"!==i&&(e[o]=Po(c,l,i))}return e}(n,t),s={},r=[];return t.forEach(a=>{"optimizer"===a.group?r.push({name:a.name,tensor:e[a.name]}):s[a.name]=e[a.name]}),{modelWeights:s,optimizerWeights:r}}ne(ca),ne((()=>{class n extends ca{}return n.className="Functional",n})()),ne((()=>{class n extends ca{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:hu("sequential_"),null!=e.layers)for(const s of e.layers)this.add(s)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(r=>r<0))throw new R(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const s=e instanceof n||e instanceof ca;let r;if(s){if(r=e,1!==r.outputs.length)throw new R("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==r.inputs.length)throw new R("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new R("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const a=function K$(n){if(null==n.batchShape&&null==n.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=n.batchShape&&null!=n.shape)throw new R("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=n.batchShape;null!=n.shape&&null==t&&(t=[null].concat(n.shape));let e=n.dtype;return null==e&&(e="float32"),new xu({batchInputShape:t,name:n.name,dtype:e,sparse:n.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(a)}if(s)this.outputs=r.outputs,this.inputs=r.inputs;else{if(1!==e.inboundNodes.length)throw new R(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new R("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=My(this.outputs[0])}this.inboundNodes=[],new yu({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Er(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(a=>a.shape),outputShapes:this.outputs[0].shape})}else{const a=e.apply(this.outputs[0]);if(Array.isArray(a))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[a],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,s){return null==this.model&&this.build(),this.model.call(e,s)}build(e){if(nt(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new ca({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,s,r=console.log){this.built||this.build(),super.summary(e,s,r)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,s,r={}){if(!this.built)throw new qn("The model needs to be compiled before being used.");return this.model.evaluate(e,s,r)}evaluateDataset(e,s){var r=this;return A(function*(){if(!r.built)throw new qn("The model needs to be compiled before being used.");return r.model.evaluateDataset(e,s)})()}predict(e,s={}){return null==this.model&&this.build(),this.model.predict(e,s)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}fit(e,s,r={}){var a=this;return A(function*(){if(!a.built)throw new qn("The model needs to be compiled before being used.");return a.model.fit(e,s,r)})()}fitDataset(e,s){var r=this;return A(function*(){if(!r.built)throw new qn("The model needs to be compiled before being used.");return r.model.fitDataset(e,s)})()}trainOnBatch(e,s){var r=this;return A(function*(){return r.model.trainOnBatch(e,s)})()}static fromConfig(e,s,r={},a=!1){let o,i={};if(s instanceof Array){if(null==s[0].className||"Merge"===s[0].className)throw new R("Legacy serialization format not supported yet.");o=s}else v(null!=s.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),o=s.layers,delete s.layers,i=s;const l=new e(i);if(!(l instanceof n))throw new Me(`Sequential.fromConfig called on non-Sequential input: ${l}`);for(const u of o){const h=Is(u,void 0,a);a&&h.setFastWeightInitDuringBuild(!0),l.add(h)}return l}set stopTraining(e){if(null==this.model)throw new R("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new R("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const s of this.layers){const r={};r.className=s.getClassName(),r.config=s.getConfig(),e.push(r)}return{name:this.name,layers:e}}}return n.className="Sequential",n})());class In extends Qr{getConfig(){return{}}}ne((()=>{class n extends In{apply(e,s=1){return function O$(n,t=1){if(1!==t)throw new Me(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return jl(n)}(e,s)}}return n.className="elu",n})()),ne((()=>{class n extends In{apply(e){return sg(e)}}return n.className="selu",n})()),ne((()=>{class n extends In{apply(e){return Ds(e)}}return n.className="relu",n})()),ne((()=>{class n extends In{apply(e){return M(()=>Xl(6,Ds(e)))}}return n.className="relu6",n})()),ne((()=>{class n extends In{apply(e){return e}}return n.className="linear",n})()),ne((()=>{class n extends In{apply(e){return sa(e)}}return n.className="sigmoid",n})()),ne((()=>{class n extends In{apply(e){return function L$(n){return M(()=>{const t=re(.5,D(.2,n));return Rn(t,0,1)})}(e)}}return n.className="hardSigmoid",n})()),ne((()=>{class n extends In{apply(e){return Ho(e)}}return n.className="softplus",n})()),ne((()=>{class n extends In{apply(e){return function P$(n){return M(()=>Ce(n,re(Xt(n),1)))}(e)}}return n.className="softsign",n})()),ne((()=>{class n extends In{apply(e){return fd(e)}}return n.className="tanh",n})());let hx=(()=>{class n extends In{apply(e,s=-1){return pd(e,s)}}return n.className="softmax",n})();function nr(n){return n.getClassName()}function _p(n,t={}){return Jo(n,Bn.getMap().classNameMap,t,"activation")}function sr(n){if(null==n){return _p({className:"linear",config:{}})}if("string"==typeof n){const t={};return t.className=n,t.config={},_p(t)}return n instanceof In?n:_p(n)}ne(hx),ne((()=>{class n extends In{apply(e,s=-1){return eg(e,s)}}return n.className="logSoftmax",n})()),ne((()=>{class n extends In{apply(e,s=1){return M(()=>D(sa(D(e,s)),e))}}return n.className="swish",n})()),ne((()=>{class n extends In{apply(e){return M(()=>D(e,fd(Ho(e))))}}return n.className="mish",n})());class dx extends Qr{}ne((()=>{class n extends dx{constructor(e){super(),function $p(n){if(null!=n&&"object"!=typeof n)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${n}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return M(()=>{let s=Jt([1]);return this.hasL1&&(s=re(s,be(D(this.l1,Xt(e))))),this.hasL2&&(s=re(s,be(D(this.l2,ti(e))))),P(s,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,s){return new e({l1:s.l1,l2:s.l2})}}return n.className="L1L2",n})());const px={l1l2:"L1L2"};function ct(n){return ep(n)}function fx(n,t={}){return Jo(n,Bn.getMap().classNameMap,t,"regularizer")}function bt(n){return null==n?null:"string"==typeof n?fx({className:n in px?px[n]:n,config:{}}):n instanceof dx?n:fx(n)}function ha(n,t,e){if("number"==typeof n)return Er(n,t);if(n.length!==t)throw new R(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${n.length} elements.`);for(let s=0;s<t;++s){const r=n[s];if(!$$(r))throw new R(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(n)} including a non-integer number ${r}`)}return n}function ls(n,t,e,s,r=1){if(null==n)return n;let o;return o="same"===e?n:n-(t+(t-1)*(r-1))+1,Math.floor((o+s-1)/s)}function Ss(n,t,e,s){if(null==n)return null;if("valid"===s)n=n*t+Qs([e-t,0]);else{if("same"!==s)throw new R(`Unsupport padding mode: ${s}.`);n*=t}return n}function Dp(n,t){return M(()=>(Mt(t),"channelsFirst"===t?Ze(n,[0,2,3,1]):n))}function mx(n,t){return M(()=>(Mt(t),"channelsFirst"===t?Ze(n,[0,2,3,4,1]):n))}function Ap(n,t,e,s=[1,1],r="valid",a,o,i=null){return M(()=>{if(null==a&&(a="channelsLast"),Mt(a),3!==n.rank&&4!==n.rank)throw new R(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${n.rank}.`);if(3!==t.rank&&4!==t.rank)throw new R(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${n.rank}.`);let l=Dp(n,a);if("causal"===r)throw new Me("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=QS({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:o,dataFormat:"NHWC",bias:e,activation:i}),"channelsFirst"===a&&(l=Ze(l,[0,3,1,2])),l})}ne((()=>{class n extends je{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,s){e=Fe(e);let r=Ds(e);return null!=this.maxValue&&(r=Rn(r,0,this.maxValue)),r}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ReLU",n})()),ne((()=>{class n extends je{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,s){const r=Fe(e);return td(r,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},s=super.getConfig();return Object.assign(e,s),e}}return n.className="LeakyReLU",n})()),ne((()=>{class n extends je{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=xt(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=bt(e.alphaRegularizer),this.alphaConstraint=jt(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new R(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const s=(e=nt(e)).slice(1);if(null!=this.sharedAxes)for(const a of this.sharedAxes)s[a-1]=1;this.alpha=this.addWeight("alpha",s,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const r={};if(null!=this.sharedAxes)for(let a=1;a<e.length;++a)r[a]=e[a];this.inputSpec=[new Ut({ndim:e.length,axes:r})],this.built=!0}call(e,s){return e=Fe(e),id(e,this.alpha.read())}getConfig(){const e={alphaInitializer:kt(this.alphaInitializer),alphaRegularizer:ct(this.alphaRegularizer),alphaConstraint:Ht(this.alphaConstraint),sharedAxes:this.sharedAxes},s=super.getConfig();return Object.assign(e,s),e}}return n.className="PReLU",n})()),ne((()=>{class n extends je{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Me(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,s){const r=Fe(e);return jl(r)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ELU",n})()),ne((()=>{class n extends je{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,s){const r=Fe(e);return D(r,de(Fn(r,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ThresholdedReLU",n})()),ne((()=>{class n extends je{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new hx).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,s){const r=Fe(e);return this.softmax(r,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Softmax",n})());class Eu extends je{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Eu.verifyArgs(e),this.rank=t,Qt(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Me(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=ha(e.kernelSize,t,"kernelSize"),this.strides=ha(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,Ln(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Mt(this.dataFormat),this.activation=sr(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=xt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=jt(e.biasConstraint),this.biasRegularizer=bt(e.biasRegularizer),this.activityRegularizer=bt(e.activityRegularizer),this.dilationRate=ha(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new R(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new R(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new R(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(t){if(Pn("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!np(t.kernelSize,"number",1,3))throw new R(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:nr(this.activation),useBias:this.useBias,biasInitializer:kt(this.biasInitializer),biasRegularizer:ct(this.biasRegularizer),activityRegularizer:ct(this.activityRegularizer),biasConstraint:Ht(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class da extends Eu{constructor(t,e){super(t,e),this.kernel=null,da.verifyArgs(e),this.filters=e.filters,Qt(this.filters,"filters"),this.kernelInitializer=xt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=jt(e.kernelConstraint),this.kernelRegularizer=bt(e.kernelRegularizer)}build(t){t=nt(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new R(`The channel dimension of the input should be defined. Found ${t[e]}`);const s=t[e],r=this.kernelSize.concat([s,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:s}}],this.built=!0}call(t,e){return M(()=>{let s;t=Fe(t);const r=null==this.bias?null:this.bias.read(),a=xy(this.activation.getClassName());if(null!=a&&2===this.rank)s=Ap(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate,a);else{if(1===this.rank)s=function gx(n,t,e,s=1,r="valid",a,o=1){return M(()=>{if(null==a&&(a="channelsLast"),Mt(a),3!==n.shape.length)throw new R(`The input of a conv1dWithBias operation should be 3, but is ${n.shape.length} instead.`);if(3!==t.shape.length)throw new R(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=e&&1!==e.shape.length)throw new R(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(n=Ze(n,[0,2,1])),"causal"===r)throw new Me("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let i=Xm(n,t,s,"same"===r?"same":"valid","NWC",o);return null!=e&&(i=as(i,e)),i})}(t,this.kernel.read(),r,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)s=Ap(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Me("convolutions greater than 3D are not implemented yet.");s=function yx(n,t,e,s=[1,1,1],r="valid",a,o){return M(()=>{if(null==a&&(a="channelsLast"),Mt(a),4!==n.rank&&5!==n.rank)throw new R(`conv3dWithBias expects input to be of rank 4 or 5, but received ${n.rank}.`);if(4!==t.rank&&5!==t.rank)throw new R(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${n.rank}.`);let i=mx(n,a);if("causal"===r)throw new Me("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return i=$I(i,t,s,"same"===r?"same":"valid","NDHWC",o),null!=e&&(i=as(i,e)),"channelsFirst"===a&&(i=Ze(i,[0,4,1,2,3])),i})}(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(s=this.activation.apply(s))}return s})}computeOutputShape(t){t=nt(t);const e=[],s="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let a=0;a<s.length;++a){const o=ls(s[a],this.kernelSize[a],this.padding,this.strides[a],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[a]);e.push(o)}let r=[t[0]];return"channelsLast"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const t={filters:this.filters,kernelInitializer:kt(this.kernelInitializer),kernelRegularizer:ct(this.kernelRegularizer),kernelConstraint:Ht(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new R(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`)}}let xx=(()=>{class n extends da{constructor(e){super(2,e),n.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!np(e.kernelSize,"number",1,2))throw new R(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv2D",n})();ne(xx);let bx=(()=>{class n extends da{constructor(e){super(3,e),n.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new R(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv3D",n})();ne(bx),ne((()=>{class n extends xx{constructor(e){if(super(e),this.inputSpec=[new Ut({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new R(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=nt(e)).length)throw new R("Input should have rank 4; Received input shape: "+JSON.stringify(e));const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s])throw new R("The channel dimension of the inputs should be defined. Found `None`.");const r=e[s],a=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",a,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Ut({ndim:4,axes:{[s]:r}})],this.built=!0}call(e,s){return M(()=>{let r=Fe(e);if(4!==r.shape.length)throw new R(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const a=r.shape;let i,l;"channelsFirst"===this.dataFormat?(i=2,l=3):(i=1,l=2);const c=a[l],d=this.kernelSize[1],f=this.strides[1],y=[a[0],Ss(a[i],this.strides[0],this.kernelSize[0],this.padding),Ss(c,f,d,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(r=Ze(r,[0,2,3,1]));let x=Ym(r,this.kernel.read(),y,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(x=Ze(x,[0,3,1,2])),null!=this.bias&&(x=as(x,this.bias.read(),this.dataFormat)),null!=this.activation&&(x=this.activation.apply(x)),x})}computeOutputShape(e){const s=(e=nt(e)).slice();let r,a,o;"channelsFirst"===this.dataFormat?(r=1,a=2,o=3):(r=3,a=1,o=2);const i=this.kernelSize[0],l=this.kernelSize[1],u=this.strides[0],c=this.strides[1];return s[r]=this.filters,s[a]=Ss(s[a],u,i,this.padding),s[o]=Ss(s[o],c,l,this.padding),s}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}return n.className="Conv2DTranspose",n})()),ne((()=>{class n extends bx{constructor(e){if(super(e),this.inputSpec=[new Ut({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new R(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=nt(e)).length)throw new R("Input should have rank 5; Received input shape: "+JSON.stringify(e));const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s])throw new R("The channel dimension of the inputs should be defined. Found `None`.");const r=e[s],a=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",a,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Ut({ndim:5,axes:{[s]:r}})],this.built=!0}call(e,s){return M(()=>{let r=Fe(e);if(5!==r.shape.length)throw new R(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const a=r.shape;let i,l,u;"channelsFirst"===this.dataFormat?(u=2,i=3,l=4):(u=1,i=2,l=3);const h=a[i],d=a[l],f=this.kernelSize[1],g=this.kernelSize[2],y=this.strides[1],x=this.strides[2],S=[a[0],Ss(a[u],this.strides[0],this.kernelSize[0],this.padding),Ss(h,y,f,this.padding),Ss(d,x,g,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(r=Ze(r,[0,2,3,4,1]));let N=AI(r,this.kernel.read(),S,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(N=Ze(N,[0,4,1,2,3])),null!==this.bias&&(N=as(N,this.bias.read(),this.dataFormat)),null!==this.activation&&(N=this.activation.apply(N)),N})}computeOutputShape(e){const s=(e=nt(e)).slice();let r,a,o,i;"channelsFirst"===this.dataFormat?(r=1,a=2,o=3,i=4):(r=4,a=1,o=2,i=3);const l=this.kernelSize[0],u=this.kernelSize[1],c=this.kernelSize[2],h=this.strides[0],d=this.strides[1],p=this.strides[2];return s[r]=this.filters,s[a]=Ss(s[a],h,l,this.padding),s[o]=Ss(s[o],d,u,this.padding),s[i]=Ss(s[i],p,c,this.padding),s}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}return n.className="Conv3DTranspose",n})());let K2=(()=>{class n extends da{constructor(e,s){if(super(e,s),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==s.filters)throw new R("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=s.kernelInitializer||null!=s.kernelRegularizer||null!=s.kernelConstraint)throw new R("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=s.padding&&"same"!==s.padding&&"valid"!==s.padding)throw new R(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(s.padding)}`);this.depthMultiplier=null==s.depthMultiplier?1:s.depthMultiplier,this.depthwiseInitializer=xt(s.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=bt(s.depthwiseRegularizer),this.depthwiseConstraint=jt(s.depthwiseConstraint),this.pointwiseInitializer=xt(s.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=bt(s.pointwiseRegularizer),this.pointwiseConstraint=jt(s.pointwiseConstraint)}build(e){if((e=nt(e)).length<this.rank+2)throw new R(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s]||e[s]<0)throw new R(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[s])}`);const r=e[s],a=this.kernelSize.concat([r,this.depthMultiplier]),o=[];for(let l=0;l<this.rank;++l)o.push(1);o.push(r*this.depthMultiplier,this.filters);const i=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",a,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,i,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",o,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,i,this.pointwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,i,this.biasConstraint):null,this.inputSpec=[new Ut({ndim:this.rank+2,axes:{[s]:r}})],this.built=!0}call(e,s){return M(()=>{let r;if(e=Fe(e),1===this.rank)throw new Me("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Ze(e,[0,2,3,1])),r=rg(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(r=as(r,this.bias.read(),this.dataFormat)),null!=this.activation&&(r=this.activation.apply(r)),"channelsFirst"===this.dataFormat&&(r=Ze(r,[0,3,1,2])),r})}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=kt(this.depthwiseInitializer),e.pointwiseInitializer=kt(this.pointwiseInitializer),e.depthwiseRegularizer=ct(this.depthwiseRegularizer),e.pointwiseRegularizer=ct(this.pointwiseRegularizer),e.depthwiseConstraint=Ht(this.depthwiseConstraint),e.pointwiseConstraint=Ht(this.pointwiseConstraint),e}}return n.className="SeparableConv",n})();function wx(n,t,e,s){if(Array.isArray(n)){if(null!=t||null!=e)throw new R("When inputs is an array, neither initialState or constants should be provided");null!=s&&(e=n.slice(n.length-s,n.length),n=n.slice(0,n.length-s)),n.length>1&&(t=n.slice(1,n.length)),n=n[0]}function r(a){return null==a||Array.isArray(a)?a:[a]}return{inputs:n,initialState:t=r(t),constants:e=r(e)}}function vx(n,t,e,s=!1,r,a,o=!1,i=!1){return M(()=>{const l=t.shape.length;if(l<3)throw new R(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(ss(2,l));if(t=Ze(t,u),null!=a)throw new Me("The rnn() functoin of the deeplearn.js backend does not support constants yet.");o&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=de(de(r,"bool"),"float32")).rank===l-1&&(r=Nn(r,-1)),r=Ze(r,u)),s&&(t=Tr(t,0),null!=r&&(r=Tr(r,0)));const c=[];let h,d=e;const p=t.shape[0],f=_r(t);let g,m;null!=r&&(g=_r(r));for(let y=0;y<p;++y){const x=f[y],b=M(()=>n(x,d));if(null==r)h=b[0],d=b[1];else{const w=M(()=>{const I=g[y],S=xe(Hn(I),I);return{output:re(D(b[0],I),D(d[0],S)),newStates:d.map((_,$)=>re(D(b[1][$],I),D(_,S)))}});h=w.output,d=w.newStates}i&&c.push(h)}return i&&(m=As(c,1)),[h,m,d]})}ne((()=>{class n extends K2{constructor(e){super(2,e)}}return n.className="SeparableConv2D",n})()),ne((()=>{class n extends da{constructor(e){super(1,e),n.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!np(e.kernelSize,"number",1,1))throw new R(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv1D",n})()),ne((()=>{class n extends je{constructor(e){super(e),this.cropping="number"==typeof e.cropping?[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,s){return M(()=>{if(e=Fe(e),"channelsLast"===this.dataFormat){const r=pu(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return pu(r,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const r=pu(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return pu(r,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Cropping2D",n})()),ne((()=>{class n extends je{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Mt(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,function k$(n){Ar(I$,"InterpolationFormat",n)}(this.interpolation)}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],null==e[2]?null:this.size[0]*e[2],null==e[3]?null:this.size[1]*e[3]]:[e[0],null==e[1]?null:this.size[0]*e[1],null==e[2]?null:this.size[1]*e[2],e[3]]}call(e,s){return M(()=>{let r=Fe(e);const a=r.shape;if("channelsFirst"===this.dataFormat){r=Ze(r,[0,2,3,1]);const o=this.size[0]*a[2],i=this.size[1]*a[3],l="nearest"===this.interpolation?Ys.resizeNearestNeighbor(r,[o,i]):Ys.resizeBilinear(r,[o,i]);return Ze(l,[0,3,1,2])}{const o=this.size[0]*a[1],i=this.size[1]*a[2];return"nearest"===this.interpolation?Ys.resizeNearestNeighbor(r,[o,i]):Ys.resizeBilinear(r,[o,i])}})}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},s=super.getConfig();return Object.assign(e,s),e}}return n.className="UpSampling2D",n})()),ne((()=>{class n extends Eu{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=xt(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=jt(e.depthwiseConstraint),this.depthwiseRegularizer=bt(e.depthwiseRegularizer)}build(e){if((e=nt(e)).length<4)throw new R(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const s="channelsFirst"===this.dataFormat?1:3;if(null==e[s]||e[s]<0)throw new R(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[s]}).`);const r=e[s];this.depthwiseKernel=this.addWeight("depthwise_kernel",[this.kernelSize[0],this.kernelSize[1],r,this.depthMultiplier],null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[r*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return M(()=>{let r=function X2(n,t,e=[1,1],s="valid",r,a){return M(()=>{null==r&&(r="channelsLast"),Mt(r);let o=Dp(n,r);if(4!==n.rank)throw new R(`Input for depthwiseConv2d is required to be 4-D, but is instead ${n.rank}-D`);if(4!==t.rank)throw new R(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return o=Hl(o,t,e,"same"===s?"same":"valid","NHWC",a),"channelsFirst"===r&&(o=Ze(o,[0,3,1,2])),o})}(e=Fe(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(r=as(r,this.bias.read(),this.dataFormat)),null!=this.activation&&(r=this.activation.apply(r)),r})}computeOutputShape(e){e=nt(e);const r="channelsFirst"===this.dataFormat?e[3]:e[2],a="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,o=ls("channelsFirst"===this.dataFormat?e[2]:e[1],this.kernelSize[0],this.padding,this.strides[0]),i=ls(r,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],a,o,i]:[e[0],o,i,a]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=kt(this.depthwiseInitializer),e.depthwiseRegularizer=ct(this.depthwiseRegularizer),e.depthwiseConstraint=Ht(this.depthwiseRegularizer),e}}return n.className="DepthwiseConv2D",n})());let ii=(()=>{class n extends je{constructor(e){let s;if(super(e),null==e.cell)throw new R("cell property is missing for the constructor of RNN.");if(s=Array.isArray(e.cell)?new Cx({cells:e.cell}):e.cell,null==s.stateSize)throw new R("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=s,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new Ut({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?ss(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(s=>null):this.states_}setStates(e){this.states_=e}computeOutputShape(e){ip(e)&&(e=e[0]);let s=this.cell.stateSize;Array.isArray(s)||(s=[s]);const r=s[0];let a;if(a=this.returnSequences?[e[0],e[1],r]:[e[0],r],this.returnState){const o=[];for(const i of s)o.push([e[0],i]);return[a].concat(o)}return a}computeMask(e,s){return M(()=>{Array.isArray(s)&&(s=s[0]);const r=this.returnSequences?s:null;if(this.returnState){const a=this.states.map(o=>null);return[r].concat(a)}return r})}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,s=[];for(let r=0;r<e;++r)s.push(null);return s}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new Me("Constants support is not implemented in RNN yet.");ip(e)&&(e=e[0]);const r=this.stateful?e[0]:null,a=e.slice(2);this.inputSpec[0]=new Ut({shape:[r,null,...a]});const o=[e[0]].concat(e.slice(2));let i;if(this.cell.build(o),i=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!ye(this.stateSpec.map(l=>l.shape[l.shape.length-1]),i))throw new R(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=i.map(l=>new Ut({shape:[null,l]}));this.stateful&&this.resetStates()}resetStates(e,s=!1){M(()=>{if(!this.stateful)throw new ys("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape[0];if(null==r)throw new R("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(a=>Jt([r,a])):[Jt([r,this.cell.stateSize])];else if(null==e)Ge(this.states_),null!=this.keptStates&&(Ge(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(a=>Jt([r,a])):this.states_[0]=Jt([r,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new R(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===s?this.keptStates.push(this.states_.slice()):Ge(this.states_);for(let a=0;a<this.states_.length;++a){const o=e[a],i=Array.isArray(this.cell.stateSize)?this.cell.stateSize[a]:this.cell.stateSize,l=[r,i];if(!ye(o.shape,l))throw new R(`State ${a} is incompatible with layer ${this.name}: expected shape=${l}, received shape=${o.shape}`);this.states_[a]=o}}this.states_=this.states_.map(a=>fs(a.clone()))})}apply(e,s){let r=null==s?null:s.initialState,a=null==s?null:s.constants;null==s&&(s={});const o=wx(e,r,a,this.numConstants);e=o.inputs,r=o.initialState,a=o.constants;let i=[],l=[];if(null!=r){s.initialState=r,i=i.concat(r),this.stateSpec=[];for(const c of r)this.stateSpec.push(new Ut({shape:c.shape}));l=l.concat(this.stateSpec)}if(null!=a&&(s.constants=a,i=i.concat(a),this.numConstants=a.length),i[0]instanceof vs){const c=[e].concat(i),h=this.inputSpec.concat(l),d=this.inputSpec;this.inputSpec=h;const p=super.apply(c,s);return this.inputSpec=d,p}return super.apply(e,s)}call(e,s){return M(()=>{const r=null==s?null:s.mask,a=null==s?null:s.training;let o=null==s?null:s.initialState;e=Fe(e),null==o&&(o=this.stateful?this.states_:this.getInitialState(e));const i=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(o.length!==i)throw new R(`RNN Layer has ${i} state(s) but was passed ${o.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const l={training:a},c=vx((g,m)=>{const y=this.cell.call([g].concat(m),l);return[y[0],y.slice(1)]},e,o,this.goBackwards,r,null,this.unroll,this.returnSequences),h=c[0],d=c[1],p=c[2];this.stateful&&this.resetStates(p,a);const f=this.returnSequences?d:h;return this.returnState?[f].concat(p):f})}getInitialState(e){return M(()=>{let s=Jt(e.shape);return s=be(s,[1,2]),s=ei(s),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(r=>r>1?ap(s,[1,r]):s):this.cell.stateSize>1?[ap(s,[1,this.cell.stateSize])]:[s]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),s={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(s.numConstants=this.numConstants);const r=this.cell.getConfig();return this.getClassName()===n.className&&(s.cell={className:this.cell.getClassName(),config:r}),Object.assign(Object.assign(Object.assign({},r),e),s)}static fromConfig(e,s,r={}){const o=Is(s.cell,r);return new e(Object.assign(s,{cell:o}))}}return n.className="RNN",n})();ne(ii);class Du extends je{}let Ix=(()=>{class n extends Du{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Qt(this.units,"units"),this.activation=sr(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=xt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=xt(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=xt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=bt(e.kernelRegularizer),this.recurrentRegularizer=bt(e.recurrentRegularizer),this.biasRegularizer=bt(e.biasRegularizer),this.kernelConstraint=jt(e.kernelConstraint),this.recurrentConstraint=jt(e.recurrentConstraint),this.biasConstraint=jt(e.biasConstraint),this.dropout=la([1,Qs([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=la([1,Qs([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=nt(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return M(()=>{if(2!==e.length)throw new R(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let r=e[1];e=e[0];const a=null!=s.training&&s.training;let o;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=rr({ones:()=>Hn(e),rate:this.dropout,training:a,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=rr({ones:()=>Hn(r),rate:this.recurrentDropout,training:a,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,l=this.recurrentDropoutMask;o=bs(null!=i?D(e,i):e,this.kernel.read()),null!=this.bias&&(o=as(o,this.bias.read())),null!=l&&(r=D(r,l));let u=re(o,bs(r,this.recurrentKernel.read()));return null!=this.activation&&(u=this.activation.apply(u)),[u,u]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:nr(this.activation),useBias:this.useBias,kernelInitializer:kt(this.kernelInitializer),recurrentInitializer:kt(this.recurrentInitializer),biasInitializer:kt(this.biasInitializer),kernelRegularizer:ct(this.kernelRegularizer),recurrentRegularizer:ct(this.recurrentRegularizer),biasRegularizer:ct(this.biasRegularizer),activityRegularizer:ct(this.activityRegularizer),kernelConstraint:Ht(this.kernelConstraint),recurrentConstraint:Ht(this.recurrentConstraint),biasConstraint:Ht(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),s)}}return n.className="SimpleRNNCell",n})();ne(Ix),ne((()=>{class n extends ii{constructor(e){e.cell=new Ix(e),super(e)}call(e,s){return M(()=>(null!=this.cell.dropoutMask&&(Ge(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ge(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return new e(s)}}return n.className="SimpleRNN",n})());let Sx=(()=>{class n extends Du{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new R("GRUCell does not support reset_after parameter set to true.");this.units=e.units,Qt(this.units,"units"),this.activation=sr(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=sr(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=xt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=xt(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=xt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=bt(e.kernelRegularizer),this.recurrentRegularizer=bt(e.recurrentRegularizer),this.biasRegularizer=bt(e.biasRegularizer),this.kernelConstraint=jt(e.kernelConstraint),this.recurrentConstraint=jt(e.recurrentConstraint),this.biasConstraint=jt(e.biasConstraint),this.dropout=la([1,Qs([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=la([1,Qs([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=nt(e),this.kernel=this.addWeight("kernel",[e[e.length-1],3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return M(()=>{if(2!==e.length)throw new R(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const r=null!=s.training&&s.training;let a=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=rr({ones:()=>Hn(e),rate:this.dropout,training:r,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=rr({ones:()=>Hn(a),rate:this.recurrentDropout,training:r,count:3,dropoutFunc:this.dropoutFunc}));const i=this.recurrentDropoutMask;let l,u,c;0<this.dropout&&this.dropout<1&&(e=D(e,this.dropoutMask[0]));let h=bs(e,this.kernel.read());this.useBias&&(h=as(h,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(a=D(a,i[0]));const d=this.recurrentKernel.read(),[p,f]=On(d,[2*this.units,this.units],d.rank-1),g=bs(a,p),[m,y,x]=On(h,3,h.rank-1),[b,w]=On(g,2,g.rank-1);l=this.recurrentActivation.apply(re(m,b)),u=this.recurrentActivation.apply(re(y,w));const I=bs(D(u,a),f);c=this.activation.apply(re(x,I));const S=re(D(l,a),D(re(1,Nt(l)),c));return[S,S]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:nr(this.activation),recurrentActivation:nr(this.recurrentActivation),useBias:this.useBias,kernelInitializer:kt(this.kernelInitializer),recurrentInitializer:kt(this.recurrentInitializer),biasInitializer:kt(this.biasInitializer),kernelRegularizer:ct(this.kernelRegularizer),recurrentRegularizer:ct(this.recurrentRegularizer),biasRegularizer:ct(this.biasRegularizer),activityRegularizer:ct(this.activityRegularizer),kernelConstraint:Ht(this.kernelConstraint),recurrentConstraint:Ht(this.recurrentConstraint),biasConstraint:Ht(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),s)}}return n.className="GRUCell",n})();ne(Sx),ne((()=>{class n extends ii{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Sx(e),super(e)}call(e,s){return M(()=>(null!=this.cell.dropoutMask&&(Ge(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ge(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return 0===s.implmentation&&(s.implementation=1),new e(s)}}return n.className="GRU",n})());let Rp=(()=>{class n extends Du{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Qt(this.units,"units"),this.activation=sr(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=sr(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=xt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=xt(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=xt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=bt(e.kernelRegularizer),this.recurrentRegularizer=bt(e.recurrentRegularizer),this.biasRegularizer=bt(e.biasRegularizer),this.kernelConstraint=jt(e.kernelConstraint),this.recurrentConstraint=jt(e.recurrentConstraint),this.biasConstraint=jt(e.biasConstraint),this.dropout=la([1,Qs([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=la([1,Qs([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var s;let a;if(e=nt(e),this.kernel=this.addWeight("kernel",[e[e.length-1],4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const o=this.biasInitializer,i=this.units;a=new((s=class extends Xn{apply(u,c){const h=o.apply([i]),d=(new $y).apply([i]),p=o.apply([2*i]);return ky(ky(h,d),p)}}).className="CustomInit",s)}else a=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,a,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,s){return M(()=>{const r=null!=s.training&&s.training;if(3!==e.length)throw new R(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let a=e[1];const o=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=rr({ones:()=>Hn(e),rate:this.dropout,training:r,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=rr({ones:()=>Hn(a),rate:this.recurrentDropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const l=this.recurrentDropoutMask;let u,c,h,d;0<this.dropout&&this.dropout<1&&(e=D(e,this.dropoutMask[0]));let p=bs(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(a=D(a,l[0])),p=re(p,bs(a,this.recurrentKernel.read())),this.useBias&&(p=as(p,this.bias.read()));const[f,g,m,y]=On(p,4,p.rank-1);u=this.recurrentActivation.apply(f),c=this.recurrentActivation.apply(g),h=re(D(c,o),D(u,this.activation.apply(m))),d=this.recurrentActivation.apply(y);const x=D(d,this.activation.apply(h));return[x,x,h]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:nr(this.activation),recurrentActivation:nr(this.recurrentActivation),useBias:this.useBias,kernelInitializer:kt(this.kernelInitializer),recurrentInitializer:kt(this.recurrentInitializer),biasInitializer:kt(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:ct(this.kernelRegularizer),recurrentRegularizer:ct(this.recurrentRegularizer),biasRegularizer:ct(this.biasRegularizer),activityRegularizer:ct(this.activityRegularizer),kernelConstraint:Ht(this.kernelConstraint),recurrentConstraint:Ht(this.recurrentConstraint),biasConstraint:Ht(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),s)}}return n.className="LSTMCell",n})();ne(Rp),ne((()=>{class n extends ii{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Rp(e),super(e)}call(e,s){return M(()=>(null!=this.cell.dropoutMask&&(Ge(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ge(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return 0===s.implmentation&&(s.implementation=1),new e(s)}}return n.className="LSTM",n})());let Cx=(()=>{class n extends Du{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const s of this.cells.slice().reverse())Array.isArray(s.stateSize)?e.push(...s.stateSize):e.push(s.stateSize);return e}call(e,s){return M(()=>{let r=e.slice(1);const a=[];for(const l of this.cells.slice().reverse())Array.isArray(l.stateSize)?a.push(r.splice(0,l.stateSize.length)):a.push(r.splice(0,1));a.reverse();const o=[];let i;for(let l=0;l<this.cells.length;++l){const u=this.cells[l];r=a[l],i=0===l?[e[0]].concat(r):[i[0]].concat(r),i=u.call(i,s),o.push(i.slice(1))}r=[];for(const l of o.slice().reverse())r.push(...l);return[i[0]].concat(r)})}build(e){let s;ip(e)&&(e=e[0]),this.cells.forEach((r,a)=>{Rr(`RNNCell_${a}`,()=>{r.build(e),s=Array.isArray(r.stateSize)?r.stateSize[0]:r.stateSize,e=[e[0],s]})}),this.built=!0}getConfig(){const e=super.getConfig(),a={cells:this.cells.map(o=>({className:o.getClassName(),config:o.getConfig()}))};return Object.assign(Object.assign({},e),a)}static fromConfig(e,s,r={}){const a=[];for(const o of s.cells)a.push(Is(o,r));return new e({cells:a})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const s of this.cells)e.push(...s.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const s of this.cells)e.push(...s.nonTrainableWeights);if(!this.trainable){const s=[];for(const r of this.cells)s.push(...r.trainableWeights);return s.concat(e)}return e}getWeights(){const e=[];for(const s of this.cells)e.push(...s.weights);return lp(e)}setWeights(e){const s=[];for(const r of this.cells){const o=e.splice(r.weights.length);for(let i=0;i<r.weights.length;++i)s.push([r.weights[i],o[i]])}up(s)}}return n.className="StackedRNNCells",n})();function rr(n){const{ones:t,rate:e,training:s=!1,count:r=1,dropoutFunc:a}=n,o=()=>null!=a?a(t(),e):_y(t(),e),i=()=>ni(o,t,s);return!r||r<=1?fs(i().clone()):Array(r).fill(void 0).map(i).map(u=>fs(u.clone()))}ne(Cx);let Z2=(()=>{class n extends ii{constructor(e){if(e.unroll)throw new Me("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Me("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new Ut({ndim:5})]}call(e,s){return M(()=>{if(null!=this.cell.dropoutMask&&(Ge(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ge(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),s&&s.constants)throw new R("ConvRNN2D cell does not support constants");return super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})})}computeOutputShape(e){let s=this.computeSingleOutputShape(e);return this.returnSequences||(s=[s[0],...s.slice(2)]),this.returnState&&(s=[s,...Array(2).fill([e[0],...s.slice(-3)])]),s}getInitialState(e){return M(()=>{const{stateSize:s}=this.cell,a=this.computeSingleOutputShape(e.shape),i=Jt([a[0],...a.slice(2)]);return Array.isArray(s)?Array(s.length).fill(i):[i]})}resetStates(e,s=!1){M(()=>{if(!this.stateful)throw new ys("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape,a=this.computeSingleOutputShape(r),o=[a[0],...a.slice(2)];if(null==r[0])throw new R("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(()=>Jt(o)):[Jt(o)];else if(null==e)Ge(this.states_),null!=this.keptStates&&(Ge(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>Jt(o)):this.states_[0]=Jt(o);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new R(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);s?this.keptStates.push(this.states_.slice()):Ge(this.states_);for(let l=0;l<this.states_.length;++l){const u=e[l],c=o;if(!ye(u.shape,c))throw new R(`State ${l} is incompatible with layer ${this.name}: expected shape=${c}, received shape=${u.shape}`);this.states_[l]=u}}this.states_=this.states_.map(l=>fs(l.clone()))})}computeSingleOutputShape(e){const{dataFormat:s,filters:r,kernelSize:a,padding:o,strides:i,dilationRate:l}=this.cell,u="channelsFirst"===s,h=e[u?4:3],d=ls(e[u?3:2],a[0],o,i[0],l[0]),p=ls(h,a[1],o,i[1],l[1]);return[...e.slice(0,2),...u?[r,d,p]:[d,p,r]]}}return n.className="ConvRNN2D",n})(),Nx=(()=>{class n extends Rp{constructor(e){const{filters:s,kernelSize:r,strides:a,padding:o,dataFormat:i,dilationRate:l}=e;super(Object.assign(Object.assign({},e),{units:s})),this.filters=s,Qt(this.filters,"filters"),this.kernelSize=ha(r,2,"kernelSize"),this.kernelSize.forEach(u=>Qt(u,"kernelSize")),this.strides=ha(a||1,2,"strides"),this.strides.forEach(u=>Qt(u,"strides")),this.padding=o||"valid",Ln(this.padding),this.dataFormat=i||"channelsLast",Mt(this.dataFormat),this.dilationRate=ha(l||1,2,"dilationRate"),this.dilationRate.forEach(u=>Qt(u,"dilationRate"))}build(e){var s;e=nt(e);const r="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[r])throw new R(`The channel dimension of the input should be defined. Found ${e[r]}`);const i=this.kernelSize.concat([e[r],4*this.filters]);this.kernel=this.addWeight("kernel",i,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const l=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",l,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let u;if(this.unitForgetBias){const c=this.biasInitializer,h=this.filters;u=new((s=class extends Xn{apply(p,f){return rp([c.apply([h]),Xs([h]),c.apply([2*h])])}}).className="CustomInit",s)}else u=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,u,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,s){return M(()=>{if(3!==e.length)throw new R(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const r=s.training||!1,a=e[0],o=e[1],i=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=rr({ones:()=>Hn(a),rate:this.dropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const u=this.dropoutMask,c=(ae,ie,oe)=>ie&&ie[oe]?D(ie[oe],ae):ae;let h=c(a,u,0),d=c(a,u,1),p=c(a,u,2),f=c(a,u,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=rr({ones:()=>Hn(o),rate:this.recurrentDropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const g=this.recurrentDropoutMask;let m=c(o,g,0),y=c(o,g,1),x=c(o,g,2),b=c(o,g,3);const[I,S,N,k]=On(this.kernel.read(),4,3),[_,$,L,B]=this.useBias?On(this.bias.read(),4):[null,null,null,null];h=this.inputConv(h,I,_,this.padding),d=this.inputConv(d,S,$,this.padding),p=this.inputConv(p,N,L,this.padding),f=this.inputConv(f,k,B,this.padding);const[G,H,j,X]=On(this.recurrentKernel.read(),4,3);m=this.recurrentConv(m,G),y=this.recurrentConv(y,H),x=this.recurrentConv(x,j),b=this.recurrentConv(b,X);const Q=this.recurrentActivation.apply(re(h,m)),q=this.recurrentActivation.apply(re(d,y)),ee=re(D(q,i),D(Q,this.activation.apply(re(p,x)))),se=D(this.recurrentActivation.apply(re(f,b)),this.activation.apply(ee));return[se,se,ee]})}getConfig(){const r=function(n,t){var e={};for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&t.indexOf(s)<0&&(e[s]=n[s]);if(null!=n&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(n);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(n,s[r])&&(e[s[r]]=n[s[r]])}return e}(super.getConfig(),["units"]),a={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},r),a)}inputConv(e,s,r,a){const o=Nr(e,s,this.strides,a||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return r?as(o,r,this.dataFormat):o}recurrentConv(e,s){return Nr(e,s,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}return n.className="ConvLSTM2DCell",n})();ne(Nx),ne((()=>{class n extends Z2{constructor(e){const s=new Nx(e);super(Object.assign(Object.assign({},e),{cell:s}))}static fromConfig(e,s){return new e(s)}}return n.className="ConvLSTM2D",n})());let kx=(()=>{class n extends je{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const s=e.shape,r=[];for(let a=0;a<this.noiseShape.length;++a)r.push(null==this.noiseShape[a]?s[a]:this.noiseShape[a]);return r}call(e,s){return M(()=>{this.invokeCallHook(e,s);const r=Fe(e);if(0<this.rate&&this.rate<1){const a=null!=s.training&&s.training,o=this.getNoiseShape(r);return ni(()=>_y(r,this.rate,o,this.seed),()=>r,a)}return e})}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},s=super.getConfig();return Object.assign(e,s),e}dispose(){return super.dispose()}}return n.className="Dropout",n})();ne(kx),ne((()=>{class n extends kx{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const s=e.shape;return[s[0],1,s[2]]}}return n.className="SpatialDropout1D",n})()),ne((()=>{class n extends je{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let s=null;null!=e.batchSize&&(s=e.batchSize),this.batchInputShape=[s,e.inputDim]}this.units=e.units,Qt(this.units,"units"),this.activation=sr(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=xt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=xt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=jt(e.kernelConstraint),this.biasConstraint=jt(e.biasConstraint),this.kernelRegularizer=bt(e.kernelRegularizer),this.biasRegularizer=bt(e.biasRegularizer),this.activityRegularizer=bt(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const s=(e=nt(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[s,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:s}}],this.built=!0}computeOutputShape(e){const s=(e=nt(e)).slice();return s[s.length-1]=this.units,s}call(e,s){return M(()=>{this.invokeCallHook(e,s);const r=Fe(e),a=xy(this.activation.getClassName());let o;return null!=a?o=bs(r,this.kernel.read(),a,this.bias?this.bias.read():null):(o=bs(r,this.kernel.read()),null!=this.bias&&(o=as(o,this.bias.read())),null!=this.activation&&(o=this.activation.apply(o))),o})}getConfig(){const e={units:this.units,activation:nr(this.activation),useBias:this.useBias,kernelInitializer:kt(this.kernelInitializer),biasInitializer:kt(this.biasInitializer),kernelRegularizer:ct(this.kernelRegularizer),biasRegularizer:ct(this.biasRegularizer),activityRegularizer:ct(this.activityRegularizer),kernelConstraint:Ht(this.kernelConstraint),biasConstraint:Ht(this.biasConstraint)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Dense",n})()),ne((()=>{class n extends je{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=nt(e);for(const s of e.slice(1))if(null==s)throw new R(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],Js(e,1)]}call(e,s){return M(()=>{this.invokeCallHook(e,s);let r=Fe(e);if("channelsFirst"===this.dataFormat&&r.rank>1){const a=[0];for(let o=2;o<r.rank;++o)a.push(o);a.push(1),r=Ze(r,a)}return function F$(n){if(n.rank<=1)throw new R(`batchFlatten requires a minimum rank of 2. Got rank: ${n.rank}.`);const t=[n.shape[0],Js(n.shape,1)];return P(n,t)}(r)})}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const s=super.getConfig();return Object.assign(e,s),e}}return n.className="Flatten",n})()),ne((()=>{class n extends je{constructor(e){super(e),this.supportsMasking=!0,this.activation=sr(e.activation)}call(e,s){return M(()=>{this.invokeCallHook(e,s);const r=Fe(e);return this.activation.apply(r)})}getConfig(){const e={activation:nr(this.activation)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Activation",n})()),ne((()=>{class n extends je{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,s){return M(()=>function A$(n,t){return M(()=>{if(2!==n.shape.length)throw new R(`repeat() expects a rank-2 tensor, but received a rank-${n.shape.length} tensor.`);return ap(ei(n,1),[1,t,1])})}(e=Fe(e),this.n))}getConfig(){const e={n:this.n},s=super.getConfig();return Object.assign(e,s),e}}return n.className="RepeatVector",n})()),ne((()=>{class n extends je{constructor(e){super(e),this.targetShape=e.targetShape;for(let s=0;s<this.targetShape.length;++s)this.isUnknown(this.targetShape[s])&&(this.targetShape[s]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,s){const r="Total size of new array must be unchanged.",a=s.slice();let o=1,i=null;for(let u=0;u<a.length;++u){const c=a[u];if(this.isUnknown(c)){if(null!==i)throw new R("Can only specifiy one unknown dimension.");i=u}else o*=c}const l=Js(e);if(null!==i){if(0===o||l%o!=0)throw new R(r);a[i]=l/o}else if(l!==o)throw new R(r);return a}computeOutputShape(e){let s=!1;for(let r=0;r<e.length;++r)if(this.isUnknown(e[r])){s=!0;break}return s?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,s){return M(()=>{this.invokeCallHook(e,s);const r=Fe(e),a=r.shape,o=a.slice(0,1).concat(this.fixUnknownDimension(a.slice(1),this.targetShape));return P(r,o)})}getConfig(){const e={targetShape:this.targetShape},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Reshape",n})()),ne((()=>{class n extends je{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const s=ss(1,e.dims.length+1);if(!ye(e.dims.slice().sort(),s))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Ut({ndim:this.dims.length+1})]}computeOutputShape(e){const s=(e=nt(e)).slice();return this.dims.forEach((r,a)=>{s[a+1]=e[r]}),s}call(e,s){return Ze(Fe(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Permute",n})()),ne((()=>{class n extends je{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={maskValue:this.maskValue};return Object.assign(s,e),s}computeMask(e,s){const r=Fe(e);return Xh(Go(r,this.maskValue),-1)}call(e,s){return M(()=>{this.invokeCallHook(e,s);const r=Fe(e),i=Xh(Go(r,this.maskValue),-1,!0);return D(r,de(i,r.dtype))})}}return n.className="Masking",n})()),ne((()=>{class n extends je{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let s=null;null!=e.batchSize&&(s=e.batchSize),this.batchInputShape=null==e.inputLength?[s,null]:[s].concat(pt(e.inputLength))}this.inputDim=e.inputDim,Qt(this.inputDim,"inputDim"),this.outputDim=e.outputDim,Qt(this.outputDim,"outputDim"),this.embeddingsInitializer=xt(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=bt(e.embeddingsRegularizer),this.activityRegularizer=bt(e.activityRegularizer),this.embeddingsConstraint=jt(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,s){return M(()=>this.maskZero?(e=Fe(e),Go(e,Je(e))):null)}computeOutputShape(e){if(e=nt(e),null==this.inputLength)return[...e,this.outputDim];const s=pt(this.inputLength);if(s.length!==e.length-1)throw new R(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let r=0;for(let a=0;a<s.length;++a){const o=s[a],i=e[a+1];if(null!=o&&null!=i&&o!==i)throw new R(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==o&&(s[r]=i),r++}}return[e[0],...s,this.outputDim]}call(e,s){return M(()=>{this.invokeCallHook(e,s);let r=Fe(e);"int32"!==r.dtype&&(r=xs(r,"int32"));const a=Ty(this.embeddings.read(),P(r,[r.size]));return P(a,nt(this.computeOutputShape(r.shape)))})}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:kt(this.embeddingsInitializer),embeddingsRegularizer:ct(this.embeddingsRegularizer),activityRegularizer:ct(this.activityRegularizer),embeddingsConstraint:Ht(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Embedding",n})());class Or extends je{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new Me}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const s=t.slice(0,t.length-e.length);for(let r=0;r<e.length;++r){const a=t[t.length-e.length+r],o=e[r];if(null==a||null==o||a<0||o<0)s.push(null);else if(1===a)s.push(o);else if(1===o)s.push(a);else{if(a!==o)throw new R("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));s.push(a)}}return s}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[nt(t)]),t.length<2)throw new R(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const a of t)null!=a&&null!==a[0]&&e.push(a[0]);if(e=Zs(e),e.length>1)throw new R(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let s=null==t[0]?null:t[0].slice(1);for(let a=1;a<t.length;++a){const o=null==t[a]?null:t[a].slice(1);s=this.computeElementwiseOpOutputShape(s,o)}const r=t.map(a=>a.length);this.reshapeRequired=-1!==t.indexOf(null)||1!==Zs(r).length}call(t,e){return M(()=>{if(this.reshapeRequired){const s=[],r=t.map(a=>a.rank);if(-1===r.indexOf(null)){const a=Qs(r);for(let o of t){const i=o.rank;for(let l=0;l<a-i;++l)o=ei(o,1);s.push(o)}return this.mergeFunction(s)}{let a=!1;for(const l of t){const u=l.rank;if(null==u){const c=l.shape,h=c[0],d=c.slice(1).concat([h]);let p=P(l,[h].concat(Js(c.slice(1))));p=Ze(p,[1,0]),p=P(p,d),s.push(p),a=!0}else if(u>1){const c=ss(1,u).concat([0]);s.push(Ze(l,c)),a=!0}else s.push(l)}let o=this.mergeFunction(s);const i=o.rank;if(a)if(null==i){const l=o.shape,c=l[l.length-1],h=[c].concat(l.slice(0,l.length-1));o=P(Ze(P(o,[-1,c]),[1,0]),h)}else if(i>1){const l=[i-1].concat(ss(0,i-1));o=Ze(o,l)}return o}}return this.mergeFunction(t)})}computeOutputShape(t){let e;e=null==t[0]?null:t[0].slice(1);for(let r=1;r<t.length;++r){const a=null==t[r]?null:t[r].slice(1);e=this.computeElementwiseOpOutputShape(e,a)}let s=[];for(const r of t)null!=r&&null!==r[0]&&s.push(r[0]);return s=Zs(s),e=1===s.length?s.concat(e):[null].concat(e),e}computeMask(t,e){return M(()=>{if(null==e)return null;if(!Array.isArray(e))throw new R("`mask` should be an Array");if(!Array.isArray(t))throw new R("`inputs` should be an Array");if(e.length!==t.length)throw new R(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(r=>null==r))return null;let s=(e=e.map(r=>null==r?r:Nn(r,0)))[0];for(let r=1;r<e.length-1;++r)s=Es(s,e[r]);return s})}}function li(n,t){for(;n<0;)n+=t;return n}function ui(n,t,e,s,r,a=.001){let o;if(2===n.rank)o=lI(n,t,e,s,r,a);else if(3===n.rank)o=cI(n,t,e,s,r,a);else{if(4!==n.rank)throw new Me(`batchNormalization is not implemented for array of rank ${n.rank} yet`);o=dI(n,t,e,s,r,a)}return o}function Au(n,t,e,s,r,a){return M(()=>{let o;Mt(r),wy(a),Ln(s),null==e&&(e=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),n=Dp(n,r);const i="same"===s?"same":"valid";return o="max"===a?sd(n,t,e,i):Jh(n,t,e,i),"channelsFirst"===r&&(o=Ze(o,[0,3,1,2])),o})}function Tx(n,t,e,s,r,a){return M(()=>{let o;Mt(r),wy(a),Ln(s),null==e&&(e=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),n=mx(n,r);const i="same"===s?"same":"valid";return o="max"===a?tS(n,t,e,i):rI(n,t,e,i),"channelsFirst"===r&&(o=Ze(o,[0,4,1,2,3])),o})}ne((()=>{class n extends Or{constructor(e){super(e)}mergeFunction(e){return M(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=re(s,e[r]);return s})}}return n.className="Add",n})()),ne((()=>{class n extends Or{constructor(e){super(e)}mergeFunction(e){return M(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=D(s,e[r]);return s})}}return n.className="Multiply",n})()),ne((()=>{class n extends Or{constructor(e){super(e)}mergeFunction(e){return M(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=re(s,e[r]);return D(1/e.length,s)})}}return n.className="Average",n})()),ne((()=>{class n extends Or{constructor(e){super(e)}mergeFunction(e){return M(()=>{let s=e[0];for(let r=1;r<e.length;++r)s=Hs(s,e[r]);return s})}}return n.className="Maximum",n})()),ne((()=>{class n extends Or{constructor(e){super(e)}mergeFunction(e){return M(()=>{let s=e[0];for(let r=1;r<e.length;++r)s=Xl(s,e[r]);return s})}}return n.className="Minimum",n})()),ne((()=>{class n extends Or{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new R("A `Concatenate` layer should be called on a list of at least 2 inputs");let s=!0;for(const a of e)if(null!=a){s=!1;break}if(s)return;const r=[];for(let a=0;a<e.length;++a){const o=e[a].slice();o.splice(this.axis,1);let i=!1;for(const l of r)if(ye(l,o)){i=!0;break}i||r.push(o)}if(r.length>1)throw new R("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return M(()=>rp(e,this.axis))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new R("A `Concatenate` layer should be called on a list of inputs.");const s=e,r=s[0].slice(),a=this.axis<0?r.length+this.axis:this.axis;for(const o of s.slice(1)){if(null==r[a]||null==o[a]){r[a]=null;break}r[a]+=o[a]}return r}computeMask(e,s){if(null==s)return null;if(!Array.isArray(s))throw new R("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new R("`inputs` should be an array for Concatenate");if(s.length!==e.length)throw new R(`Mismatch in the length of mask (${s.length}) and the legnth of inputs (${e.length})`);return M(()=>{let r=!0;if(s.forEach(i=>{null==i||(r=!1)}),r)return null;const a=[];for(let i=0;i<e.length;++i)a.push(null==s[i]?de(Hn(e[i]),"bool"):s[i].rank<e[i].rank?Nn(s[i],-1):s[i]);const o=un(a,this.axis);return Km(o,-1,!1)})}getConfig(){const e={axis:this.axis},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Concatenate",n})()),ne((()=>{class n extends Or{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){v(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const s=e[0],r=e[1];if(s.length>3||r.length>3)throw new Me("Dot layer does not support tensors of 4D or higher rank yet.");const a=this.interpretAxes(s,r);if(s[a[0]]!==r[a[1]])throw new R(`Dimension incompatibility: ${s[a[0]]} !== ${r[a[1]]}`)}mergeFunction(e){if(2!==e.length)throw new R(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let a,s=e[0],r=e[1];return a=Array.isArray(this.axes)?this.axes.map((o,i)=>li(o,e[i].shape.length)):[li(this.axes,s.shape.length),li(this.axes,r.shape.length)],this.normalize&&(s=vu(s,a[0]),r=vu(r,a[1])),function J2(n,t,e){if(n.shape.length>3||t.shape.length>3)throw new Me("batchDot is not implemented for tensors of 4D or higher rank yet");if(v(n.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${n.shape.length}`),v(n.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`),"number"==typeof e&&(e=[e,e]),"complex64"===n.dtype||"complex64"===t.dtype)throw new Me("batchDot is not implemented for complex64-type Tensors yet.");const s=n.shape.length,r=t.shape.length;null==e&&(e=[s-1,r-2]);const a=e;return M(()=>{let o,i;if(s>r){o=s-r;const l=[];for(let u=0;u<o;++u)l.push(1);t=P(t,t.shape.concat(l))}else if(r>s){o=r-s;const l=[];for(let u=0;u<o;++u)l.push(1);n=P(n,n.shape.concat(l))}else o=0;if(i=2===n.shape.length&&2===t.shape.length?a[0]===a[1]?be(D(n,t),a[0]):be(D(Ze(n,[1,0]),t),a[1]):st(n,t,a[0]!==n.shape.length-1,a[1]===t.shape.length-1),o>0){let l;l=s>r?s+r-3:s-1;const u=[];for(let c=l;c<l+o;++c)u.push(c);i=jo(i,u)}return 1===i.shape.length&&(i=Nn(i,1)),i})}(s,r,a)}interpretAxes(e,s){let r;return r=Array.isArray(this.axes)?this.axes:[li(this.axes,e.length),li(this.axes,s.length)],r}computeOutputShape(e){v(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const s=e[0].slice(),r=e[1].slice();if(s.length>3||r.length>3)throw new Me("Dot layer does not support tensors of 4D or higher rank yet.");const a=this.interpretAxes(s,r);s.splice(a[0],1),r.splice(a[1],1),r.splice(0,1);const o=s.concat(r);return 1===o.length&&o.push(1),o}computeMask(e,s){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Dot",n})()),ne((()=>{class n extends je{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={stddev:this.stddev};return Object.assign(s,e),s}call(e,s){return M(()=>{this.invokeCallHook(e,s);const r=Fe(e);return ni(()=>re(fu(r.shape,0,this.stddev),r),()=>r,s.training||!1)})}}return n.className="GaussianNoise",n})()),ne((()=>{class n extends je{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={rate:this.rate};return Object.assign(s,e),s}call(e,s){return M(()=>{this.invokeCallHook(e,s);const r=Fe(e);return this.rate>0&&this.rate<1?ni(()=>{const o=Math.sqrt(this.rate/(1-this.rate));return D(r,fu(r.shape,1,o))},()=>r,s.training||!1):r})}}return n.className="GaussianDropout",n})()),ne((()=>{class n extends je{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||Fe(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={rate:this.rate};return Object.assign(s,e),s}call(e,s){return M(()=>{if(this.rate<1&&this.rate>0){const r=this._getNoiseShape(e);return ni(()=>{const o=Fe(e),u=-1.7580993408473766;let c=kr(Yl(r),this.rate);c=xs(c,"float32");const h=((1-this.rate)*(1+this.rate*u**2))**-.5,d=-h*u*this.rate,p=re(D(o,c),D(re(c,-1),u));return re(D(p,h),d)},()=>Fe(e),s.training||!1)}return e})}}return n.className="AlphaDropout",n})()),ne((()=>{class n extends je{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=xt(e.betaInitializer||"zeros"),this.gammaInitializer=xt(e.gammaInitializer||"ones"),this.movingMeanInitializer=xt(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=xt(e.movingVarianceInitializer||"ones"),this.betaConstraint=jt(e.betaConstraint),this.gammaConstraint=jt(e.gammaConstraint),this.betaRegularizer=bt(e.betaRegularizer),this.gammaRegularizer=bt(e.gammaRegularizer)}build(e){e=nt(e);const s=this.axis>=0?this.axis:this.axis+e.length,r=e[s];if(null==r)throw new R(`Axis ${s} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new Ut({ndim:e.length,axes:{[s]:r}})];const a=[r];this.scale&&(this.gamma=this.addWeight("gamma",a,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",a,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",a,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",a,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,s){return M(()=>{const r=null!=s.training&&s.training,a=Fe(e),o=a.shape,i=o.length,l=ss(0,i),u=this.axis>=0?this.axis:this.axis+i;l.splice(u,1);const c=Er(1,i);c[u]=o[u];const h=l.slice();h.sort();const d=!ye(h,ss(0,i).slice(0,i-1));if(!r)return(()=>{if(d){const b=P(this.movingMean.read(),c),w=P(this.movingVariance.read(),c),I=this.center?P(this.beta.read(),c):null,S=this.scale?P(this.gamma.read(),c):null;return ui(a,b,w,I,S,this.epsilon)}return ui(a,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[f,g,m]=function tE(n,t,e,s,r=.001){return ye(s.slice().sort(),ss(0,n.rank-1))?function Q2(n,t,e,s,r=.001){return M(()=>{const a=ad(n,s),o=a.mean,i=a.variance;return[ui(n,o,i,e,t,r),o,i]})}(n,t,e,s,r):function eE(n,t,e,s,r=.001){return M(()=>{const a=ad(n,s),o=a.mean,i=a.variance,l=[];for(const f of ss(0,n.rank))-1!==s.indexOf(f)?l.push(1):l.push(n.shape[f]);const u=P(o,l),c=P(i,l),h=null==t?null:P(t,l),d=null==e?null:P(e,l);return[ui(n,u,c,d,h,r),o,i]})}(n,t,e,s,r)}(a,this.gamma.read(),this.beta.read(),l,this.epsilon),y=(b,w,I)=>{M(()=>{const S=1-I,N=b.read(),k=D(xe(N,w),S);b.write(xe(N,k))})};return(()=>{y(this.movingMean,g,this.momentum),y(this.movingVariance,m,this.momentum)})(),f})}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:kt(this.betaInitializer),gammaInitializer:kt(this.gammaInitializer),movingMeanInitializer:kt(this.movingMeanInitializer),movingVarianceInitializer:kt(this.movingVarianceInitializer),betaRegularizer:ct(this.betaRegularizer),gammaRegularizer:ct(this.gammaRegularizer),betaConstraint:Ht(this.betaConstraint),gammaConstraint:Ht(this.gammaConstraint)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="BatchNormalization",n})()),ne((()=>{class n extends je{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const s of this.axis)if(!Number.isInteger(s))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=xt(e.betaInitializer||"zeros"),this.gammaInitializer=xt(e.gammaInitializer||"ones"),this.betaRegularizer=bt(e.betaRegularizer),this.gammaRegularizer=bt(e.gammaRegularizer),this.supportsMasking=!0}build(e){const s=(e=nt(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let o=0;o<this.axis.length;++o)this.axis[o]<0&&(this.axis[o]+=s);for(const o of this.axis)if(o<0||o>=s)throw new Error(`Invalid axis: ${o}`);if(this.axis.length!==Zs(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const r=this.axis.map(o=>e[o]);this.gamma=this.scale?this.addWeight("gamma",r,"float32",this.gammaInitializer,this.gammaRegularizer,!0):null,this.beta=this.center?this.addWeight("beta",r,"float32",this.betaInitializer,this.betaRegularizer,!0):null,this.built=!0}call(e,s){const r=Fe(e),a=r.shape,o=a.length;return M(()=>{let{mean:l,variance:u}=ad(r,this.axis,!0);const c=Er(1,o);for(const m of this.axis)c[m]=a[m];const h=m=>null!=m&&m.shape.length!==o?P(m,c):m;let d=this.scale?h(this.gamma.read()):null,p=this.center?h(this.beta.read()):null;const f=[],g=[];for(let m=0;m<o;++m)-1!==this.axis.indexOf(m)?(f.push(a[m]),g.push(1)):(f.push(1),g.push(a[m]));return l=ts(l,f),u=ts(u,f),null!=d&&(d=ts(d,g)),null!=p&&(p=ts(p,g)),ui(r,l,u,p,d,this.epsilon)})}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:kt(this.betaInitializer),gammaInitializer:kt(this.gammaInitializer),betaRegularizer:ct(this.betaRegularizer),gammaRegularizer:ct(this.gammaRegularizer)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="LayerNormalization",n})()),ne((()=>{class n extends je{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new R(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let s,r;if("number"==typeof e.padding[0])s=[e.padding[0],e.padding[0]],r=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new R(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(s=e.padding[0],2!==e.padding[1].length)throw new R(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);r=e.padding[1]}this.padding=[s,r]}this.inputSpec=[new Ut({ndim:4})]}computeOutputShape(e){let s,r;return e=nt(e),"channelsFirst"===this.dataFormat?(s=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],s,r]):(s=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],s,r,e[3]])}call(e,s){return M(()=>function nE(n,t,e){return M(()=>{if(4!==n.rank)throw new R(`temporalPadding expects input tensor to be 4-D, but received a ${n.rank}-D tensor.`);if(null==t&&(t=[[1,1],[1,1]]),2!==t.length||2!==t[0].length||2!==t[1].length)throw new R("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==e&&(e="channelsLast"),"channelsLast"!==e&&"channelsFirst"!==e)throw new R(`Unknown data format: ${e}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let s;return s="channelsFirst"===e?[[0,0],[0,0],t[0],t[1]]:[[0,0],t[0],t[1],[0,0]],od(n,s)})}(Fe(e),this.padding,this.dataFormat))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ZeroPadding2D",n})());class _x extends je{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new R(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);this.poolSize=t.poolSize}if(Qt(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new R(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);this.strides=t.strides}Qt(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,Ln(this.padding),this.inputSpec=[new Ut({ndim:3})]}computeOutputShape(t){const e=ls((t=nt(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return M(()=>{this.invokeCallHook(t,e),t=ei(Fe(t),2);const s=this.poolingFunction(Fe(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return jo(s,[2])})}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}ne((()=>{class n extends _x{constructor(e){super(e)}poolingFunction(e,s,r,a,o){return Mt(o),Ln(a),Au(e,s,r,a,o,"max")}}return n.className="MaxPooling1D",n})()),ne((()=>{class n extends _x{constructor(e){super(e)}poolingFunction(e,s,r,a,o){return Mt(o),Ln(a),Au(e,s,r,a,o,"avg")}}return n.className="AveragePooling1D",n})());class $x extends je{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new R(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides];Qt(this.poolSize,"poolSize"),Qt(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Mt(this.dataFormat),Ln(this.padding),this.inputSpec=[new Ut({ndim:4})]}computeOutputShape(t){t=nt(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],s="channelsFirst"===this.dataFormat?t[3]:t[2];return e=ls(e,this.poolSize[0],this.padding,this.strides[0]),s=ls(s,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,s]:[t[0],e,s,t[3]]}call(t,e){return M(()=>(this.invokeCallHook(t,e),this.poolingFunction(Fe(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}ne((()=>{class n extends $x{constructor(e){super(e)}poolingFunction(e,s,r,a,o){return Mt(o),Ln(a),Au(e,s,r,a,o,"max")}}return n.className="MaxPooling2D",n})()),ne((()=>{class n extends $x{constructor(e){super(e)}poolingFunction(e,s,r,a,o){return Mt(o),Ln(a),Au(e,s,r,a,o,"avg")}}return n.className="AveragePooling2D",n})());class Ex extends je{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new R(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];Qt(this.poolSize,"poolSize"),Qt(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Mt(this.dataFormat),Ln(this.padding),this.inputSpec=[new Ut({ndim:5})]}computeOutputShape(t){t=nt(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],s="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[4]:t[3];return e=ls(e,this.poolSize[0],this.padding,this.strides[0]),s=ls(s,this.poolSize[1],this.padding,this.strides[1]),r=ls(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,s,r]:[t[0],e,s,r,t[4]]}call(t,e){return M(()=>(this.invokeCallHook(t,e),this.poolingFunction(Fe(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}ne((()=>{class n extends Ex{constructor(e){super(e)}poolingFunction(e,s,r,a,o){return Mt(o),Ln(a),Tx(e,s,r,a,o,"max")}}return n.className="MaxPooling3D",n})()),ne((()=>{class n extends Ex{constructor(e){super(e)}poolingFunction(e,s,r,a,o){return Mt(o),Ln(a),Tx(e,s,r,a,o,"avg")}}return n.className="AveragePooling3D",n})());class Dx extends je{constructor(t){super(t),this.inputSpec=[new Ut({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new Me}}ne((()=>{class n extends Dx{constructor(e){super(e||{})}call(e,s){return M(()=>{const r=Fe(e);return Pt(r,1)})}}return n.className="GlobalAveragePooling1D",n})()),ne((()=>{class n extends Dx{constructor(e){super(e||{})}call(e,s){return M(()=>{const r=Fe(e);return ns(r,1)})}}return n.className="GlobalMaxPooling1D",n})());class Ax extends je{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Mt(this.dataFormat),this.inputSpec=[new Ut({ndim:4})]}computeOutputShape(t){return"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new Me}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}ne((()=>{class n extends Ax{call(e,s){return M(()=>{const r=Fe(e);return Pt(r,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}return n.className="GlobalAveragePooling2D",n})()),ne((()=>{class n extends Ax{call(e,s){return M(()=>{const r=Fe(e);return ns(r,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}return n.className="GlobalMaxPooling2D",n})());class Rx extends je{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,s={}){const a=Is(e.layer,s);delete e.layer;const o={layer:a};return Object.assign(o,e),new t(o)}}ne((()=>{class n extends Rx{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=nt(e)).length<3)throw new R(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const s=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(s),this.layer.built=!0),super.build(e)}computeOutputShape(e){const s=[(e=nt(e))[0]].concat(e.slice(2)),r=this.layer.computeOutputShape(s);return[r[0],e[1]].concat(r.slice(1))}call(e,s){return M(()=>vx((i,l)=>[Fe(this.layer.call(i,s)),[]],e=Fe(e),[],!1,null,null,!1,!0)[1])}}return n.className="TimeDistributed",n})()),ne((()=>{class n extends Rx{constructor(e){super(e);const s=e.layer.getConfig(),r={};r.className=e.layer.getClassName(),r.config=s,this.forwardLayer=Is(r),s.goBackwards=!0!==s.goBackwards;const a={};if(a.className=e.layer.getClassName(),a.config=s,this.backwardLayer=Is(a),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,function sE(n){Ar(N$,"BidirectionalMergeMode",n)}(this.mergeMode),e.weights)throw new Me("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const r=Math.floor(e.length/2);this.forwardLayer.setWeights(e.slice(0,r)),this.backwardLayer.setWeights(e.slice(r))}computeOutputShape(e){let r,a,o,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),this.returnState&&(o=s.slice(1)),r=s[0],"concat"===this.mergeMode?(r[r.length-1]*=2,a=[r]):a=null==this.mergeMode?[r,r.slice()]:[r],this.returnState?null==this.mergeMode?a.concat(o).concat(o.slice()):[r].concat(o).concat(o.slice()):vn(a)}apply(e,s){let r=null==s?null:s.initialState,a=null==s?null:s.constants;null==s&&(s={});const o=wx(e,r,a,this.numConstants);if(e=o.inputs,r=o.initialState,a=o.constants,Array.isArray(e)&&(r=e.slice(1),e=e[0]),(null==r||0===r.length)&&null==a)return super.apply(e,s);const i=[],l=[];if(null!=r){const c=r.length;if(c%2>0)throw new R("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");s.initialState=r,i.push(...r);const h=r.map(d=>new Ut({shape:d.shape}));this.forwardLayer.stateSpec=h.slice(0,c/2),this.backwardLayer.stateSpec=h.slice(c/2),l.push(...h)}if(null!=a)throw new Me("Support for constants in Bidirectional layers is not implemented yet.");const u=i[0]instanceof vs;for(const c of i)if(c instanceof vs!==u)throw new R("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(u){const c=[e].concat(i),h=this.inputSpec.concat(l),d=this.inputSpec;this.inputSpec=h;const p=super.apply(c,s);return this.inputSpec=d,p}return super.apply(e,s)}call(e,s){return M(()=>{const r=s.initialState;let a,o,i,l;if(null==r)a=this.forwardLayer.call(e,s),o=this.backwardLayer.call(e,s);else{const u=r.slice(0,r.length/2),c=r.slice(r.length/2);a=this.forwardLayer.call(e,Object.assign(s,{initialState:u})),o=this.backwardLayer.call(e,Object.assign(s,{initialState:c}))}return this.returnState&&(Array.isArray(a)&&(i=a.slice(1).concat(o.slice(1))),a=a[0],o=o[0]),this.returnSequences&&(o=Tr(o,1)),"concat"===this.mergeMode?l=rp([a,o]):"sum"===this.mergeMode?l=re(a,o):"ave"===this.mergeMode?l=D(.5,re(a,o)):"mul"===this.mergeMode?l=D(a,o):null==this.mergeMode&&(l=[a,o]),this.returnState?null==this.mergeMode?l.concat(i):[l].concat(i):l})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){Rr(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),Rr(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,s){let r;if(Array.isArray(s)&&(s=s[0]),r=this.returnSequences?null==this.mergeMode?[s,s]:s:null==this.mergeMode?[null,null]:null,this.returnState){const o=this.forwardLayer.states.map(i=>null);return Array.isArray(r)?r.concat(o).concat(o):[r].concat(o).concat(o)}return r}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},s=super.getConfig();return Object.assign(e,s),e}static fromConfig(e,s){const r=Is(s.layer);if(delete s.layer,null!=s.numConstants)throw new Me("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const a=s;return a.layer=r,new e(a)}}return n.className="Bidirectional",n})()),ne((()=>{class n extends je{constructor(e){super(e),this.scale=e.scale,this.offset=e.offset?e.offset:0}getConfig(){const e={scale:this.scale,offset:this.offset},s=super.getConfig();return Object.assign(e,s),e}call(e,s){return M(()=>("float32"!==(e=Fe(e)).dtype&&(e=xs(e,"float32")),re(D(e,this.scale),this.offset)))}}return n.className="Rescaling",n})());const{resizeBilinear:aE,cropAndResize:oE}=Ys;ne((()=>{class n extends je{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,s,r,a,o,i,l,u){return M(()=>{let c,h=!1;const m=[s/i,r/l,(a+s)/i,(o+r)/l],y=[];3===e.rank?(h=!0,c=As([e])):c=e;for(let S=0;S<c.shape[0];S++)y.push(m);const x=Po(y,[y.length,4]),b=Uo(0,y.length,1,"int32"),I=oE(c,x,b,[a,o],"nearest");return xs(h?Fe(_r(I)):I,u)})}upsize(e,s,r,a){return M(()=>xs(aE(e,[s,r]),a))}call(e,s){return M(()=>{const r=Fe(e),a=r.dtype,o=r.shape,i=o[o.length-3],l=o[o.length-2];let u=0;i!==this.height&&(u=Math.floor((i-this.height)/2));let c=0;return l!==this.width&&(c=Math.floor((l-this.width)/2),0===c&&(c=1)),u>=0&&c>=0?this.centerCrop(r,u,c,this.height,this.width,i,l,a):this.upsize(e,this.height,this.width,a)})}getConfig(){const e={height:this.height,width:this.width},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){const r=(e=nt(e)).length-2;return e[e.length-3]=this.height,e[r]=this.width,e}}return n.className="CenterCrop",n})()),ne((()=>{class n extends je{constructor(e){super(e),this.numTokens=e.numTokens,this.outputMode=e.outputMode?e.outputMode:"multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){return null==(e=nt(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,s){return M(()=>{let r;if("int32"!==(e=Fe(e)).dtype&&(e=xs(e,"int32")),void 0!==s.countWeights){if("count"!==this.outputMode)throw new R(`countWeights is not used when outputMode !== count.\n              Received countWeights=${s.countWeights}`);r=Fe(s.countWeights)}const a=ns(e),o=Kl(e),i=Fn(this.numTokens,a).bufferSync().get(0),l=kr(o,0).bufferSync().get(0);if(!i||!l)throw new R(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function iE(n,t,e,s){let r=Fe(n);if("int32"!==r.dtype&&(r=xs(r,"int32")),"int"===t)return r;const a=r.shape;if(0===r.rank&&(r=Nn(r,-1)),"oneHot"===t&&1!==r.shape[r.shape.length-1]&&(r=Nn(r,-1)),r.rank>2)throw new R(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${a} which would result in output rank ${r.rank}.`);const o=["multiHot","oneHot"].includes(t);let l;if(l=Jm(r,void 0!==s&&"count"===t?s:[],e,o),"tfIdf"!==t)return l;if(s)return D(l,s);throw new R("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,r)})}}return n.className="CategoryEncoding",n})());const Fx=new Set(["bilinear","nearest"]);var Mx;function ge(n,t){Array.isArray(n)||(n=[n]),n.forEach(e=>{null!=e&&v("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the CPU backend.`)})}ne((()=>{class n extends je{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!Fx.has(e.interpolation))throw new R(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=Boolean(e.cropToAspectRatio)}computeOutputShape(e){return e=nt(e),[this.height,this.width,e[2]]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},s=super.getConfig();return Object.assign(e,s),e}call(e,s){return M(()=>{const r=[this.height,this.width];if("bilinear"===this.interpolation)return Ys.resizeBilinear(e,r,!this.cropToAspectRatio);if("nearest"===this.interpolation)return Ys.resizeNearestNeighbor(e,r,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...Fx]} are supported`)})}}return n.className="Resizing",n})()),z().registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,n=>{n&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")}),function(n){let t;var e;(e=t=n.CheckpointFormatVersion||(n.CheckpointFormatVersion={}))[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(Mx||(Mx={})),Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");const XE=Zg;let YE=(()=>{class n extends Z{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new U(this,ps())}nextDataId(){return n.nextDataId++}write(e,s,r){this.firstUse&&(this.firstUse=!1,z().get("IS_NODE")&&Dn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const a={id:this.nextDataId()};return this.data.set(a,{values:e,dtype:r,refCount:1}),a}makeTensorInfo(e,s,r){let a;if("string"===s&&null!=r&&r.length>0&&Da(r[0])){const o=r.map(i=>Bs(i));a=this.write(o,e,s)}else a=this.write(r,e,s);return{dataId:a,shape:e,dtype:s}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,s,r,a,o){this.data.set(e,{values:s,dtype:a,refCount:o})}numDataIds(){return this.data.numDataIds()}read(e){var s=this;return A(function*(){return s.readSync(e)})()}readSync(e){const{dtype:s,complexTensorInfos:r}=this.data.get(e);return"complex64"===s?Fs(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):function Qw(n,t){if(Array.isArray(n))return n;if("float32"===t)return n instanceof Float32Array?n:new Float32Array(n);if("int32"===t)return n instanceof Int32Array?n:new Int32Array(n);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(n));throw new Error(`Unknown dtype ${t}`)}(this.data.get(e).values,s)}bufferSync(e){const s=this.readSync(e.dataId);if("string"===e.dtype)try{const r=s.map(a=>Ws(a));return He(e.shape,e.dtype,r)}catch(r){throw new Error("Failed to decode encoded string bytes into utf-8")}return He(e.shape,e.dtype,s)}makeOutput(e,s,r){return ps().makeTensorFromTensorInfo(this.makeTensorInfo(s,r,e),this)}disposeData(e,s=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!s&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:r}=this.data.get(e);null!=r&&(this.disposeData(r.real.dataId,!0),this.disposeData(r.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}time(e){return A(function*(){const s=wn();return e(),{kernelMs:wn()-s}})()}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){ge([e],"where");const s=this.readSync(e.dataId);return XE(e.shape,s)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}return n.nextDataId=0,n})();function rt(n,t,e){return({inputs:s,attrs:r,backend:a})=>{const{x:o}=s;if(ge(o,n),"string"===o.dtype||"string"===e)throw new Error("unaryKernelFunc does not support string input/output");const i=a,l=i.data.get(o.dataId).values,u=E(o.shape),c=e||o.dtype,h=zt(c,u);for(let d=0;d<u;++d)h[d]=t(l[d],r);return i.makeTensorInfo(o.shape,c,h)}}function pa(n,t,e){return({inputs:s,attrs:r,backend:a})=>{const{x:o}=s;if(ge(o,n),"string"===o.dtype||"string"===e)throw new Error("unaryKernelFunc does not support string input/output");const i=a,l=i.data.get(o.dataId).values,u=e||o.dtype,c=t(l,u,r);return i.makeTensorInfo(o.shape,u,c)}}Im("cpu",()=>new YE,1);const gb=rt(ja,n=>n>=0?n:Math.exp(n)-1),JE={kernelName:ja,backendName:"cpu",kernelFunc:gb};function Cs(n){const{inputs:t,backend:e}=n,{x:s}=t;return e.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const QE={kernelName:Qa,backendName:"cpu",kernelFunc:Cs};function yb(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{alpha:a}=s;ge([r],"leakyRelu");const o=E(r.shape),i=e.data.get(r.dataId).values,l=Dt("float32",o);for(let u=0;u<i.length;u++)l[u]=i[u]<0?a*i[u]:i[u];return e.makeTensorInfo(r.shape,"float32",l)}const eD={kernelName:qi,backendName:"cpu",kernelFunc:yb};function Bt(n){return(t,e,s,r,a)=>{const o=Ve(t,e),i=o.length,l=Se(o),c=Dt(a,E(o)),h=t.length,d=e.length,p=Se(t),f=Se(e),g=ta(t,o),m=ta(e,o);if(g.length+m.length===0)for(let y=0;y<c.length;++y)c[y]=n(s[y%s.length],r[y%r.length]);else for(let y=0;y<c.length;++y){const x=Ur(y,i,l),b=x.slice(-h);g.forEach(N=>b[N]=0);const w=hs(b,h,p),I=x.slice(-d);m.forEach(N=>I[N]=0);const S=hs(I,d,f);c[y]=n(s[w],r[S])}return[c,o]}}const tD=Bt((n,t)=>n<0?t*n:n);function xb(n){const{inputs:t,backend:e}=n,{x:s,alpha:r}=t;ge([s,r],"prelu");const a=e.data.get(s.dataId).values,o=e.data.get(r.dataId).values,[i,l]=tD(s.shape,r.shape,a,o,"float32");return e.makeTensorInfo(l,"float32",i)}const nD={kernelName:dl,backendName:"cpu",kernelFunc:xb},bb=rt(po,n=>Math.max(0,n)),sD={kernelName:po,backendName:"cpu",kernelFunc:bb},wb=rt(fo,n=>Math.min(Math.max(0,n),6)),rD={kernelName:fo,backendName:"cpu",kernelFunc:wb};function ar(n){return(t,e,s)=>{const r=Dt(e,t.length);for(let a=0;a<t.length;++a)r[a]=n(t[a],s);return r}}const aD=ar(n=>1/(1+Math.exp(-n))),vb=rt(vo,n=>1/(1+Math.exp(-n))),oD={kernelName:vo,backendName:"cpu",kernelFunc:vb};function Vu(n,t,e,s,r){if("linear"===e)return Cs({inputs:{x:t},backend:n});if("relu"===e)return bb({inputs:{x:t},backend:n});if("elu"===e)return gb({inputs:{x:t},backend:n});if("relu6"===e)return wb({inputs:{x:t},backend:n});if("prelu"===e)return xb({inputs:{x:t,alpha:s},backend:n});if("leakyrelu"===e)return yb({inputs:{x:t},backend:n,attrs:{alpha:r}});if("sigmoid"===e)return vb({inputs:{x:t},backend:n});throw new Error(`Activation ${e} has not been implemented for the CPU backend.`)}function _n(n){const{inputs:t,backend:e}=n,{real:s,imag:r}=t,a=e.data.get(s.dataId).values,o=e.data.get(r.dataId).values,i=e.makeTensorInfo(s.shape,"complex64");return e.data.get(i.dataId).complexTensorInfos={real:e.makeTensorInfo(s.shape,"float32",a),imag:e.makeTensorInfo(r.shape,"float32",o)},i}const iD={kernelName:Cc,backendName:"cpu",kernelFunc:_n};function Mu(n,t,e="float32"){if("complex64"===e)return _n({inputs:{real:Mu(n,t,"float32"),imag:Mu(n,t,"float32")},backend:n});const s=on(E(t),e);return n.makeTensorInfo(t,e,s)}function Lr(n){const{inputs:t,backend:e}=n,{input:s}=t,r=e.data.get(s.dataId).complexTensorInfos.real,a=e.data.get(r.dataId).values;return e.makeTensorInfo(r.shape,r.dtype,a)}const lD={kernelName:Xc,backendName:"cpu",kernelFunc:Lr};function Ib(n,t,e,s){if("int32"===s)return[t,"int32",Int32Array.from(n)];if("bool"===s){const r=yr([0],e),[a,o]=Bt((i,l)=>i!==l?1:0)(t,[],n,r,"bool");return[o,"bool",a]}throw new Error(`Error in Cast: failed to cast ${e} to ${s}`)}function or(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return Cs({inputs:{x:r},backend:e});const c=Mu(e,r.shape,r.dtype),h=or({inputs:{x:r},backend:e,attrs:{dtype:"float32"}}),d=_n({inputs:{real:h,imag:c},backend:e});return e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),d}if("complex64"===r.dtype){const c=Lr({inputs:{input:r},backend:e}),h=or({inputs:{x:c},backend:e,attrs:{dtype:a}});return e.disposeIntermediateTensorInfo(c),h}if(!Tf(r.dtype,a)){const c=Cs({inputs:{x:r},backend:e});return{dataId:c.dataId,shape:c.shape,dtype:a}}const o=e.data.get(r.dataId).values,[i,l,u]=Ib(o,r.shape,r.dtype,a);return e.makeTensorInfo(i,l,u)}const uD={kernelName:za,backendName:"cpu",kernelFunc:or};function en(n,t,e,s){return null==e?({inputs:r,backend:a})=>{const{a:o,b:i}=r,l=a;ge([o,i],n);const u=l.data.get(o.dataId).values,c=l.data.get(i.dataId).values,h="string"===o.dtype?$r(u):u,d="string"===o.dtype?$r(c):c,p=s||o.dtype,[f,g]=t(o.shape,i.shape,h,d,p);return l.makeTensorInfo(g,p,f)}:({inputs:r,backend:a})=>{const{a:o,b:i}=r,l=a;if("complex64"===o.dtype||"complex64"===i.dtype){const u=or({inputs:{x:o},backend:l,attrs:{dtype:"complex64"}}),c=l.data.get(u.dataId),d=c.complexTensorInfos.imag,p=l.data.get(c.complexTensorInfos.real.dataId).values,f=l.data.get(d.dataId).values,g=or({inputs:{x:i},backend:l,attrs:{dtype:"complex64"}}),m=l.data.get(g.dataId),x=m.complexTensorInfos.imag,b=l.data.get(m.complexTensorInfos.real.dataId).values,w=l.data.get(x.dataId).values,[I,S,N]=e(o.shape,i.shape,p,f,b,w),k=l.makeTensorInfo(N,"float32",I),_=l.makeTensorInfo(N,"float32",S),$=_n({inputs:{real:k,imag:_},backend:l});return l.disposeIntermediateTensorInfo(u),l.disposeIntermediateTensorInfo(g),l.disposeIntermediateTensorInfo(k),l.disposeIntermediateTensorInfo(_),$}{const u=l.data.get(o.dataId).values,c=l.data.get(i.dataId).values,h=s||o.dtype,[d,p]=t(o.shape,i.shape,u,c,h);return l.makeTensorInfo(p,h,d)}}}function Yp(n){return(t,e,s,r,a,o)=>{const i=Ve(t,e),l=E(i),u=i.length,c=Se(i),h=Dt("float32",l),d=Dt("float32",l),p=ta(t,i),f=ta(e,i),g=Fs(s,r),m=Fs(a,o),y=t.length,x=Se(t),b=e.length,w=Se(e);if(p.length+f.length===0)for(let I=0;I<h.length;I++){const S=I%g.length,N=I%m.length,k=n(g[2*S],g[2*S+1],m[2*N],m[2*N+1]);h[I]=k.real,d[I]=k.imag}else for(let I=0;I<h.length;I++){const S=Ur(I,u,c),N=S.slice(-y);p.forEach(B=>N[B]=0);const k=hs(N,y,x),_=S.slice(-b);f.forEach(B=>_[B]=0);const $=hs(_,b,w),L=n(g[2*k],g[2*k+1],m[2*$],m[2*$+1]);h[I]=L.real,d[I]=L.imag}return[h,d,i]}}const Sb=Bt((n,t)=>n+t),cD=Yp((n,t,e,s)=>({real:n+e,imag:t+s})),fa=en(Hr,Sb,cD),hD={kernelName:Hr,backendName:"cpu",kernelFunc:fa};function ft(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{shape:a}=s,o=E(r.shape),i=bn(a,o),l=E(i);v(o===l,()=>`The new shape (${i}) has ${l} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`),e.incRef(r.dataId);const u=e.data.get(r.dataId);if(null!=u.complexTensorInfos){const h=u.complexTensorInfos.imag;u.complexTensorInfos.real.shape=i,h.shape=i}return{dataId:r.dataId,shape:i,dtype:r.dtype}}const dD={kernelName:fl,backendName:"cpu",kernelFunc:ft};function Cb(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:a}=t,{transposeA:o,transposeB:i}=s;ge([r,a],"matMul");const l=r.shape.length,u=a.shape.length,c=o?r.shape[l-2]:r.shape[l-1],h=i?a.shape[u-1]:a.shape[u-2],d=o?r.shape[l-1]:r.shape[l-2],p=i?a.shape[u-2]:a.shape[u-1],f=r.shape.slice(0,-2),g=a.shape.slice(0,-2),m=E(f),y=E(g),b=Ve(r.shape.slice(0,-2),a.shape.slice(0,-2)).concat([d,p]);v(c===h,()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${o} and transposeB=${i} must match.`);const I=i?[y,p,h]:[y,h,p],S=ft({inputs:{x:r},backend:e,attrs:{shape:o?[m,c,d]:[m,d,c]}}),N=ft({inputs:{x:a},backend:e,attrs:{shape:I}}),k=o?S.shape[1]:S.shape[2],_=o?S.shape[2]:S.shape[1],$=i?N.shape[1]:N.shape[2],L=Math.max(m,y),B=e.data.get(S.dataId).values,G=e.data.get(N.dataId).values,H=Se(S.shape),j=Se(N.shape),[X,Q,q]=o?[H[0],1,H[1]]:[H[0],H[1],1],[ee,se,ae]=i?[1,j[1],j[0]]:[j[1],1,j[0]],ie=_*$,oe=He([L,_,$],S.dtype),pe=oe.values,le=e.blockSize;for(let fe=0;fe<L;fe++){const Ne=fe%m,Re=fe%y;for(let Ee=0;Ee<_;Ee+=le){const We=Math.min(Ee+le,_);for(let Ue=0;Ue<$;Ue+=le){const at=Math.min(Ue+le,$);for(let gt=0;gt<k;gt+=le){const Rt=Math.min(gt+le,k);for(let yt=Ee;yt<We;yt++)for(let ut=Ue;ut<at;ut++){let Tt=0;for(let wt=gt;wt<Rt;wt++)Tt+=B[Ne*X+yt*Q+wt*q]*G[wt*ee+ut*se+Re*ae];pe[fe*ie+(yt*$+ut)]+=Tt}}}}}return e.disposeIntermediateTensorInfo(S),e.disposeIntermediateTensorInfo(N),e.makeTensorInfo(b,oe.dtype,oe.values)}const pD={kernelName:Ai,backendName:"cpu",kernelFunc:Cb},mD={kernelName:Tl,backendName:"cpu",kernelFunc:function fD(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:a,bias:o,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let d,p,f;const g=[];d=Cb({inputs:{a:r,b:a},attrs:{transposeA:l,transposeB:u},backend:e}),o&&(p=fa({inputs:{a:d,b:o},backend:e}),g.push(d),d=p),c&&(f=Vu(e,d,c,i,h),g.push(d),d=f);for(const y of g)e.disposeIntermediateTensorInfo(y);return d}};function Nb(n){const t=new Float32Array(n.length);for(let e=0;e<n.length;++e)t[e]=Math.abs(n[e]);return t}const gD={kernelName:Ti,backendName:"cpu",kernelFunc:n=>{const{x:t}=n.inputs,e=n.backend;ge(t,"abs");let s=new Float32Array(E(t.shape));return s=Nb(e.data.get(t.dataId).values),e.makeOutput(s,t.shape,t.dtype)}},yD=rt(Ra,n=>Math.acos(n)),xD={kernelName:Ra,backendName:"cpu",kernelFunc:yD},bD=rt(Fa,n=>Math.acosh(n)),wD={kernelName:Fa,backendName:"cpu",kernelFunc:bD},ID={kernelName:xc,backendName:"cpu",kernelFunc:function vD(n){const{inputs:t,backend:e}=n,s=t;ge(t,"addN");const r=s.map(i=>e.data.get(i.dataId).values),a=He(s[0].shape,s[0].dtype),o=a.values;for(let i=0;i<s.length;i++){const l=r[i];for(let u=0;u<o.length;u++)o[u]+=l[u]}return e.makeTensorInfo(a.shape,a.dtype,a.values)}};function Zp(n,t,e,s,r){const a=t.length,o=E(t),i=Se(t),l=Se(r),u=Dt(e,E(r));for(let c=0;c<o;++c){const h=Ur(c,a,i),d=new Array(h.length);for(let f=0;f<d.length;f++)d[f]=h[s[f]];u[hs(d,a,l)]=n[c]}return u}function Sn(n){const{inputs:t,attrs:e,backend:s}=n,{x:r}=t,{perm:a}=e;ge(r,"transpose");const i=new Array(r.shape.length);for(let h=0;h<i.length;h++)i[h]=r.shape[a[h]];const u=Zp(s.data.get(r.dataId).values,r.shape,r.dtype,a,i);return{dataId:s.write(u,i,r.dtype),shape:i,dtype:r.dtype}}const SD={kernelName:jr,backendName:"cpu",kernelFunc:Sn},ND={kernelName:"All",backendName:"cpu",kernelFunc:function CD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s;ge(r,"all");const i=ve(a,r.shape);let l=i;const u=Ct(l,r.shape.length);let c=r;null!=u&&(c=Sn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=Vt(l.length,r.shape.length)),sn("all",l,c.shape.length);const[h,d]=Zt(c.shape,l),p=E(d),f=on(E(h),c.dtype),g=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const x=y*p;let b=g[x];for(let w=0;w<p;++w){const I=g[x+w];b=b&&I}f[y]=b}null!=u&&e.disposeIntermediateTensorInfo(c);const m=e.makeTensorInfo(h,c.dtype,f);if(o){const x=ft({inputs:{x:m},backend:e,attrs:{shape:Lt(h,i)}});return e.disposeIntermediateTensorInfo(m),x}return m}},TD={kernelName:"Any",backendName:"cpu",kernelFunc:function kD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s;ge(r,"any");const i=ve(a,r.shape);let l=i;const u=Ct(l,r.shape.length);let c=r;null!=u&&(c=Sn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=Vt(l.length,r.shape.length)),sn("any",l,c.shape.length);const[h,d]=Zt(c.shape,l),p=E(d),f=on(E(h),c.dtype),g=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const x=y*p;let b=g[x];for(let w=0;w<p;++w){const I=g[x+w];b=b||I}f[y]=b}null!=u&&e.disposeIntermediateTensorInfo(c);const m=e.makeTensorInfo(h,c.dtype,f);if(o){const x=ft({inputs:{x:m},backend:e,attrs:{shape:Lt(h,i)}});return e.disposeIntermediateTensorInfo(m),x}return m}},$D={kernelName:_i,backendName:"cpu",kernelFunc:function _D(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a}=s;ge(r,"argMax");let o=ve(a,r.shape);const i=Ct(o,r.shape.length);let l=r;const u=[];null!=i&&(l=Sn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),o=Vt(o.length,l.shape.length)),o=[o[0]],sn("argMax",o,l.shape.length);const[c,h]=Zt(l.shape,o),p=on(E(c),"int32"),f=E(h),g=e.data.get(l.dataId).values;for(let m=0;m<p.length;++m){const y=m*f;let x=g[y],b=0;for(let w=0;w<f;++w){const I=g[y+w];I>x&&(x=I,b=w)}p[m]=b}return u.forEach(m=>e.disposeIntermediateTensorInfo(m)),e.makeTensorInfo(c,"int32",p)}},DD={kernelName:$i,backendName:"cpu",kernelFunc:function ED(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a}=s;ge(r,"argMin");let o=ve(a,r.shape);const i=Ct(o,r.shape.length);let l=r;const u=[];null!=i&&(l=Sn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),o=Vt(o.length,l.shape.length)),o=[o[0]],sn("argMin",o,l.shape.length);const[c,h]=Zt(l.shape,o),p=on(E(c),"int32"),f=E(h),g=e.data.get(l.dataId).values;for(let m=0;m<p.length;++m){const y=m*f;let x=g[y],b=0;for(let w=0;w<f;++w){const I=g[y+w];I<x&&(x=I,b=w)}p[m]=b}return u.forEach(m=>e.disposeIntermediateTensorInfo(m)),e.makeTensorInfo(c,"int32",p)}},AD=rt(Oa,n=>Math.asin(n)),RD={kernelName:Oa,backendName:"cpu",kernelFunc:AD},FD=rt(Pa,n=>Math.asinh(n)),OD={kernelName:Pa,backendName:"cpu",kernelFunc:FD},PD=rt(La,n=>Math.atan(n)),LD={kernelName:La,backendName:"cpu",kernelFunc:PD},VD=Bt((n,t)=>Math.atan2(n,t)),MD=en(Ma,VD),zD={kernelName:Ma,backendName:"cpu",kernelFunc:MD},BD=rt(Va,n=>Math.atanh(n)),WD={kernelName:Va,backendName:"cpu",kernelFunc:BD};function Jp(n,t,e,s,r,a){const o=r.strideHeight,i=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=r.padInfo.top,p=r.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=He(r.outShape,e),m=g.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],x=r.outShape[2]*r.outShape[3],b=r.outShape[3];for(let w=0;w<r.batchSize;++w){const I=w*y,S=w*s[0];for(let N=0;N<r.inChannels;++N)for(let k=0;k<r.outHeight;++k){const _=k*o-d,$=Math.max(0,_),L=Math.min(r.inHeight,c+_),B=I+k*x;for(let G=0;G<r.outWidth;++G){const H=G*i-p,j=Math.max(0,H),X=Math.min(r.inWidth,h+H);let Q=f,q=0,ee=0;for(let ae=$;ae<L;ae+=l){const ie=S+ae*s[1];for(let oe=j;oe<X;oe+=u){const le=n[ie+oe*s[2]+N];"max"===a&&le>Q?Q=le:"avg"===a&&(q+=le,ee++)}if(isNaN(Q))break}m[B+G*b+N]="avg"===a?q/ee:Q}}}return g}function kb(n,t,e,s,r=!1,a=!1){const o=He(s.outShape,"int32"),i=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,d=s.effectiveFilterWidth,p=s.padInfo.top,f=s.padInfo.left,g=He(t,e,n);for(let m=0;m<s.batchSize;++m)for(let y=0;y<s.inChannels;++y)for(let x=0;x<s.outHeight;++x){const b=x*i-p;let w=b;for(;w<0;)w+=u;const I=Math.min(s.inHeight,h+b);for(let S=0;S<s.outWidth;++S){const N=S*l-f;let k=N;for(;k<0;)k+=c;const _=Math.min(s.inWidth,d+N);let $=Number.NEGATIVE_INFINITY,L=-1;for(let B=w;B<I;B+=u){const G=B-b;for(let H=k;H<_;H+=c){const j=H-N,X=g.get(m,B,H,y);X>$&&($=X,L=r?a?((m*s.inHeight+B)*s.inWidth+H)*s.inChannels+y:(B*s.inWidth+H)*s.inChannels+y:G*d+j)}}o.set(L,m,x,S,y)}}return o}function Tb(n,t,e,s,r,a){const o=r.strideDepth,i=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,d=r.effectiveFilterDepth,p=r.effectiveFilterHeight,f=r.effectiveFilterWidth,g=r.padInfo.front,m=r.padInfo.top,y=r.padInfo.left,x="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,b=He(r.outShape,e),w=b.values,I=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],S=r.outShape[2]*r.outShape[3]*r.outShape[4],N=r.outShape[3]*r.outShape[4],k=r.outShape[4];for(let _=0;_<r.batchSize;++_){const $=_*I,L=_*s[0];for(let B=0;B<r.inChannels;++B)for(let G=0;G<r.outDepth;++G){const H=G*o-g;let j=H;for(;j<0;)j+=u;const X=Math.min(r.inDepth,d+H),Q=$+G*S;for(let q=0;q<r.outHeight;++q){const ee=q*i-m;let se=ee;for(;se<0;)se+=c;const ae=Math.min(r.inHeight,p+ee),ie=Q+q*N;for(let oe=0;oe<r.outWidth;++oe){const pe=oe*l-y;let le=pe;for(;le<0;)le+=h;const fe=Math.min(r.inWidth,f+pe),Ne=ie+oe*k;let Re=x,Ee=0,We=0;for(let at=j;at<X;at+=u){const gt=L+at*s[1];for(let Rt=se;Rt<ae;Rt+=c){const yt=gt+Rt*s[2];for(let ut=le;ut<fe;ut+=h){const wt=n[yt+ut*s[3]+B];if("max"===a&&wt>Re?Re=wt:"avg"===a&&(Ee+=wt,We++),isNaN(Re))break}if(isNaN(Re))break}if(isNaN(Re))break}w[Ne+B]="avg"===a?Ee/Math.max(We,1):Re}}}}return b}const HD={kernelName:Ei,backendName:"cpu",kernelFunc:function UD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;ge(r,"avgPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=s;v(nn(o,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const c=Wn(r.shape,a,o,1,i,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&ye(c.inShape,c.outShape))h=Cs({inputs:{x:r},backend:e});else{const d=e.data.get(r.dataId).values,p=Se(r.shape),f=Jp(d,0,r.dtype,p,c,"avg");h=e.makeTensorInfo(c.outShape,r.dtype,f.values)}return h}},qD={kernelName:Di,backendName:"cpu",kernelFunc:function jD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=s;ge(r,"avgPool3d");const c=_s(r.shape,a,o,1,i,l,u),d=Tb(e.data.get(r.dataId).values,0,r.dtype,Se(r.shape),c,"avg");return e.makeTensorInfo(d.shape,"float32",d.values)}},XD={kernelName:Ic,backendName:"cpu",kernelFunc:function KD(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:a}=t,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=s;ge([r,a],"avgPool3DGrad");const c=_s(a.shape,o,i,1,l,u),h=c.strideDepth,d=c.strideHeight,p=c.strideWidth,f=c.filterDepth,g=c.filterHeight,m=c.filterWidth,y=c.dilationDepth,x=c.dilationHeight,b=c.dilationWidth,w=c.effectiveFilterDepth,I=c.effectiveFilterHeight,S=c.effectiveFilterWidth,N=w-1-c.padInfo.front,k=S-1-c.padInfo.left,_=I-1-c.padInfo.top,$=He(a.shape,"float32"),L=1/(f*g*m),B=e.bufferSync(r);for(let G=0;G<c.batchSize;++G)for(let H=0;H<c.inChannels;++H)for(let j=0;j<c.inDepth;++j)for(let X=0;X<c.inHeight;++X)for(let Q=0;Q<c.inWidth;++Q){const q=j-N,ee=X-_,se=Q-k;let ae=0;for(let ie=0;ie<w;ie+=y){const oe=(q+ie)/h;if(!(oe<0||oe>=c.outDepth||Math.floor(oe)!==oe))for(let pe=0;pe<I;pe+=x){const le=(ee+pe)/d;if(!(le<0||le>=c.outHeight||Math.floor(le)!==le))for(let fe=0;fe<S;fe+=b){const Ne=(se+fe)/p;Ne<0||Ne>=c.outWidth||Math.floor(Ne)!==Ne||(ae+=B.get(G,oe,le,Ne,H))}}}$.set(ae*L,G,j,X,Q,H)}return e.makeTensorInfo($.shape,$.dtype,$.values)}},ZD={kernelName:vc,backendName:"cpu",kernelFunc:function YD(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:a}=t,o=a;ge([r,a],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=Wn(o.shape,i,l,1,u),h=c.strideHeight,d=c.strideWidth,p=c.filterHeight,f=c.filterWidth,g=c.dilationHeight,m=c.dilationWidth,y=c.effectiveFilterHeight,x=c.effectiveFilterWidth,b=x-1-c.padInfo.left,w=y-1-c.padInfo.top,I=He(o.shape,"float32"),S=1/(p*f),N=e.data.get(r.dataId).values,k=He(r.shape,"float32",N);for(let _=0;_<c.batchSize;++_)for(let $=0;$<c.inChannels;++$)for(let L=0;L<c.inHeight;++L)for(let B=0;B<c.inWidth;++B){const G=L-w,H=B-b;let j=0;for(let X=0;X<y;X+=g){const Q=(G+X)/h;if(!(Q<0||Q>=c.outHeight||Math.floor(Q)!==Q))for(let q=0;q<x;q+=m){const ee=(H+q)/d;ee<0||ee>=c.outWidth||Math.floor(ee)!==ee||(j+=k.get(_,Q,ee,$))}}I.set(j*S,_,L,B,$)}return e.makeTensorInfo(I.shape,I.dtype,I.values)}},QD={kernelName:Ui,backendName:"cpu",kernelFunc:function JD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,scale:a,offset:o,mean:i,variance:l}=t;v(i.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),v(null==o||i.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),v(null==a||i.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),ge([r,i,l,a,o],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=e.data.get(r.dataId).values,h=e.data.get(i.dataId).values,d=e.data.get(l.dataId).values,p=a?e.data.get(a.dataId).values:new Float32Array([1]),f=o?e.data.get(o.dataId).values:new Float32Array([0]),g=new Float32Array(c.length),m=f.length,y=p.length,x=d.length,b=h.length;let w=0,I=0,S=0,N=0;for(let k=0;k<c.length;++k)g[k]=f[w++]+(c[k]-h[I++])*p[S++]/Math.sqrt(d[N++]+u),w>=m&&(w=0),I>=b&&(I=0),S>=y&&(S=0),N>=x&&(N=0);return e.makeTensorInfo(r.shape,r.dtype,g)}};function _b(n,t,e,s,r){const a=jh(s,t,e),o=E(e),i=Se(s);if(a){const h=qh(t,i);return"string"===r?n.slice(h,h+o):n.subarray(h,h+o)}const u=He(s,r,"string"===r?$r(n):n),c=He(e,r);for(let h=0;h<c.size;++h){const d=c.indexToLoc(h),p=d.map((f,g)=>f+t[g]);c.set(u.get(...p),...d)}return"string"===r?Yg(c.values):c.values}function Vr(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:a,size:o}=s;ge(r,"slice");const[i,l]=Gl(r,a,o);Uh(r,i,l);const c=_b(e.data.get(r.dataId).values,i,l,r.shape,r.dtype);return e.makeTensorInfo(l,r.dtype,c)}const eA={kernelName:bl,backendName:"cpu",kernelFunc:Vr},nA={kernelName:Ri,backendName:"cpu",kernelFunc:function tA(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:a,crops:o}=s;ge([r],"batchToSpaceND");const i=a.reduce((y,x)=>y*x),l=Ko(r.shape,a,i),u=Xo(l.length,a.length),c=Yo(r.shape,a,i),h=$d(o,a.length),d=Ed(c,o,a.length),p=ft({inputs:{x:r},backend:e,attrs:{shape:l}}),f=Sn({inputs:{x:p},backend:e,attrs:{perm:u}}),g=ft({inputs:{x:f},backend:e,attrs:{shape:c}}),m=Vr({inputs:{x:g},backend:e,attrs:{begin:h,size:d}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),m}};function Qp(n,t,e,s,r){const a=E(s),o=on(r,e);for(let i=0;i<n.length;i++){const l=n[i];if(l<0)throw new Error("Input x must be non-negative!");l>=r||(o[l]+=a>0?t[i]:1)}return o}function $b(n,t,e,s=!1){const r=n.shape[0],a=n.shape[1],o=He([r,e],t.dtype);for(let i=0;i<r;i++)for(let l=0;l<a;l++){const u=n.get(i,l);if(u<0)throw new Error("Input x must be non-negative!");u>=e||o.set(s?1:t.size>0?o.get(i,u)+t.get(i,l):o.get(i,u)+1,i,u)}return o}const rA={kernelName:Sc,backendName:"cpu",kernelFunc:function sA(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:a}=t,{size:o}=s,u=Qp(e.data.get(r.dataId).values,e.data.get(a.dataId).values,a.dtype,a.shape,o);return e.makeTensorInfo([o],a.dtype,u)}},oA={kernelName:Rf,backendName:"cpu",kernelFunc:function aA(n){const{inputs:t,backend:e}=n,{s0:s,s1:r}=t,a=e.data.get(s.dataId).values,o=e.data.get(r.dataId).values,i=Ve(Array.from(a),Array.from(o));return e.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},Eb=ar(n=>Math.ceil(n)),iA=pa(Ba,Eb),lA={kernelName:Ba,backendName:"cpu",kernelFunc:iA},uA=rt(Wa,(n,t)=>n>t.clipValueMax?t.clipValueMax:n<t.clipValueMin?t.clipValueMin:n),cA={kernelName:Wa,backendName:"cpu",kernelFunc:uA},hA={kernelName:Fi,backendName:"cpu",kernelFunc:n=>{const{x:t}=n.inputs,e=n.backend,s=new Float32Array(E(t.shape)),r=e.data.get(t.dataId),o=r.complexTensorInfos.imag,i=e.data.get(r.complexTensorInfos.real.dataId).values,l=e.data.get(o.dataId).values;for(let u=0;u<i.length;u++)s[u]=Math.hypot(i[u],l[u]);return e.makeOutput(s,t.shape,"float32")}};function Db(n,t,e,s){const r=zt(e,E(t));if(s&&"string"!==e){let a=0;n.forEach(o=>{const i=E(o.shape);r.set(o.vals,a),a+=i})}else{let a=0;n.forEach(o=>{const i="string"===e?$r(o.vals):o.vals;let l=0;for(let u=0;u<o.shape[0];++u){const c=u*t[1]+a;for(let h=0;h<o.shape[1];++h)r[c+h]=i[l++]}a+=o.shape[1]})}return r}function ma(n){const{inputs:t,backend:e}=n,{input:s}=t,r=e.data.get(s.dataId).complexTensorInfos.imag,a=e.data.get(r.dataId).values;return e.makeTensorInfo(r.shape,r.dtype,a)}const dA={kernelName:Bc,backendName:"cpu",kernelFunc:ma};function ga(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s,a=ve(r,t[0].shape)[0];kd(t.map(g=>g.shape),a);let i=gs(t.map(g=>g.shape),a);if(0===E(i))return e.makeTensorInfo(i,t[0].dtype,[]);const l=t.filter(g=>E(g.shape)>0);if(1===l.length)return Cs({inputs:{x:l[0]},backend:e});if("complex64"===l[0].dtype){const g=l.map(w=>Lr({inputs:{input:w},backend:e})),m=l.map(w=>ma({inputs:{input:w},backend:e})),y=ga({inputs:g,backend:e,attrs:{axis:a}}),x=ga({inputs:m,backend:e,attrs:{axis:a}}),b=_n({inputs:{real:y,imag:x},backend:e});return g.forEach(w=>e.disposeIntermediateTensorInfo(w)),m.forEach(w=>e.disposeIntermediateTensorInfo(w)),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(x),b}const u=l.map(g=>{const m=E(g.shape.slice(a));return ft({inputs:{x:g},backend:e,attrs:{shape:[-1,m]}})}),c=u.map(g=>({vals:e.data.get(g.dataId).values,shape:g.shape}));i=gs(u.map(g=>g.shape),1);const d=Db(c,i,t[0].dtype,1===u[0].shape[0]),p=gs(l.map(g=>g.shape),a),f=e.makeTensorInfo(p,t[0].dtype,d);return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),f}const pA={kernelName:Oi,backendName:"cpu",kernelFunc:ga};function Ab(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a}=t,{strides:o,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s;ge([r,a],"conv2d");const h=$s(l),d=Yt(r.shape,a.shape,o,u,i,c,!1,h),p=d.filterHeight,f=d.filterWidth,g=d.dilationHeight,m=d.dilationWidth,y=d.padInfo.left,x=d.padInfo.top,b="channelsLast"===d.dataFormat,w=new ln(d.outShape,r.dtype),I=Se(r.shape),S=Se(a.shape),N=I[0],k=b?I[1]:I[2],_=b?I[2]:1,$=b?1:I[1],L=w.strides[0],B=b?w.strides[1]:w.strides[2],G=b?w.strides[2]:1,H=b?1:w.strides[1],j=e.data.get(r.dataId).values,X=e.data.get(a.dataId).values,Q=w.values;for(let q=0;q<d.batchSize;++q){const ee=q*N,se=q*L;for(let ae=0;ae<d.outHeight;++ae){const ie=se+ae*B,oe=ae*d.strideHeight-x;for(let pe=0;pe<p;++pe){const le=oe+pe*g;if(le<0||le>=d.inHeight)continue;const fe=pe*S[0],Ne=ee+le*k;for(let Re=0;Re<d.outWidth;++Re){const Ee=ie+Re*G,We=Re*d.strideWidth-y;for(let Ue=0;Ue<f;++Ue){const at=We+Ue*m;if(at<0||at>=d.inWidth)continue;const Rt=Ne+at*_;let yt=fe+Ue*S[1];for(let ut=0;ut<d.inChannels;++ut){const Tt=j[Rt+ut*$];for(let wt=0;wt<d.outChannels;++wt)Q[Ee+wt*H]+=Tt*X[yt+wt];yt+=d.outChannels}}}}}}return e.makeTensorInfo(w.shape,w.dtype,Q)}const fA={kernelName:Pi,backendName:"cpu",kernelFunc:Ab},gA={kernelName:Nc,backendName:"cpu",kernelFunc:function mA(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:a}=t,{strides:o,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;ge([r,a],"conv2dBackpropFilter");const h=$s(l),d=Yt(r.shape,c,o,1,i,u,!1,h),{strideHeight:p,strideWidth:f,filterHeight:g,filterWidth:m}=d,y="channelsLast"===d.dataFormat,x=new ln(d.filterShape,"float32"),b=d.padInfo.left,w=d.padInfo.top,I=e.data.get(r.dataId).values,S=e.data.get(a.dataId).values,N=new ln(r.shape,r.dtype,I),k=new ln(a.shape,a.dtype,S);for(let _=0;_<g;++_){const $=Math.max(0,Math.ceil((w-_)/p)),L=Math.min(d.outHeight,(d.inHeight+w-_)/p);for(let B=0;B<m;++B){const G=Math.max(0,Math.ceil((b-B)/f)),H=Math.min(d.outWidth,(d.inWidth+b-B)/f);for(let j=0;j<d.inChannels;++j)for(let X=0;X<d.outChannels;++X){let Q=0;for(let q=0;q<d.batchSize;++q)for(let ee=$;ee<L;++ee){const se=_+ee*p-w;for(let ae=G;ae<H;++ae){const ie=B+ae*f-b;Q+=y?N.get(q,se,ie,j)*k.get(q,ee,ae,X):N.get(q,j,se,ie)*k.get(q,X,ee,ae)}}x.set(Q,_,B,j,X)}}}return e.makeTensorInfo(x.shape,x.dtype,x.values)}},xA={kernelName:Li,backendName:"cpu",kernelFunc:function yA(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:a}=t,{inputShape:o,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s;ge([r,a],"conv2dBackpropInput");const h=Se(a.shape),d=Se(r.shape);let p=$s(u);const f=Yt(o,a.shape,i,1,l,c,!1,p),g=new ln(f.inShape,"float32"),m=g.values,y=e.data.get(r.dataId).values,x=e.data.get(a.dataId).values,[b,w,I]=h,{batchSize:S,filterHeight:N,filterWidth:k,inChannels:_,inHeight:$,inWidth:L,outChannels:B,outHeight:G,outWidth:H,strideHeight:j,strideWidth:X}=f;p=f.dataFormat;const Q=N-1-f.padInfo.top,q=k-1-f.padInfo.left,ee="channelsLast"===p,se=g.strides[0],ae=ee?g.strides[1]:g.strides[2],ie=ee?g.strides[2]:1,oe=ee?1:g.strides[1],pe=d[0],le=ee?d[1]:d[2],fe=ee?d[2]:1,Ne=ee?1:d[1];for(let Re=0;Re<S;++Re)for(let Ee=0;Ee<_;++Ee)for(let We=0;We<$;++We){const Ue=We-Q,at=Math.max(0,Math.ceil(Ue/j)),gt=Math.min(G,(N+Ue)/j);for(let Rt=0;Rt<L;++Rt){const yt=Rt-q,ut=Math.max(0,Math.ceil(yt/X)),Tt=Math.min(H,(k+yt)/X);let wt=0;for(let an=at;an<gt;++an){const hr=an*j-Ue;for(let zn=ut;zn<Tt;++zn){const cs=pe*Re+le*an+fe*zn,Vs=b*(N-1-hr)+w*(k-1-(zn*X-yt))+I*Ee;for(let dr=0;dr<B;++dr)wt+=y[cs+Ne*dr]*x[Vs+dr]}}m[se*Re+ae*We+ie*Rt+oe*Ee]=wt}}return e.makeTensorInfo(g.shape,g.dtype,g.values)}},wA={kernelName:Vi,backendName:"cpu",kernelFunc:function bA(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a}=t,{strides:o,pad:i,dilations:l}=s;ge([r,a],"conv3d");const u=js(r.shape,a.shape,o,l,i),{filterDepth:c,filterHeight:h,filterWidth:d,dilationDepth:p,dilationHeight:f,dilationWidth:g,padInfo:m}=u,y=m.front,x=m.left,b=m.top,w=new ln(u.outShape,r.dtype),I=e.data.get(r.dataId).values,S=e.data.get(a.dataId).values,N=w.values,k=Se(r.shape),_=Se(a.shape);for(let $=0;$<u.batchSize;++$){const L=$*k[0],B=$*w.strides[0];for(let G=0;G<u.outDepth;++G){const H=B+G*w.strides[1],j=G*u.strideDepth-y;for(let X=0;X<c;++X){const Q=j+X*p;if(Q<0||Q>=u.inDepth)continue;const q=X*_[0],ee=L+Q*k[1];for(let se=0;se<u.outHeight;++se){const ae=H+se*w.strides[2],ie=se*u.strideHeight-b;for(let oe=0;oe<h;++oe){const pe=ie+oe*f;if(pe<0||pe>=u.inHeight)continue;const le=q+oe*_[1],fe=ee+pe*k[2];for(let Ne=0;Ne<u.outWidth;++Ne){const Re=ae+Ne*u.outChannels,Ee=Ne*u.strideWidth-x;for(let We=0;We<d;++We){const Ue=Ee+We*g;if(Ue<0||Ue>=u.inWidth)continue;const gt=fe+Ue*u.inChannels;let Rt=le+We*_[2];for(let yt=0;yt<u.inChannels;++yt){const ut=I[gt+yt];for(let Tt=0;Tt<u.outChannels;++Tt)N[Re+Tt]+=ut*S[Rt+Tt];Rt+=u.outChannels}}}}}}}}return e.makeTensorInfo(w.shape,w.dtype,w.values)}},IA={kernelName:kc,backendName:"cpu",kernelFunc:function vA(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:a}=t,{strides:o,pad:i,filterShape:l}=s;ge([r,a],"conv3dBackpropFilterV2");const u=Se(r.shape),c=Se(a.shape),h=js(r.shape,l,o,1,i),d=h.strideDepth,p=h.strideHeight,f=h.strideWidth,g=h.filterDepth,m=h.filterHeight,y=h.filterWidth,x=new ln(h.filterShape,"float32"),b=x.values,[w,I,S,N]=x.strides,k=e.data.get(a.dataId).values,[_,$,L,B]=c,G=e.data.get(r.dataId).values,[H,j,X,Q]=u,q=h.padInfo.front,ee=h.padInfo.left,se=h.padInfo.top;for(let ae=0;ae<g;++ae){const ie=Math.max(0,Math.ceil((q-ae)/d)),oe=Math.min(h.outDepth,(h.inDepth+q-ae)/d),pe=ae*w;for(let le=0;le<m;++le){const fe=Math.max(0,Math.ceil((se-le)/p)),Ne=Math.min(h.outHeight,(h.inHeight+se-le)/p),Re=le*I+pe;for(let Ee=0;Ee<y;++Ee){const We=Math.max(0,Math.ceil((ee-Ee)/f)),Ue=Math.min(h.outWidth,(h.inWidth+ee-Ee)/f),at=Ee*S+Re;for(let gt=0;gt<h.inChannels;++gt){const Rt=gt*N+at;for(let yt=0;yt<h.outChannels;++yt){let ut=0;for(let Tt=0;Tt<h.batchSize;++Tt){const wt=Tt*H,Ls=Tt*_;for(let an=ie;an<oe;++an){const zn=(ae+an*d-q)*j+wt,Gr=an*$+Ls;for(let cs=fe;cs<Ne;++cs){const dr=(le+cs*p-se)*X+zn,pr=cs*L+Gr;for(let fr=We;fr<Ue;++fr)ut+=G[(Ee+fr*f-ee)*Q+dr+gt]*k[fr*B+pr+yt]}}}b[Rt+yt]=ut}}}}}return e.makeTensorInfo(x.shape,x.dtype,x.values)}},CA={kernelName:Tc,backendName:"cpu",kernelFunc:function SA(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:a}=t,{pad:o,strides:i,inputShape:l}=s;ge([r],"conv3dBackpropInputV2");const u=Se(r.shape),c=Se(a.shape),h=js(l,a.shape,i,1,o),d=new ln(h.inShape,"float32"),p=d.values,[f,g,m,y]=d.strides,x=e.data.get(r.dataId).values,[b,w,I,S]=u,N=e.data.get(a.dataId).values,[k,_,$,L]=c,{batchSize:B,filterDepth:G,filterHeight:H,filterWidth:j,inChannels:X,inDepth:Q,inHeight:q,inWidth:ee,outChannels:se,outDepth:ae,outHeight:ie,outWidth:oe,strideDepth:pe,strideHeight:le,strideWidth:fe}=h,Ne=G-1-h.padInfo.front,Re=H-1-h.padInfo.top,Ee=j-1-h.padInfo.left;for(let We=0;We<B;++We)for(let Ue=0;Ue<X;++Ue)for(let at=0;at<Q;++at){const gt=at-Ne,Rt=Math.max(0,Math.ceil(gt/pe)),yt=Math.min(ae,(G+gt)/pe);for(let ut=0;ut<q;++ut){const Tt=ut-Re,wt=Math.max(0,Math.ceil(Tt/le)),Ls=Math.min(ie,(H+Tt)/le);for(let an=0;an<ee;++an){const hr=an-Ee,zn=Math.max(0,Math.ceil(hr/fe)),Gr=Math.min(oe,(j+hr)/fe);let cs=0;for(let Vs=Rt;Vs<yt;++Vs){const dr=Vs*pe-gt;for(let pr=wt;pr<Ls;++pr){const fr=pr*le-Tt;for(let Ni=zn;Ni<Gr;++Ni){const kf=b*We+w*Vs+I*pr+S*Ni,uj=k*(G-1-dr)+_*(H-1-fr)+$*(j-1-(Ni*fe-hr))+L*Ue;for(let cc=0;cc<se;++cc)cs+=x[kf+cc]*N[uj+cc]}}}p[f*We+g*at+m*ut+y*an+Ue]=cs}}}return e.makeTensorInfo(d.shape,d.dtype,d.values)}},NA=rt(Ga,n=>Math.cos(n)),kA={kernelName:Ga,backendName:"cpu",kernelFunc:NA},TA=rt(Ua,n=>Math.cosh(n)),_A={kernelName:Ua,backendName:"cpu",kernelFunc:TA},EA={kernelName:$c,backendName:"cpu",kernelFunc:function $A(n){const{inputs:t,backend:e,attrs:s}=n,{image:r,boxes:a,boxInd:o}=t,{cropSize:i,method:l,extrapolationValue:u}=s,[c,h,d,p]=r.shape,f=a.shape[0],[g,m]=i,y=He([f,g,m,p],"float32"),x=e.data.get(a.dataId).values,b=e.data.get(o.dataId).values,w=e.data.get(r.dataId).values,I=Se(r.shape),S=Se(y.shape);for(let N=0;N<f;N++){const k=4*N,_=x[k],$=x[k+1],L=x[k+2],B=x[k+3],G=b[N];if(G>=c)continue;const H=g>1?(L-_)*(h-1)/(g-1):0,j=m>1?(B-$)*(d-1)/(m-1):0;for(let X=0;X<g;X++){const Q=g>1?_*(h-1)+X*H:.5*(_+L)*(h-1);if(Q<0||Q>h-1)for(let q=0;q<m;q++)for(let ee=0;ee<p;ee++)y.values[ee+q*S[2]+X*S[1]+N*S[0]]=u;else if("bilinear"===l){const q=Math.floor(Q),ee=Math.ceil(Q),se=Q-q;for(let ae=0;ae<m;ae++){const ie=m>1?$*(d-1)+ae*j:.5*($+B)*(d-1);if(ie<0||ie>d-1){for(let fe=0;fe<p;fe++)y.values[fe+ae*S[2]+X*S[1]+N*S[0]]=u;continue}const oe=Math.floor(ie),pe=Math.ceil(ie),le=ie-oe;for(let fe=0;fe<p;fe++){let Ne=fe+oe*I[2]+q*I[1]+G*I[0];const Re=w[Ne];Ne=fe+pe*I[2]+q*I[1]+G*I[0];const Ee=w[Ne];Ne=fe+oe*I[2]+ee*I[1]+G*I[0];const We=w[Ne];Ne=fe+pe*I[2]+ee*I[1]+G*I[0];const Ue=w[Ne],at=Re+(Ee-Re)*le;Ne=fe+ae*S[2]+X*S[1]+N*S[0],y.values[Ne]=at+(We+(Ue-We)*le-at)*se}}}else for(let q=0;q<m;++q){const ee=m>1?$*(d-1)+q*j:.5*($+B)*(d-1);if(ee<0||ee>d-1){for(let ie=0;ie<p;ie++)y.values[ie+q*S[2]+X*S[1]+N*S[0]]=u;continue}const se=Math.round(ee),ae=Math.round(Q);for(let ie=0;ie<p;ie++)y.values[ie+q*S[2]+X*S[1]+N*S[0]]=w[ie+se*I[2]+ae*I[1]+G*I[0]]}}}return e.makeTensorInfo(y.shape,y.dtype,y.values)}},AA={kernelName:_c,backendName:"cpu",kernelFunc:function DA(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,exclusive:o,reverse:i}=s;ge(r,"cumprod");const l=Ct([a],r.shape.length);let u=r;null!=l&&(u=Sn({inputs:{x:r},backend:e,attrs:{perm:l}}));const c=Vt(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Cn(u.dtype,"int32"),d=fc(E(u.shape),h),p=e.data.get(u.dataId).values,f=u.shape[u.shape.length-1],g=i?(y,x)=>y+f-x-1:(y,x)=>y+x;for(let y=0;y<p.length;y+=f)for(let x=0;x<f;x++){const b=g(y,x);if(0===x)d[b]=o?1:p[b];else{const w=g(y,x-1);d[b]=o?p[w]*d[w]:p[b]*d[w]}}const m=e.makeTensorInfo(u.shape,h,d);if(null!=l){const x=Sn({inputs:{x:m},backend:e,attrs:{perm:Ks(l)}});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(u),x}return m}},FA={kernelName:Mi,backendName:"cpu",kernelFunc:function RA(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,exclusive:o,reverse:i}=s;ge(r,"cumsum");const l=Ct([a],r.shape.length);let u=r;null!=l&&(u=Sn({inputs:{x:r},backend:e,attrs:{perm:l}}));const c=Vt(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Cn(u.dtype,"int32"),d=on(E(u.shape),h),p=e.data.get(u.dataId).values,f=u.shape[u.shape.length-1],g=i?(y,x)=>y+f-x-1:(y,x)=>y+x;for(let y=0;y<p.length;y+=f)for(let x=0;x<f;x++){const b=g(y,x);if(0===x)d[b]=o?0:p[b];else{const w=g(y,x-1);d[b]=o?p[w]+d[w]:p[b]+d[w]}}const m=e.makeTensorInfo(u.shape,h,d);if(null!=l){const x=Sn({inputs:{x:m},backend:e,attrs:{perm:Ks(l)}});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(u),x}return m}},PA={kernelName:Ec,backendName:"cpu",kernelFunc:function OA(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:a}=t,{size:o,binaryOutput:i}=s;if(1===r.shape.length){const c=Qp(e.data.get(r.dataId).values,e.data.get(a.dataId).values,a.dtype,a.shape,o);return e.makeTensorInfo([o],a.dtype,c)}if(2===r.shape.length){const c=$b(e.bufferSync(r),e.bufferSync(a),o,i);return e.makeTensorInfo(c.shape,a.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},VA={kernelName:Dc,backendName:"cpu",kernelFunc:function LA(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockSize:a,dataFormat:o}=s;v("NHWC"===o,()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`);const i=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],h=l*a,d=u*a,p=c/(a*a),f=e.data.get(r.dataId).values,g=new Float32Array(i*h*d*p);let m=0;for(let y=0;y<i;++y)for(let x=0;x<h;++x){const b=Math.floor(x/a),w=x%a;for(let I=0;I<d;++I){const S=Math.floor(I/a),k=(w*a+I%a)*p;for(let _=0;_<p;++_)g[m++]=f[_+k+c*(S+u*(b+l*y))]}}return e.makeTensorInfo([i,h,d,p],r.dtype,g)}};function Rb(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a}=t,{strides:o,pad:i,dilations:l,dimRoundingMode:u}=s;ge([r,a],"depthwiseConv2DNative");const c=Se(r.shape),h=Se(a.shape);let d=l;null==d&&(d=[1,1]),v(nn(o,d),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${d}'`);const p=Yt(r.shape,a.shape,o,d,i,u,!0),{filterHeight:f,filterWidth:g,dilationHeight:m,dilationWidth:y,padInfo:x}=p,b=x.left,w=x.top,I=p.outChannels/p.inChannels,S=new ln(p.outShape,r.dtype),N=e.data.get(r.dataId).values,k=e.data.get(a.dataId).values,_=S.values;for(let $=0;$<p.batchSize;++$){const L=$*c[0],B=$*S.strides[0];for(let G=0;G<p.outHeight;++G){const H=B+G*S.strides[1],j=G*p.strideHeight-w;for(let X=0;X<f;++X){const Q=j+X*m;if(Q<0||Q>=p.inHeight)continue;const q=X*h[0],ee=L+Q*c[1];for(let se=0;se<p.outWidth;++se){const ae=H+se*S.strides[2],ie=se*p.strideWidth-b;for(let oe=0;oe<g;++oe){const pe=ie+oe*y;if(pe<0||pe>=p.inWidth)continue;const fe=ee+pe*p.inChannels;let Ne=ae,Re=q+oe*h[1];for(let Ee=0;Ee<p.inChannels;++Ee){const We=N[fe+Ee];for(let Ue=0;Ue<I;++Ue)_[Ne+Ue]+=We*k[Re+Ue];Ne+=I,Re+=I}}}}}}return e.makeTensorInfo(S.shape,S.dtype,S.values)}const MA={kernelName:zi,backendName:"cpu",kernelFunc:Rb},BA={kernelName:Ac,backendName:"cpu",kernelFunc:function zA(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s;ge([r,a],"depthwiseConv2dNativeBackpropFilter");const h=Yt(r.shape,c,o,i,l,u,!0),{strideHeight:d,strideWidth:p,filterHeight:f,filterWidth:g}=h,m=new ln(h.filterShape,"float32"),y=h.padInfo.left,x=h.padInfo.top,b=h.outChannels/h.inChannels,w=e.data.get(r.dataId).values,I=new ln(r.shape,r.dtype,w),S=e.data.get(a.dataId).values,N=new ln(a.shape,a.dtype,S);for(let k=0;k<f;++k){const _=Math.max(0,Math.ceil((x-k)/d)),$=Math.min(h.outHeight,(h.inHeight+x-k)/d);for(let L=0;L<g;++L){const B=Math.max(0,Math.ceil((y-L)/p)),G=Math.min(h.outWidth,(h.inWidth+y-L)/p);for(let H=0;H<h.outChannels;++H){const j=Math.trunc(H/b),X=H%b;let Q=0;for(let q=0;q<h.batchSize;++q)for(let ee=_;ee<$;++ee){const se=k+ee*d-x;for(let ae=B;ae<G;++ae)Q+=I.get(q,se,L+ae*p-y,j)*N.get(q,ee,ae,H)}m.set(Q,k,L,j,X)}}}return e.makeTensorInfo(m.shape,m.dtype,m.values)}},GA={kernelName:Rc,backendName:"cpu",kernelFunc:function WA(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s;ge([r,a],"depthwiseConv2DNativeBackpropInput");const h=Se(r.shape),d=Se(a.shape),p=Yt(c,a.shape,o,i,l,u,!0),f=new ln(p.inShape,"float32"),g=f.values,[m,y,x]=f.strides,b=e.data.get(r.dataId).values,[w,I,S]=h,N=e.data.get(a.dataId).values,[k,_,$]=d,{batchSize:L,filterHeight:B,filterWidth:G,inChannels:H,inHeight:j,inWidth:X,outChannels:Q,outHeight:q,outWidth:ee,strideHeight:se,strideWidth:ae}=p,ie=B-1-p.padInfo.top,oe=G-1-p.padInfo.left,pe=Q/H;for(let le=0;le<L;++le)for(let fe=0;fe<H;++fe)for(let Ne=0;Ne<j;++Ne){const Re=Ne-ie,Ee=Math.max(0,Math.ceil(Re/se)),We=Math.min(q,(B+Re)/se);for(let Ue=0;Ue<X;++Ue){const at=Ue-oe,gt=Math.max(0,Math.ceil(at/ae)),Rt=Math.min(ee,(G+at)/ae);let yt=0;for(let ut=Ee;ut<We;++ut){const Tt=ut*se-Re;for(let wt=gt;wt<Rt;++wt){const an=w*le+I*ut+S*wt,hr=k*(B-1-Tt)+_*(G-1-(wt*ae-at))+$*fe;for(let zn=0;zn<pe;++zn)yt+=b[an+(fe*pe+zn)]*N[hr+zn]}}g[m*le+y*Ne+x*Ue+fe]=yt}}return e.makeTensorInfo(f.shape,f.dtype,f.values)}},HA={kernelName:"Diag",backendName:"cpu",kernelFunc:function UA(n){const{inputs:t,backend:e}=n,{x:s}=t,r=E(s.shape),a=e.data.get(s.dataId).values,o=He([r,r],s.dtype),i=o.values;for(let u=0;u<a.length;u++)i[u*r+u]=a[u];const l=[...s.shape,...s.shape];return e.makeTensorInfo(l,o.dtype,o.values)}},jA={kernelName:Bi,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r}=n,{strides:a,pad:o,dilations:i}=e,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,d=r.shape.length,{batchSize:p,inHeight:f,inWidth:g,inChannels:m,outHeight:y,outWidth:x,padInfo:b,strideHeight:w,strideWidth:I,filterHeight:S,filterWidth:N,dilationHeight:k,dilationWidth:_,outShape:$}=Mo(s.shape,r.shape,a,o,"NHWC",i),L=E($),B=$.length,G=zt(s.dtype,L);for(let j=0;j<p;++j)for(let X=0;X<y;++X){const Q=X*w-b.top;for(let q=0;q<x;++q){const ee=q*I-b.left;for(let se=0;se<m;++se){let ae=Number.MIN_SAFE_INTEGER;for(let oe=0;oe<S;++oe){const pe=Q+oe*k;if(pe>=0&&pe<f)for(let le=0;le<N;++le){const fe=ee+le*_;if(fe>=0&&fe<g){const Ne=hs([j,pe,fe,se],c,Se(s.shape)),Re=hs([oe,le,se],d,Se(r.shape)),Ee=u[Ne]+h[Re];Ee>ae&&(ae=Ee)}}}G[hs([j,X,q,se],B,Se($))]=ae}}}return{dataId:l.write(yr(G,s.dtype),$,s.dtype),shape:$,dtype:s.dtype}}},qA={kernelName:Oc,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r,dy:a}=n,{strides:o,pad:i,dilations:l}=e,u=t,c=Jn(s.shape,u.data.get(s.dataId).values),h=Jn(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:g,outHeight:m,outWidth:y,padInfo:x,strideHeight:b,strideWidth:w,filterHeight:I,filterWidth:S,dilationHeight:N,dilationWidth:k,outShape:_}=Mo(s.shape,r.shape,o,i,"NHWC",l);v(a.rank===_.length,()=>`Error in ${Oc}, dy must have the same rank as output ${_.length}, but got ${a.rank}`);const $=Jn(_,u.data.get(a.dataId).values),L=$f(r.shape,r.dtype);for(let G=0;G<d;++G)for(let H=0;H<m;++H){const j=H*b-x.top;for(let X=0;X<y;++X){const Q=X*w-x.left;for(let q=0;q<g;++q){let ee=Number.MIN_SAFE_INTEGER,se=0,ae=0;for(let ie=0;ie<I;++ie){const oe=j+ie*N;if(oe>=0&&oe<p)for(let pe=0;pe<S;++pe){const le=Q+pe*k;if(le>=0&&le<f){const fe=c[G][oe][le][q]+h[ie][pe][q];fe>ee&&(ee=fe,se=ie,ae=pe)}}}L[se][ae][q]+=$[G][H][X][q]}}}return{dataId:u.write(yr(L,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},KA={kernelName:Fc,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r,dy:a}=n,{strides:o,pad:i,dilations:l}=e,u=t,c=Jn(s.shape,u.data.get(s.dataId).values),h=Jn(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:g,outHeight:m,outWidth:y,padInfo:x,strideHeight:b,strideWidth:w,filterHeight:I,filterWidth:S,dilationHeight:N,dilationWidth:k,outShape:_}=Mo(s.shape,r.shape,o,i,"NHWC",l);v(a.rank===_.length,()=>`Error in ${Fc}, dy must have the same rank as output ${_.length}, but got ${a.rank}`);const $=Jn(_,u.data.get(a.dataId).values),L=$f(s.shape,s.dtype);for(let G=0;G<d;++G)for(let H=0;H<m;++H){const j=H*b-x.top;for(let X=0;X<y;++X){const Q=X*w-x.left;for(let q=0;q<g;++q){let ee=Number.MIN_SAFE_INTEGER,se=j<0?0:j,ae=Q<0?0:Q;for(let ie=0;ie<I;++ie){const oe=j+ie*N;if(oe>=0&&oe<p)for(let pe=0;pe<S;++pe){const le=Q+pe*k;if(le>=0&&le<f){const fe=c[G][oe][le][q]+h[ie][pe][q];fe>ee&&(ee=fe,se=oe,ae=le)}}}L[G][se][ae][q]+=$[G][H][X][q]}}}return{dataId:u.write(yr(L,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},ef=Bt((n,t)=>n*t),XA=Yp((n,t,e,s)=>({real:n*e-t*s,imag:n*s+t*e})),zu=en(uo,ef,XA),YA={kernelName:uo,backendName:"cpu",kernelFunc:zu};function di(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s;let i;ge(r,"sum"),i="bool"===r.dtype?or({inputs:{x:r},backend:e,attrs:{dtype:"int32"}}):Cs({inputs:{x:r},backend:e});const l=i.shape.length,u=ve(a,i.shape),c=Ct(u,l);let h=u,d=i;null!=c&&(d=Sn({inputs:{x:i},backend:e,attrs:{perm:c}}),h=Vt(h.length,l)),sn("sum",h,d.shape.length);const[p,f]=Zt(d.shape,h);let m=Mu(e,p,Cn(d.dtype,"int32"));const y=E(f),x=e.data.get(m.dataId).values,b=e.data.get(d.dataId).values;for(let w=0;w<x.length;++w){const I=w*y;let S=0;for(let N=0;N<y;++N)S+=b[I+N];x[w]=S}if(o){const I=m;m=ft({inputs:{x:m},backend:e,attrs:{shape:Lt(m.shape,u)}}),e.disposeIntermediateTensorInfo(I)}return e.disposeIntermediateTensorInfo(i),null!=c&&e.disposeIntermediateTensorInfo(d),m}const ZA={kernelName:wl,backendName:"cpu",kernelFunc:di},QA={kernelName:"Einsum",backendName:"cpu",kernelFunc:function JA(n){const{inputs:t,backend:e,attrs:s}=n,{equation:r}=s,a=t,{allDims:o,summedDims:i,idDims:l}=zd(r,a.length);Wd(o.length,l,a);const{path:u,steps:c}=Gd(i,l),h=c.length;let d=null,p=o.length;const f=[];for(let g=0;g<h;++g){for(const m of c[g]){const{permutationIndices:y,expandDims:x}=Bd(p,l[m]);let b;Ud(y)?b=a[m]:(b=Sn({inputs:{x:a[m]},backend:e,attrs:{perm:y}}),f.push(b));const w=b.shape.slice();for(let I=0;I<x.length;++I)w.splice(x[I],0,1);ye(b.shape,w)||(b=ft({inputs:{x:b},backend:e,attrs:{shape:w}}),f.push(b)),null===d?d=b:(d=zu({inputs:{a:b,b:d},backend:e}),f.push(d))}g<h-1&&(u[g]>=0&&(d=di({inputs:{x:d},backend:e,attrs:{axis:u[g]-(o.length-p),keepDims:!1}}),f.push(d)),p--)}for(const g of f)g!==d&&e.disposeIntermediateTensorInfo(g);return d}},tR={kernelName:Pc,backendName:"cpu",kernelFunc:function eR(n){const{inputs:t,backend:e}=n,{dy:s,y:r}=t;ge([s,r],"eluGrad");const a=new Float32Array(E(r.shape)),o=e.data.get(r.dataId).values,i=e.data.get(s.dataId).values;for(let l=0;l<o.length;++l){const u=o[l];a[l]=u>=1?i[l]:i[l]*(u+1)}return e.makeTensorInfo(r.shape,"float32",a)}},Fb=Bt((n,t)=>n===t?1:0),Ob=en(Wi,Fb,null,"bool"),nR={kernelName:Wi,backendName:"cpu",kernelFunc:Ob},sR=Ad,rR=Rd,aR=Fd,oR=Od,iR=Pd,lR=Ld,uR=rt(qa,n=>{const t=Math.sign(n),e=Math.abs(n),s=1/(1+sR*e);return t*(1-((((lR*s+iR)*s+oR)*s+aR)*s+rR)*s*Math.exp(-e*e))}),cR={kernelName:qa,backendName:"cpu",kernelFunc:uR},Pb=ar(n=>Math.exp(n)),Lb=pa(Ka,Pb,"float32"),hR={kernelName:Ka,backendName:"cpu",kernelFunc:Lb};function Bu(n){const{inputs:t,backend:e,attrs:s}=n,{input:r}=t,{dim:a}=s,o=r.shape.length,i=r.shape.slice();let l=a;return a<0&&(v(-(o+1)<=a,()=>`Axis must be in the interval [${-(o+1)}, ${o}]`),l=o+a+1),i.splice(l,0,1),ft({inputs:{x:r},backend:e,attrs:{shape:i}})}const dR={kernelName:Gi,backendName:"cpu",kernelFunc:Bu},Vb=ar(n=>Math.expm1(n)),pR=pa(Xa,Vb),fR={kernelName:Xa,backendName:"cpu",kernelFunc:pR},mR=Bt((n,t)=>n/t),nf=en(Ha,mR),sf={kernelName:Ha,backendName:"cpu",kernelFunc:nf},Mb=Bt((n,t)=>n-t),gR=Yp((n,t,e,s)=>({real:n-e,imag:t-s})),rf=en(No,Mb,gR),yR={kernelName:No,backendName:"cpu",kernelFunc:rf};function zb(n,t,e){const s=n.shape,r=s[0],a=s[1],o=e.data.get(n.dataId),i=o.complexTensorInfos.real,l=o.complexTensorInfos.imag,u=[r,a],c=E(u),h=Dt("float32",c),d=Dt("float32",c);for(let m=0;m<r;m++){const y=Vr({inputs:{x:i},backend:e,attrs:{begin:[m,0],size:[1,a]}}),x=Vr({inputs:{x:l},backend:e,attrs:{begin:[m,0],size:[1,a]}}),b=_n({inputs:{real:y,imag:x},backend:e}),{real:w,imag:I}=xR(b,t,e),S=Fs(w,I);for(let N=0;N<a;N++){const k=Vd(S,N);h[m*a+N]=k.real,d[m*a+N]=k.imag}e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(b)}const p=e.makeTensorInfo(u,"float32",h),f=e.makeTensorInfo(u,"float32",d),g=_n({inputs:{real:p,imag:f},backend:e});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),g}function xR(n,t,e){const s=E(n.shape),r=e.data.get(n.dataId),a=e.data.get(r.complexTensorInfos.real.dataId).values,o=e.data.get(r.complexTensorInfos.imag.dataId).values;if(function bR(n){return 0==(n&n-1)}(s)){const i=af(a,o,s,t,e),l=[n.shape[0],n.shape[1]];if(t){const u=e.makeTensorInfo(l,"float32",i.real),c=e.makeTensorInfo(l,"float32",i.imag),h=e.makeTensorInfo([],"float32",zs(s,"float32")),d=Cs({inputs:{x:h},backend:e}),p=sf.kernelFunc({inputs:{a:u,b:h},backend:e}),f=sf.kernelFunc({inputs:{a:c,b:d},backend:e}),g=e.data.get(p.dataId).values,m=e.data.get(f.dataId).values;return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),{real:g,imag:m}}return i}{const l=function wR(n,t,e){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let a=0,o=0;for(let i=0;i<t;i++){const l=Fg(r*i,t,e),u=Vd(n,i);a+=u.real*l.real-u.imag*l.imag,o+=u.real*l.imag+u.imag*l.real}e&&(a/=t,o/=t),Ag(s,a,o,r)}return s}(Fs(a,o),s,t);return $g(l)}}function af(n,t,e,s,r){if(1===e)return{real:n,imag:t};const a=Fs(n,t),o=e/2,i=Eg(a),l=i.real,u=i.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),d=r.makeTensorInfo(c,"float32",u),p=_n({inputs:{real:h,imag:d},backend:r}),f=Dg(a),g=f.real,m=f.imag,y=[g.length],x=r.makeTensorInfo(y,"float32",g),b=r.makeTensorInfo(y,"float32",m),w=_n({inputs:{real:x,imag:b},backend:r}),I=af(l,u,o,s,r),S=I.real,N=I.imag,k=[S.length],_=r.makeTensorInfo(k,"float32",S),$=r.makeTensorInfo(k,"float32",N),L=_n({inputs:{real:_,imag:$},backend:r}),B=af(g,m,o,s,r),G=B.real,H=B.imag,j=[G.length],X=r.makeTensorInfo(j,"float32",G),Q=r.makeTensorInfo(j,"float32",H),q=_n({inputs:{real:X,imag:Q},backend:r}),ee=Rg(e,s),se=[ee.real.length],ae=r.makeTensorInfo(se,"float32",ee.real),ie=r.makeTensorInfo(se,"float32",ee.imag),oe=_n({inputs:{real:ae,imag:ie},backend:r}),pe=zu({inputs:{a:oe,b:q},backend:r}),le=fa({inputs:{a:L,b:pe},backend:r}),fe=rf({inputs:{a:L,b:pe},backend:r}),Ne=Lr({inputs:{input:le},backend:r}),Re=Lr({inputs:{input:fe},backend:r}),Ee=ma({inputs:{input:le},backend:r}),We=ma({inputs:{input:fe},backend:r}),Ue=ga({inputs:[Ne,Re],backend:r,attrs:{axis:0}}),at=ga({inputs:[Ee,We],backend:r,attrs:{axis:0}}),gt=r.data.get(Ue.dataId).values,Rt=r.data.get(at.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(w),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo($),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(X),r.disposeIntermediateTensorInfo(Q),r.disposeIntermediateTensorInfo(q),r.disposeIntermediateTensorInfo(ae),r.disposeIntermediateTensorInfo(ie),r.disposeIntermediateTensorInfo(oe),r.disposeIntermediateTensorInfo(pe),r.disposeIntermediateTensorInfo(le),r.disposeIntermediateTensorInfo(fe),r.disposeIntermediateTensorInfo(Ne),r.disposeIntermediateTensorInfo(Ee),r.disposeIntermediateTensorInfo(Re),r.disposeIntermediateTensorInfo(We),r.disposeIntermediateTensorInfo(Ue),r.disposeIntermediateTensorInfo(at),{real:gt,imag:Rt}}const IR={kernelName:"FFT",backendName:"cpu",kernelFunc:function vR(n){const{inputs:t,backend:e}=n,{input:s}=t,r=E(s.shape),a=s.shape[s.shape.length-1],i=ft({inputs:{x:s},backend:e,attrs:{shape:[r/a,a]}}),l=zb(i,!1,e),u=ft({inputs:{x:l},backend:e,attrs:{shape:s.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}};function of(n){const{backend:t,attrs:e}=n,{shape:s,value:r,dtype:a}=e,o=a||Aa(r),i=zt(o,E(s));return function CR(n,t,e){n.fill(t)}(i,r),t.makeTensorInfo(s,o,i)}const SR={kernelName:Vc,backendName:"cpu",kernelFunc:of},NR={kernelName:Mc,backendName:"cpu",kernelFunc:({inputs:n,backend:e})=>{const{image:s}=n,r=e,a=Dt(s.dtype,E(s.shape)),[o,i,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let d=0;d<o;d++){const p=d*l*i*u;for(let f=0;f<i;f++){const g=f*(l*u);for(let m=0;m<l;m++){const y=m*u;for(let x=0;x<u;x++){const b=Math.round(l-m-1),w=p+g+y+x;let I=c[w];b>=0&&b<l&&(I=c[p+g+b*u+x]),a[w]=I}}}}return{dataId:r.write(a,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Bb=ar(n=>Math.floor(n)),kR=pa(Ya,Bb),TR={kernelName:Ya,backendName:"cpu",kernelFunc:kR},_R=Bt((n,t)=>Math.floor(n/t)),$R=en(Za,_R,null,"int32"),ER={kernelName:Za,backendName:"cpu",kernelFunc:$R},AR={kernelName:_l,backendName:"cpu",kernelFunc:function DR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let g=Ab({inputs:{x:r,filter:a},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(o){const m=g;if("NCHW"===c&&1===o.shape.length&&1!==o.shape[0]){const y=ft({inputs:{x:o},backend:e,attrs:{shape:[o.shape[0],1,1]}});g=fa({inputs:{a:g,b:y},backend:e}),e.disposeIntermediateTensorInfo(y)}else g=fa({inputs:{a:g,b:o},backend:e});e.disposeIntermediateTensorInfo(m)}if(p){const m=g;if("NCHW"===c&&"prelu"===p&&1===i.shape.length&&1!==i.shape[0]){const y=ft({inputs:{x:i},backend:e,attrs:{shape:[i.shape[0],1,1]}});g=Vu(e,g,p,y,f),e.disposeIntermediateTensorInfo(y)}else g=Vu(e,g,p,i,f);e.disposeIntermediateTensorInfo(m)}return g}},FR={kernelName:$l,backendName:"cpu",kernelFunc:function RR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let g=Rb({inputs:{x:r,filter:a},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(o){const m=g;g=fa({inputs:{a:g,b:o},backend:e}),e.disposeIntermediateTensorInfo(m)}if(p){const m=g;g=Vu(e,g,p,i,f),e.disposeIntermediateTensorInfo(m)}return g}};function Wb(n,t,e,s,r,a,o,i,l){const u=He([s,a],e);for(let c=0;c<s;c++){const h=[];let d=0;for(let p=0;p<r;p++){const f=n[c*r+p];d+=f*o[p],h.push(f)}if(d<0||d>=l/a)throw new Error(`Invalid indices: ${h} does not index into ${i}`);for(let p=0;p<a;p++)u.values[c*a+p]=t.get(...t.indexToLoc(d*a+p))}return u}const PR={kernelName:Pf,backendName:"cpu",kernelFunc:function OR(n){const{inputs:t,backend:e}=n,{params:s,indices:r}=t,a=E(s.shape),o=r.shape,i=o[o.length-1],[l,u,c,h]=Dd(s,r);if(0===u)return e.makeTensorInfo(l,s.dtype,[]);const f=Wb(e.data.get(r.dataId).values,e.bufferSync(s),s.dtype,u,i,c,h,s.shape,a);return e.makeTensorInfo(l,s.dtype,f.values)}};function Gb(n,t,e){const s=He(e,n.dtype);for(let r=0;r<s.size;++r){const o=s.indexToLoc(r).slice(),u=t.locToIndex([o[0],o[2]]);o[2]=t.values[u];const c=n.locToIndex(o);0<=c&&c<n.values.length&&(s.values[r]=n.values[c])}return s}const VR={kernelName:Hi,backendName:"cpu",kernelFunc:function LR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,indices:a}=t,{axis:o,batchDims:i}=s;ge([r,a],"gatherV2");const l=ve(o,r.shape)[0],u=e.data.get(a.dataId).values,c=r.shape[l];for(let w=0;w<u.length;++w){const I=u[w];v(I<=c-1&&I>=0,()=>`GatherV2: the index value ${I} is not in [0, ${c-1}]`)}let h=i;null==i&&(h=0);const d=E(a.shape),p=qd(r,a,l,h),f=ft({inputs:{x:r},backend:e,attrs:{shape:[p.batchSize,p.outerSize,p.dimSize,p.sliceSize]}}),g=ft({inputs:{x:a},backend:e,attrs:{shape:[p.batchSize,d/p.batchSize]}}),m=[p.batchSize,p.outerSize,d/p.batchSize,p.sliceSize],y=e.bufferSync(g),b=Gb(e.bufferSync(f),y,m);return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),e.makeTensorInfo(p.outputShape,b.dtype,b.values)}},Ub=Bt((n,t)=>n>t?1:0),MR=en(ji,Ub,null,"bool"),zR={kernelName:ji,backendName:"cpu",kernelFunc:MR},Hb=Bt((n,t)=>n>=t?1:0),BR=en(Ja,Hb,null,"bool"),WR={kernelName:Ja,backendName:"cpu",kernelFunc:BR},UR={kernelName:zc,backendName:"cpu",kernelFunc:function GR(n){const{inputs:t,backend:e}=n,{input:s}=t,r=E(s.shape),a=s.shape[s.shape.length-1],i=ft({inputs:{x:s},backend:e,attrs:{shape:[r/a,a]}}),l=zb(i,!0,e),u=ft({inputs:{x:l},backend:e,attrs:{shape:s.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}},HR=rt(eo,n=>Number.isFinite(n)?1:0,"bool"),jR={kernelName:eo,backendName:"cpu",kernelFunc:HR},qR=rt(to,n=>Math.abs(n)===1/0?1:0,"bool"),KR={kernelName:to,backendName:"cpu",kernelFunc:qR},XR=rt(no,n=>Number.isNaN(n)?1:0,"bool"),YR={kernelName:no,backendName:"cpu",kernelFunc:XR},jb=Bt((n,t)=>n<t?1:0),ZR=en(Ki,jb,null,"bool"),JR={kernelName:Ki,backendName:"cpu",kernelFunc:ZR},qb=Bt((n,t)=>n<=t?1:0),QR=en(Xi,qb,null,"bool"),eF={kernelName:Xi,backendName:"cpu",kernelFunc:QR};function Kb(n,t,e){const s=(t-n)/(e-1),r=on(e,"float32");r[0]=n;for(let a=1;a<r.length;a++)r[a]=r[a-1]+s;return r}const nF={kernelName:Lf,backendName:"cpu",kernelFunc:function tF(n){const{backend:t,attrs:e}=n,{start:s,stop:r,num:a}=e,o=Kb(s,r,a);return t.makeTensorInfo([o.length],"float32",o)}},Xb=ar(n=>Math.log(n)),sF=pa(so,Xb),rF={kernelName:so,backendName:"cpu",kernelFunc:sF},aF=rt(ro,n=>Math.log1p(n)),oF={kernelName:ro,backendName:"cpu",kernelFunc:aF},iF=Bt((n,t)=>n&&t),lF=en(Yi,iF,null,"bool"),uF={kernelName:Yi,backendName:"cpu",kernelFunc:lF},cF=rt(Zi,n=>n?0:1,"bool"),hF={kernelName:Zi,backendName:"cpu",kernelFunc:cF},dF=Bt((n,t)=>n||t),pF=en(Ji,dF,null,"bool"),fF={kernelName:Ji,backendName:"cpu",kernelFunc:pF},gF={kernelName:Qi,backendName:"cpu",kernelFunc:function mF(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{depthRadius:a,bias:o,alpha:i,beta:l}=s;ge(r,"LRN");const u=r.shape[3],c=u-1,h=e.data.get(r.dataId).values,d=E(r.shape),p=new Float32Array(d);function f(g){const m=g%u;let y=g-m+Math.max(0,m-a);const x=g-m+Math.min(m+a,c);let b=0;for(;y<=x;y++){const w=h[y];b+=w*w}return b}for(let g=0;g<d;g++){const m=f(g),y=h[g]*Math.pow(o+i*m,-l);p[g]=y}return e.makeTensorInfo(r.shape,r.dtype,p)}},xF={kernelName:Wc,backendName:"cpu",kernelFunc:function yF(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,y:a,dy:o}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s;ge(o,"LRNGrad");const h=E(o.shape),d=o.shape[3],p=e.data.get(o.dataId).values,f=e.data.get(r.dataId).values,g=e.data.get(a.dataId).values,m=new Float32Array(h),y=h;for(let x=0;x<y;x++){const b=x%d,w=x-b+Math.max(0,b-i),I=x-b+Math.min(d,b+i+1);let S=0;for(let N=w;N<I;N++)S+=Math.pow(f[N],2);S=u*S+l;for(let N=w;N<I;N++){let k=-2*u*c*f[N]*g[x]/S;x===N&&(k+=Math.pow(S,-c)),k*=p[x],m[N]+=k}}return e.makeTensorInfo(o.shape,r.dtype,m)}};function Yb(n,t,e,s){const r=Dt(s,E(e));for(let a=0;a<r.length;++a){const o=a*t;let i=n[o];for(let l=0;l<t;++l){const u=n[o+l];(Number.isNaN(u)||u>i)&&(i=u)}r[a]=i}return r}function Zb(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reductionIndices:a,keepDims:o}=s,i=e;let l=r.shape;const u=l.length,c=ve(a,l);let h=c;const d=Ct(h,u);let p=i.data.get(r.dataId).values;if(null!=d){const w=new Array(u);for(let I=0;I<w.length;I++)w[I]=l[d[I]];p=Zp(p,l,r.dtype,d,w),h=Vt(h.length,u),l=w}ge(r,"max"),sn("max",h,u);const[f,g]=Zt(l,h),y=Yb(p,E(g),f,r.dtype),x=i.write(y,f,r.dtype);let b=f;return o&&(b=Lt(f,c)),{dataId:x,shape:b,dtype:r.dtype}}const bF={kernelName:el,backendName:"cpu",kernelFunc:Zb},Jb=Bt((n,t)=>Math.max(n,t)),wF=en(ao,Jb),vF={kernelName:ao,backendName:"cpu",kernelFunc:wF},SF={kernelName:tl,backendName:"cpu",kernelFunc:function IF(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;ge(r,"maxPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=s;v(nn(o,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const c=Wn(r.shape,a,o,1,i,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&ye(c.inShape,c.outShape))h=Cs({inputs:{x:r},backend:e});else{const d=e.data.get(r.dataId).values,p=Se(r.shape),f=Jp(d,0,r.dtype,p,c,"max");h=e.makeTensorInfo(c.outShape,r.dtype,f.values)}return h}},NF={kernelName:nl,backendName:"cpu",kernelFunc:function CF(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=s;ge(r,"maxPool3d");const c=_s(r.shape,a,o,1,i,l,u),d=Tb(e.data.get(r.dataId).values,0,r.dtype,Se(r.shape),c,"max");return e.makeTensorInfo(d.shape,"float32",d.values)}},TF={kernelName:Uc,backendName:"cpu",kernelFunc:function kF(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:a}=t,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=s;ge([r,a],"maxPool3DGrad");const c=_s(a.shape,o,i,1,l,u),d=function GD(n,t){const e=He(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,a=t.strideWidth,o=t.dilationDepth,i=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.front,p=t.padInfo.top,f=t.padInfo.left;for(let g=0;g<t.batchSize;++g)for(let m=0;m<t.inChannels;++m)for(let y=0;y<t.outDepth;++y){const x=y*s-d;let b=x;for(;b<0;)b+=o;const w=Math.min(t.inDepth,u+x);for(let I=0;I<t.outHeight;++I){const S=I*r-p;let N=S;for(;N<0;)N+=i;const k=Math.min(t.inHeight,c+S);for(let _=0;_<t.outWidth;++_){const $=_*a-f;let L=$;for(;L<0;)L+=l;const B=Math.min(t.inWidth,h+$);let G=Number.NEGATIVE_INFINITY,H=-1;for(let j=b;j<w;j+=o){const X=j-x;for(let Q=N;Q<k;Q+=i){const q=Q-S;for(let ee=L;ee<B;ee+=l){const se=ee-$,ae=n.get(g,j,Q,ee,m);ae>=G&&(G=ae,H=X*c*h+q*c+se)}}}e.set(H,g,y,I,_,m)}}}return e}(e.bufferSync(a),c),p=c.strideDepth,f=c.strideHeight,g=c.strideWidth,m=c.dilationDepth,y=c.dilationHeight,x=c.dilationWidth,b=c.effectiveFilterDepth,w=c.effectiveFilterHeight,I=c.effectiveFilterWidth,S=b-1-c.padInfo.front,N=I-1-c.padInfo.left,k=w-1-c.padInfo.top,_=He(a.shape,"float32"),$=e.bufferSync(r);for(let L=0;L<c.batchSize;++L)for(let B=0;B<c.inChannels;++B)for(let G=0;G<c.inDepth;++G)for(let H=0;H<c.inHeight;++H)for(let j=0;j<c.inWidth;++j){const X=G-S,Q=H-k,q=j-N;let ee=0;for(let se=0;se<b;se+=m){const ae=(X+se)/p;if(!(ae<0||ae>=c.outDepth||Math.floor(ae)!==ae))for(let ie=0;ie<w;ie+=y){const oe=(Q+ie)/f;if(!(oe<0||oe>=c.outHeight||Math.floor(oe)!==oe))for(let pe=0;pe<I;pe+=x){const le=(q+pe)/g;if(le<0||le>=c.outWidth||Math.floor(le)!==le)continue;const Re=b*w*I-1-d.get(L,ae,oe,le,B)===se*w*I+ie*I+pe?1:0;0!==Re&&(ee+=$.get(L,ae,oe,le,B)*Re)}}}_.set(ee,L,G,H,j,B)}return e.makeTensorInfo(_.shape,_.dtype,_.values)}},$F={kernelName:Gc,backendName:"cpu",kernelFunc:function _F(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:a,output:o}=t,i=a;ge([a,o],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=Wn(i.shape,l,u,1,c,h),p=e.data.get(i.dataId).values,f=He(d.outShape,i.dtype,kb(p,i.shape,i.dtype,d).values),g=d.strideHeight,m=d.strideWidth,y=d.dilationHeight,x=d.dilationWidth,b=d.effectiveFilterHeight,w=d.effectiveFilterWidth,I=w-1-d.padInfo.left,S=b-1-d.padInfo.top,N=He(i.shape,"float32"),k=e.data.get(r.dataId).values,_=He(r.shape,"float32",k);for(let $=0;$<d.batchSize;++$)for(let L=0;L<d.inChannels;++L)for(let B=0;B<d.inHeight;++B)for(let G=0;G<d.inWidth;++G){const H=B-S,j=G-I;let X=0;for(let Q=0;Q<b;Q+=y){const q=(H+Q)/g;if(!(q<0||q>=d.outHeight||Math.floor(q)!==q))for(let ee=0;ee<w;ee+=x){const se=(j+ee)/m;if(se<0||se>=d.outWidth||Math.floor(se)!==se)continue;const oe=b*w-1-f.get($,q,se,L)===Q*w+ee?1:0;0!==oe&&(X+=_.get($,q,se,L)*oe)}}N.set(X,$,B,G,L)}return e.makeTensorInfo(N.shape,N.dtype,N.values)}},DF={kernelName:Vf,backendName:"cpu",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{filterSize:r,strides:a,pad:o,includeBatchInIndex:i}=t,l=e;ge(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=Wn(s.shape,r,a,[1,1],o),[h,d]=function EF(n,t,e,s,r){const o=Jp(n,0,e,Se(t),r,"max"),i=kb(n,t,e,r,!0,s);return[o.values,i.values]}(u,s.shape,s.dtype,i,c),p=l.write(h,c.outShape,s.dtype),f=l.write(d,c.outShape,s.dtype);return[{dataId:p,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},RF={kernelName:sl,backendName:"cpu",kernelFunc:function AF(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s,i=ve(a,r.shape),c=E(Zt(r.shape,i)[1]),h=[],d=e.makeTensorInfo([],"float32",new Float32Array([c]));h.push(d);const p=or({inputs:{x:r},backend:e,attrs:{dtype:"float32"}});h.push(p);const f=nf({inputs:{a:p,b:d},backend:e});h.push(f);const g=di({inputs:{x:f},backend:e,attrs:{axis:a,keepDims:o}});return h.forEach(m=>e.disposeIntermediateTensorInfo(m)),g}},OF={kernelName:rl,backendName:"cpu",kernelFunc:function FF(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s;ge(r,"min");const i=ve(a,r.shape);let l=i;const u=Ct(l,r.shape.length);let c=r;null!=u&&(c=Sn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=Vt(l.length,r.shape.length)),sn("min",l,c.shape.length);const[h,d]=Zt(c.shape,l),p=E(d),f=on(E(h),c.dtype),g=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const x=y*p;let b=g[x];for(let w=0;w<p;++w){const I=g[x+w];(Number.isNaN(I)||I<b)&&(b=I)}f[y]=b}null!=u&&e.disposeIntermediateTensorInfo(c);const m=e.makeTensorInfo(h,c.dtype,f);if(o){const x=ft({inputs:{x:m},backend:e,attrs:{shape:Lt(h,i)}});return e.disposeIntermediateTensorInfo(m),x}return m}},Qb=Bt((n,t)=>Math.min(n,t)),PF=en(oo,Qb),LF={kernelName:oo,backendName:"cpu",kernelFunc:PF},MF={kernelName:al,backendName:"cpu",kernelFunc:function VF(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:a,mode:o}=s;ge(r,"mirrorPad");const i=a.map((b,w)=>b[0]+r.shape[w]+b[1]),l=a.map(b=>b[0]),u=a.map((b,w)=>b[0]+r.shape[w]),c="reflect"===o?0:1,h=e.data.get(r.dataId).values,d=r.shape.length,p=Se(r.shape),f=E(i),g=i.length,m=Se(i),y=Dt(r.dtype,f);for(let b=0;b<f;b++){let w=Ur(b,g,m);for(let S=0;S<g;S++)w[S]<l[S]?w[S]=2*l[S]-w[S]-c:w[S]>=u[S]&&(w[S]=2*(u[S]-1)-w[S]+c);w=w.map((S,N)=>S-l[N]);const I=hs(w,d,p);y[b]=h[I]}return{dataId:e.write(y,i,r.dtype),shape:i,dtype:r.dtype}}},zF=Bt((n,t)=>{const e=n%t;return n<0&&t<0||n>=0&&t>=0?e:(e+t)%t}),BF=en(lo,zF),WF={kernelName:lo,backendName:"cpu",kernelFunc:BF};function e0(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{dim:a}=s,o=r.shape.length;let i=a;if(-1===i&&(i=o-1),i!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${i}`);const l=ve([i],r.shape),u=Zb({inputs:{x:r},backend:e,attrs:{reductionIndices:l,keepDims:!1}}),c=Lt(u.shape,l),h=ft({inputs:{x:u},backend:e,attrs:{shape:c}}),d=rf({inputs:{a:r,b:h},backend:e}),p=Lb({inputs:{x:d},backend:e}),f=di({inputs:{x:p},backend:e,attrs:{axis:l,keepDims:!1}}),g=ft({inputs:{x:f},backend:e,attrs:{shape:c}}),m=nf({inputs:{a:p,b:g},backend:e});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),m}const GF={kernelName:Sl,backendName:"cpu",kernelFunc:e0},HF={kernelName:Mf,backendName:"cpu",kernelFunc:function UF(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{numSamples:a,seed:o,normalized:i}=s;ge(r,"multinomial");const l=i?r:e0({inputs:{logits:r},backend:e,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=e.data.get(l.dataId).values,d=[u,a],p=on(E(d),"int32");for(let f=0;f<u;++f){const g=f*c,m=new Float32Array(c-1);m[0]=h[g];for(let b=1;b<m.length;++b)m[b]=m[b-1]+h[g+b];const y=ld.alea(o.toString()),x=f*a;for(let b=0;b<a;++b){const w=y();p[x+b]=m.length;for(let I=0;I<m.length;I++)if(w<m[I]){p[x+b]=I;break}}}return i||e.disposeIntermediateTensorInfo(l),e.makeTensorInfo(d,"int32",p)}};function t0(n,t,e){const s=zs(-1,e);return ef([],t,s,n,e)}const qF={kernelName:ol,backendName:"cpu",kernelFunc:function jF(n){const{inputs:t,backend:e}=n,{x:s}=t;ge(s,"neg");const r=e.data.get(s.dataId).values,[a,o]=t0(r,s.shape,s.dtype);return e.makeTensorInfo(o,s.dtype,a)}},KF=bd,YF={kernelName:Hc,backendName:"cpu",kernelFunc:function XF(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=s;ge(r,"NonMaxSuppression");const u=e.data.get(r.dataId).values,c=e.data.get(a.dataId).values,{selectedIndices:h}=KF(u,c,o,i,l);return e.makeTensorInfo([h.length],"int32",new Int32Array(h))}},ZF=wd,QF={kernelName:jc,backendName:"cpu",kernelFunc:function JF(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s;ge(r,"NonMaxSuppressionPadded");const c=e.data.get(r.dataId).values,h=e.data.get(a.dataId).values,{selectedIndices:d,validOutputs:p}=ZF(c,h,o,i,l,u);return[e.makeTensorInfo([d.length],"int32",new Int32Array(d)),e.makeTensorInfo([],"int32",new Int32Array([p]))]}},eO=vd,nO={kernelName:qc,backendName:"cpu",kernelFunc:function tO(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s;ge(r,"NonMaxSuppressionWithScore");const c=e.data.get(r.dataId).values,h=e.data.get(a.dataId).values,d=o,p=i,f=l,g=u,{selectedIndices:m,selectedScores:y}=eO(c,h,d,p,f,g);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},n0=Bt((n,t)=>n!==t?1:0),sO=en(il,n0,null,"bool"),rO={kernelName:il,backendName:"cpu",kernelFunc:sO},oO={kernelName:ul,backendName:"cpu",kernelFunc:function aO(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r}=t,{dtype:a,depth:o,onValue:i,offValue:l}=s;ge(r,"oneHot");const u=E(r.shape),c=new Float32Array(u*o);c.fill(l);const h=e.data.get(r.dataId).values;for(let d=0;d<u;++d)h[d]>=0&&h[d]<o&&(c[d*o+h[d]]=i);return e.makeTensorInfo([...r.shape,o],a,c)}};function Wu(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const r=Lr({inputs:{input:s},backend:e}),a=Wu({inputs:{x:r},backend:e}),o=ma({inputs:{input:s},backend:e}),i=Wu({inputs:{x:o},backend:e}),l=_n({inputs:{real:a,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(i),l}return of({backend:e,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const iO={kernelName:kl,backendName:"cpu",kernelFunc:Wu},lO={kernelName:ll,backendName:"cpu",kernelFunc:function s0(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const r=Lr({inputs:{input:s},backend:e}),a=s0({inputs:{x:r},backend:e}),o=ma({inputs:{input:s},backend:e}),i=Wu({inputs:{x:o},backend:e}),l=_n({inputs:{real:a,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(i),l}return of({backend:e,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function r0(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s;if(1===t.length)return Bu({inputs:{input:t[0]},backend:e,attrs:{dim:r}});const a=t[0].shape,o=t[0].dtype;t.forEach(c=>{J(a,c.shape,"All tensors passed to stack must have matching shapes"),v(o===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=[],u=ga({inputs:t.map(c=>{const h=Bu({inputs:{input:c},backend:e,attrs:{dim:r}});return i.push(h),h}),backend:e,attrs:{axis:r}});return i.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}const uO={kernelName:cl,backendName:"cpu",kernelFunc:r0},a0={kernelName:hl,backendName:"cpu",kernelFunc:function cO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:a,constantValue:o}=s;ge(r,"pad");const i=a.map((x,b)=>x[0]+r.shape[b]+x[1]),l=a.map(x=>x[0]),u=e.data.get(r.dataId).values,c=E(r.shape),h=r.shape.length,d=Se(r.shape),p=E(i),f=i.length,g=Se(i),m=Dt(r.dtype,p);0!==o&&m.fill(o);for(let x=0;x<c;x++)m[hs(Ur(x,h,d).map((S,N)=>S+l[N]),f,g)]=u[x];return{dataId:e.write(m,i,r.dtype),shape:i,dtype:r.dtype}}},hO=Bt((n,t)=>Math.pow(n,t)),dO=en(co,hO),pO={kernelName:co,backendName:"cpu",kernelFunc:dO};function o0(n,t,e,s){const[r,a]=Zt(n,s),o=Cn(t,"int32"),i=on(E(r),o),l=E(a);for(let u=0;u<i.length;++u){const c=u*l;let h=1;for(let d=0;d<l;++d)h*=e[c+d];i[u]=h}return{outVals:i,outShape:r,outDtype:o}}const mO={kernelName:pl,backendName:"cpu",kernelFunc:function fO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s;ge(r,"prod");const i=r.shape.length,l=ve(a,r.shape),u=Ct(l,i);let c=l,h=r;const d=[];null!=u&&(h=Sn({inputs:{x:r},backend:e,attrs:{perm:u}}),d.push(h),c=Vt(c.length,i));const p=e.data.get(h.dataId).values,{outVals:f,outShape:g,outDtype:m}=o0(h.shape,h.dtype,p,c);let y=g;return o&&(y=Lt(g,l)),d.forEach(x=>e.disposeIntermediateTensorInfo(x)),e.makeTensorInfo(y,m,f)}};function i0(n,t){const e=n.slice(0,t);for(;e.length<t;)e.push(1);for(let s=t;s<n.length;s++)e[t-1]*=n[s];return e}function l0(n,t,e,s,r,a,o,i){if(0===n.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function gO(n,t,e){n.forEach((s,r)=>{if(s<0||s>=e){const a=Ur(r,t.length,Se(t)).join(",");throw new Error(`indices[${a}] = ${s} is not in [0, ${e})`)}})}(a,o,t[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const u=s[0],{outSplits:c,valueSlices:h,numValues:d}=function xO(n,t,e,s){const r=[];let a=0;const i=new Array(t.length-1+e.length).fill(null).map(()=>[0]);!function yO(n,t){for(let e=0;e<n.length;++e){const s=n[e],r=e===n.length-1?t:n[e+1].length;if(0===s.length)throw new Error("Ragged splits may not be empty");if(s[0]<0)throw new Error("Ragged splits must be non-negative");if(s[s.length-1]>r)throw new Error("Ragged splits must not point past values");for(let a=1;a<s.length;++a)if(s[a-1]>s[a])throw new Error("Ragged splits must be sorted in ascending order")}}(e,s);let l=1;for(let u=0;u<t.length-1;++u){l*=t[u];const c=t[u+1];for(let h=1;h<l+1;++h)i[u].push(h*c)}for(let u=0;u<n.length;++u){let c=n[u],h=n[u]+1;for(let d=0;d<e.length;++d){const p=e[d],f=d+t.length-1;if(f>=0){const g=i[f],m=g[g.length-1]-p[c];for(let y=c;y<h;++y)i[f].push(p[y+1]+m)}c=p[c],h=p[h]}h!==c&&(r.push([c,h]),a+=h-c)}return{outSplits:i,valueSlices:r,numValues:a}}(a,o,n,u),p=function bO(n){const t=[];for(let e=0;e<n.length;++e){const r=zt("int32",n[e].length);t.push(r),n[e].forEach((a,o)=>r[o]=a)}return t}(c),f=function vO(n,t,e,s,r){const a=t.slice();a[0]=r;const o=zt(e,E(a)),i=n.length;return function wO(n,t,e,s,r,a){const o=i0(t,2)[1],i=i0(a,2)[1];let l=0;for(const u of e)for(let c=u[0];c<u[1];++c){for(let h=0;h<s;++h)r[l*i+h]=n[c*o+h];++l}}(n,t,s,0===i?0:i/t[0],o,a),[o,a]}(e,s,r,h,d);return[p,f[0],f[1]]}const SO={kernelName:zf,backendName:"cpu",kernelFunc:function IO(n){const{inputs:t,backend:e,attrs:s}=n,{paramsNestedSplits:r,paramsDenseValues:a,indices:o}=t,l=r.map(y=>e.data.get(y.dataId).values),u=r.map(y=>y.shape),c=e.data.get(a.dataId).values,h=e.data.get(o.dataId).values,[d,p,f]=l0(l,u,c,a.shape,a.dtype,h,o.shape),g=d.map(y=>e.makeTensorInfo([y.length],"int32",y)),m=e.makeTensorInfo(f,a.dtype,p);return g.concat([m])}},u0=2147483647;function c0(n,t,e,s,r,a,o){if(t.length>1)throw new Error("starts must be a scalar or vector");if(r.length>1)throw new Error("limits must be a scalar or vector");if(o.length>1)throw new Error("deltas must be a scalar or vector");const i=0===t.length,l=0===r.length,u=0===o.length,c=[];i||c.push(t[0]),l||c.push(r[0]),u||c.push(o[0]);for(let m=1;m<c.length;++m)if(c[m]!==c[m-1])throw new Error("starts, limits, and deltas must have the same shape");const h=0===c.length?1:c[0],d=zt("int32",h+1);d[0]=0;for(let m=0;m<h;++m){const y=i?n[0]:n[m],x=l?s[0]:s[m],b=u?a[0]:a[m];if(0===b)throw new Error("Requires delta != 0");let w;if(b>0&&x<y||b<0&&x>y)w=0;else if(w=Math.ceil(Math.abs((x-y)/b)),w>u0)throw new Error(`Requires ((limit - start) / delta) <= ${u0}`);d[m+1]=d[m]+w}const f=zt(e,d[h]);let g=0;for(let m=0;m<h;++m){const y=d[m+1]-d[m];let x=i?n[0]:n[m];const b=u?a[0]:a[m];for(let w=0;w<y;++w)f[g++]=x,x+=b}return[d,f]}const NO={kernelName:Bf,backendName:"cpu",kernelFunc:function CO(n){const{inputs:t,backend:e}=n,{starts:s,limits:r,deltas:a}=t,o=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=e.data.get(a.dataId).values,[u,c]=c0(o,s.shape,s.dtype,i,r.shape,l,a.shape);return[e.makeTensorInfo([u.length],"int32",u),e.makeTensorInfo([c.length],s.dtype,c)]}};var Yn=jn;class Gu{constructor(t,e,s,r,a,o,i,l,u,c){this.shape=t,this.shapeShape=e,this.values=s,this.valuesShape=r,this.valuesDType=a,this.defaultValue=o,this.defaultValueShape=i,this.rowPartitionValues=l,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=Ng(c),this.raggedRank=kg(this.rowPartitionTypes)}getRowPartitionTypeByDimension(t){return this.rowPartitionTypes[0]===Yn.FIRST_DIM_SIZE?this.rowPartitionTypes[t+1]:this.rowPartitionTypes[t]}getRowPartitionTensor(t){return this.rowPartitionTypes[0]===Yn.FIRST_DIM_SIZE?this.rowPartitionValues[t+1]:this.rowPartitionValues[t]}getMaxWidth(t){const e=this.getRowPartitionTensor(t-1);switch(this.getRowPartitionTypeByDimension(t-1)){case Yn.VALUE_ROWIDS:return Gu.getMaxWidthValueRowID(e);case Yn.ROW_SPLITS:return Gu.getMaxWidthRowSplit(e);default:throw new Error(`Cannot handle partition type ${Yn[this.getRowPartitionTypeByDimension(t-1)]}`)}}static getMaxWidthRowSplit(t){const e=t.length;if(0===e||1===e)return 0;let s=0;for(let r=0;r<e-1;++r){const a=t[r+1]-t[r];a>s&&(s=a)}return s}static getMaxWidthValueRowID(t){const e=t.length;if(0===e)return 0;let s=0,r=t[0],a=0;for(let o=1;o<e;++o){const i=t[o];i!==r&&(r=i,a=Math.max(o-s,a),s=o)}return Math.max(e-s,a)}tensorShapeFromTensor(t,e,s=!0){if(0===e.length){if(-1===t[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return d0(t,s)}calculateOutputSize(t){const e=this.valuesShape;Tg(this.defaultValueShape,e);const r=this.tensorShapeFromTensor(this.shape,this.shapeShape),o=Cg(this.raggedRank,r,e);o[0]<0&&(o[0]=t);for(let i=1;i<=this.raggedRank;++i)o[i]<0&&(o[i]=this.getMaxWidth(i));return o}calculateFirstParentOutputIndex(t,e,s){const r=Math.min(t,s),a=[];let o=0;for(let i=0;i<r;++i,o+=e)a.push(o);for(let i=r;i<t;++i)a.push(-1);return v(a.length===t,()=>"Final length of result must be equal to firstDimension."),a}calculateOutputIndexRowSplit(t,e,s,r){const a=t.length,o=[];for(let i=0;i<a-1;++i){const l=t[i+1]-t[i];let u=Math.min(r,l),c=e[i];-1===c&&(u=0);for(let h=0;h<u;++h)o.push(c),c+=s;for(let h=0;h<l-u;++h)o.push(-1)}if(a>0&&o.length!==t[a-1])throw new Error("Invalid row split size.");return o}calculateOutputIndexValueRowID(t,e,s,r){const a=t.length,o=[];if(0===a)return[];let i=0,l=t[0];if(l>=e.length)throw new Error(`Got currentValueRowId=${l}, which is not less than ${e.length}`);let u=e[l];o.push(u);for(let c=1;c<a;++c){const h=t[c];if(h===l)u>=0&&(++i,i<r?u+=s:u=-1);else{if(i=0,l=h,h>=e.length)throw new Error(`Got nextValueRowId=${h} which is not less than ${e.length}`);u=e[h]}o.push(u)}if(o.length!==t.length)throw new Error("Invalid row ids.");return o}calculateOutputIndex(t,e,s,r){const a=this.getRowPartitionTensor(t),o=this.getRowPartitionTypeByDimension(t);switch(o){case Yn.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(a,e,s,r);case Yn.ROW_SPLITS:if(a.length-1>e.length)throw new Error(`Row partition size is greater than output size: ${a.length-1} > ${e.length}`);return this.calculateOutputIndexRowSplit(a,e,s,r);default:throw new Error(`Unsupported partition type: ${Yn[o]}`)}}getFirstDimensionSize(){const t=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const e=this.rowPartitionTypes[0];switch(e){case Yn.FIRST_DIM_SIZE:return t[0];case Yn.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Yn.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Yn[e]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),s=this.calculateOutputSize(e),r=new Array(this.raggedRank+1);r[r.length-1]=1;for(let l=r.length-2;l>=0;--l)r[l]=r[l+1]*s[l+1];const a=d0(s,!1),o=zt(this.valuesDType,E(a));if(r[0]*s[0]>0){let l=this.calculateFirstParentOutputIndex(e,r[0],s[0]);for(let u=1;u<=this.raggedRank;++u)l=this.calculateOutputIndex(u-1,l,r[u],s[u]);this.setOutput(this.raggedRank,l,o,a)}return[a,o]}setOutput(t,e,s,r){if(0===s.length)return;const a=this.values,o=s;let i=r.slice();i=i.slice(t+1);const l=E(i),u=e.length;let c=this.defaultValue;if(c.length!==l&&1!==c.length){const f=this.defaultValueShape;M(()=>{const g=P(c,f);c=Wo(g,i).dataSync()})}let h=0,d=0,p=0;for(let f=0;f<=u;++f){let g=f<u?e[f]:-1;if(g!==p){if(d<p){const m=a.subarray(h*l);h0(o.subarray(d*l),m,(p-d)*l)}if(f>=u&&(g=Math.floor(s.length/l)),g>p)if(1===this.defaultValue.length)o.subarray(p*l,g*l).fill(this.defaultValue[0]),p=g;else for(;g>p;)h0(o.slice(p*l),c,l),++p;g<0?(h=f+1,d=p):(h=f,d=p,p=d+1)}else++p}}}function h0(n,t,e){for(let s=0;s<e;s++)n[s]=t[s]}function d0(n,t){const e=[];for(let s of n){if(s<0){if(!t)throw new Error(`Dimension ${s} must be >= 0`);if(s<-1)throw new Error(`Dimension ${s} must be >= -1`);s=-1}e.push(s)}return e}function p0(n,t,e,s,r,a,o,i,l,u){return new Gu(n,t,e,s,r,a,o,i,l,u).compute()}const TO={kernelName:Wf,backendName:"cpu",kernelFunc:function kO(n){const{inputs:t,backend:e,attrs:s}=n,{shape:r,values:a,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=s,u=e.data.get(r.dataId).values,c=e.data.get(a.dataId).values,h=e.data.get(o.dataId).values,d=i.map(m=>e.data.get(m.dataId).values),p=i.map(m=>m.shape),[f,g]=p0(u,r.shape,c,a.shape,a.dtype,h,o.shape,d,p,l);return e.makeTensorInfo(f,a.dtype,g)}};function f0(n,t,e,s){if(n===t||n<t&&e<0||t<n&&e>1)return on(0,s);const l=on(Math.abs(Math.ceil((t-n)/e)),s);t<n&&1===e&&(e=-1),l[0]=n;for(let u=1;u<l.length;u++)l[u]=l[u-1]+e;return l}const $O={kernelName:Kc,backendName:"cpu",kernelFunc:function _O(n){const{backend:t,attrs:e}=n,{start:s,stop:r,dtype:a,step:o}=e,i=f0(s,r,o,a);return t.makeTensorInfo([i.length],a,i)}},EO=rt(ho,n=>1/n),DO={kernelName:ho,backendName:"cpu",kernelFunc:EO},RO={kernelName:gl,backendName:"cpu",kernelFunc:function AO(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:a,halfPixelCenters:o,size:i}=s;ge(r,"resizeBilinear");const l=Se(r.shape),[u,c]=i,[h,d,p,f]=r.shape,g=e.data.get(r.dataId).values,m=new Float32Array(E([h,u,c,f])),y=[a&&u>1?d-1:d,a&&c>1?p-1:p],x=[a&&u>1?u-1:u,a&&c>1?c-1:c];let b=0;const w=y[0]/x[0],I=y[1]/x[1];for(let S=0;S<h;S++)for(let N=0;N<u;N++){let k;k=o?w*(N+.5)-.5:w*N;const _=Math.max(0,Math.floor(k)),$=k-_,L=Math.min(d-1,Math.ceil(k)),B=S*l[0]+_*l[1],G=S*l[0]+L*l[1];for(let H=0;H<c;H++){let j;j=o?I*(H+.5)-.5:I*H;const X=Math.max(0,Math.floor(j)),Q=j-X,q=Math.min(p-1,Math.ceil(j)),ee=B+X*l[2],se=G+X*l[2],ae=B+q*l[2],ie=G+q*l[2];for(let oe=0;oe<f;oe++){const pe=g[ee+oe],le=g[se+oe],Re=pe+(g[ae+oe]-pe)*Q;m[b++]=Re+(le+(g[ie+oe]-le)*Q-Re)*$}}}return e.makeTensorInfo([h,u,c,f],"float32",m)}},OO={kernelName:Zc,backendName:"cpu",kernelFunc:function FO(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:a}=t,{alignCorners:o}=s;ge([a,r],"resizeBilinearGrad");const i=Se(r.shape),[l,u,c,h]=r.shape,[,d,p]=a.shape,f=new Float32Array(l*u*c*h),g=[o&&d>1?u-1:u,o&&p>1?c-1:c],m=[o&&d>1?d-1:d,o&&p>1?p-1:p],y=g[0]/m[0],x=g[1]/m[1],b=e.data.get(a.dataId).values;let w=0;for(let I=0;I<l;I++){const S=I*i[0];for(let N=0;N<d;N++){const k=N*y,_=Math.floor(k),$=Math.min(Math.ceil(k),u-1),L=S+_*i[1],B=S+$*i[1],G=k-_,H=1-G;for(let j=0;j<p;j++){const X=j*x,Q=Math.floor(X),q=Math.min(Math.ceil(X),c-1),ee=X-Q,se=1-ee,ae=L+Q*i[2],ie=L+q*i[2],oe=B+Q*i[2],pe=B+q*i[2],le=H*se,fe=H*ee,Ne=G*se,Re=G*ee;for(let Ee=0;Ee<h;Ee++){const We=b[w++];f[ae+Ee]+=We*le,f[ie+Ee]+=We*fe,f[oe+Ee]+=We*Ne,f[pe+Ee]+=We*Re}}}}return e.makeTensorInfo([l,c,u,h],"float32",f)}},LO={kernelName:ml,backendName:"cpu",kernelFunc:function PO(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:a,halfPixelCenters:o,size:i}=s;ge(r,"resizeNearestNeighbor");const l=Se(r.shape),[u,c]=i,[h,d,p,f]=r.shape,g=e.data.get(r.dataId).values,m=new Float32Array(h*u*c*f),y=[a&&u>1?d-1:d,a&&c>1?p-1:p],x=[a&&u>1?u-1:u,a&&c>1?c-1:c],b=y[0]/x[0],w=y[1]/x[1];let I=0;for(let S=0;S<h;S++){const N=S*l[0];for(let k=0;k<u;k++){const _=o?b*(k+.5):b*k;let $=Math.min(d-1,a?Math.round(_):Math.floor(_));o&&($=Math.max(0,$));const L=N+$*l[1];for(let B=0;B<c;B++){const G=o?w*(B+.5):w*B;let H=Math.min(p-1,a?Math.round(G):Math.floor(G));o&&(H=Math.max(0,H));const j=L+H*l[2];for(let X=0;X<f;X++)m[I++]=g[j+X]}}}return e.makeTensorInfo([h,u,c,f],r.dtype,m)}},MO={kernelName:Yc,backendName:"cpu",kernelFunc:function VO(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:a}=t,{alignCorners:o}=s;ge([a,r],"resizeNearestNeighborGrad");const i=Se(r.shape),l=Se(a.shape),[u,c,h,d]=r.shape,[,p,f]=a.shape,g=new Float32Array(u*c*h*d),m=e.data.get(a.dataId).values,y=[o&&p>1?c-1:c,o&&f>1?h-1:h],x=[o&&p>1?p-1:p,o&&f>1?f-1:f],b=y[0]/x[0],w=y[1]/x[1],I=1/b,S=1/w,N=2*Math.ceil(I)+2,k=2*Math.ceil(S)+2;for(let _=0;_<u;_++){const $=_*i[0];for(let L=0;L<c;L++){const B=$+L*i[1],G=Math.floor(L*I),H=Math.floor(G-N/2);for(let j=0;j<h;j++){const X=B+j*i[2],Q=Math.floor(j*S),q=Math.floor(Q-k/2);for(let ee=0;ee<d;ee++){let se=0;for(let ae=0;ae<N;ae++){const ie=ae+H;if(ie<0||ie>=p)continue;const oe=$+ie*l[1],pe=ie*b;if(L===Math.min(c-1,o?Math.round(pe):Math.floor(pe)))for(let fe=0;fe<k;fe++){const Ne=fe+q;if(Ne<0||Ne>=f)continue;const Re=oe+Ne*l[2],Ee=Ne*w;j===Math.min(h-1,o?Math.round(Ee):Math.floor(Ee))&&(se+=m[Re+ee])}}g[X+ee]=se}}}}return e.makeTensorInfo(r.shape,r.dtype,g)}},BO={kernelName:yl,backendName:"cpu",kernelFunc:function zO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dims:a}=s;ge(r,"reverse");const o=r.shape.length,i=ve(a,r.shape);if(0===o)return Cs({inputs:{x:r},backend:e});const l=new ln(r.shape,r.dtype),u=e.bufferSync(r);for(let c=0;c<l.size;c++){const h=l.indexToLoc(c),d=h.slice();i.forEach(p=>d[p]=r.shape[p]-1-d[p]),l.set(u.get(...d),...h)}return e.makeTensorInfo(l.shape,l.dtype,l.values)}},WO={kernelName:hh,backendName:"cpu",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{image:s}=n,{radians:r,fillValue:a,center:o}=t,i=e,l=Dt(s.dtype,E(s.shape)),[u,c,h,d]=s.shape,[p,f]=_d(o,c,h),m=Math.sin(r),y=Math.cos(r),x=i.data.get(s.dataId).values;for(let w=0;w<u;w++){const I=w*h*c*d;for(let S=0;S<c;S++){const N=S*(h*d);for(let k=0;k<h;k++){const _=k*d;for(let $=0;$<d;$++){const L=[u,S,k,$],B=L[2],G=L[1];let H=(B-p)*y-(G-f)*m,j=(B-p)*m+(G-f)*y;H=Math.round(H+p),j=Math.round(j+f);let X=a;"number"!=typeof a&&(X=3===$?255:a[$]),H>=0&&H<h&&j>=0&&j<c&&(X=x[I+j*(h*d)+H*d+$]),l[I+N+_+$]=X}}}}return{dataId:i.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},GO=rt(mo,n=>{const t=Math.floor(n);return n-t<.5?Math.floor(n):n-t>.5?Math.ceil(n):t%2==0?t:t+1}),UO={kernelName:mo,backendName:"cpu",kernelFunc:GO},m0=ar(n=>1/Math.sqrt(n)),HO=pa(go,m0),jO={kernelName:go,backendName:"cpu",kernelFunc:HO};function ya(n,t,e,s,r,a,o,i,l,u){const c=[s/r,r],h=n.values,d=t.values;if(0===s)return He(e,t.dtype);const p=He(c,t.dtype);"string"==typeof l||"number"==typeof l?p.values.fill(l):"boolean"==typeof l&&p.values.fill(+l);for(let f=0;f<a;f++){const g=[];let m=0;for(let y=0;y<o;y++){const x=h[f*o+y];g.push(x),m+=x*i[y]}if(m<0||m>=s/r)throw new Error(`Invalid indices: ${g} does not index into ${e}`);for(let y=0;y<r;y++)u?p.values[m*r+y]+=d[f*r+y]:p.values[m*r+y]=0===t.rank?d[0]:d[f*r+y]}return p}const KO={kernelName:Gf,backendName:"cpu",kernelFunc:function qO(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r,updates:a}=t,{shape:o}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Zo(0,r,o),g=ya(e.bufferSync(r),e.bufferSync(a),o,h,u,l,i,c,0,!0);return e.makeTensorInfo(o,g.dtype,g.values)}};function XO(n,t){let e=0,s=n.length,r=0;for(;e<s;)r=Math.floor((e+s)/2),n[r]<t?e=r+1:s=r;return s}function YO(n,t){let e=0,s=n.length,r=0;for(;e<s;)r=Math.floor((e+s)/2),n[r]<=t?e=r+1:s=r;return s}const QO={kernelName:Uf,backendName:"cpu",kernelFunc:function JO(n){const{inputs:t,backend:e,attrs:s}=n,{sortedSequence:r,values:a}=t,{side:o}=s,u=function ZO(n,t,e,s,r,a){const o=zt("int32",e*r);for(let i=0;i<e;++i){const l=n.slice(i*s,(i+1)*s),u=i*r;for(let c=0;c<r;++c)o[u+c]="left"===a?XO(l,t[c+u]):YO(l,t[c+u])}return o}(e.data.get(r.dataId).values,e.data.get(a.dataId).values,r.shape[0],r.shape[1],a.shape[1],o);return e.makeTensorInfo(a.shape,"int32",u)}},tP={kernelName:xl,backendName:"cpu",kernelFunc:function eP(n){const{inputs:t,backend:e}=n,{condition:s,t:r,e:a}=t;ge([s,r,a],"select");const o=s.shape.length,i=e.data.get(s.dataId).values,l=e.data.get(r.dataId).values,u=e.data.get(a.dataId).values,c=Cn(r.dtype,a.dtype),h=on(E(r.shape),c);let d=0;const p=0===o||o>1||1===r.shape.length?1:E(r.shape.slice(1));for(let f=0;f<i.length;f++)for(let g=0;g<p;g++)h[d++]=1===i[f]?l[f]:u[f];return e.makeTensorInfo(r.shape,c,h)}},nP=iu,sP=lu,rP=rt(yo,n=>n>=0?sP*n:nP*(Math.exp(n)-1)),aP={kernelName:yo,backendName:"cpu",kernelFunc:rP},oP=rt(wo,n=>n<0?-1:n>0?1:0),iP={kernelName:wo,backendName:"cpu",kernelFunc:oP},lP=rt(xo,n=>Math.sin(n)),uP={kernelName:xo,backendName:"cpu",kernelFunc:lP},cP=rt(bo,n=>Math.sinh(n)),hP={kernelName:bo,backendName:"cpu",kernelFunc:cP},g0=Math.log(1.1920928955078125e-7)+2,dP=rt(Io,n=>{const t=n>-g0,e=n<g0,s=Math.exp(n);let r;return r=e?s:t?n:Math.log(1+s),r}),pP={kernelName:Io,backendName:"cpu",kernelFunc:dP},mP={kernelName:vl,backendName:"cpu",kernelFunc:function fP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:a,paddings:o}=s;ge([r],"spaceToBatchND");const i=E(a),l=[[0,0]];l.push(...o);for(let S=1+a.length;S<r.shape.length;++S)l.push([0,0]);const u=a0.kernelFunc({inputs:{x:r},backend:e,attrs:{paddings:l,constantValue:0}}),c=Ko(u.shape,a,i,!1),h=Xo(c.length,a.length,!1),d=Yo(u.shape,a,i,!1),g=ft({inputs:{x:u},backend:e,attrs:{shape:c}}),x=Sn({inputs:{x:g},backend:e,attrs:{perm:h}}),I=ft({inputs:{x},backend:e,attrs:{shape:d}});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(x),I}};function y0(n,t,e,s,r,a,o){const i=t[0],l=a[0],u=new Array(l),c=new Array(i),h=t[1];if(0===l){if(0!==i)throw new Error(Lg(i));return[zt(e,0),[0,h],zt(r,0),u,c]}let d=!0,p=0;const f=new Array(l).fill(0);for(let m=0;m<i;++m){const y=n[m*h];if(y<0)throw new Error(Vg(m,y));if(y>=l)throw new Error(Mg(m,y,l));++f[y],d=d&&y>=p,p=y}let g=!0;for(let m=0;m<l;++m){const y=0===f[m];u[m]=y,g=g&&!y,f[m]=Math.max(f[m],1),m>0&&(f[m]+=f[m-1])}if(g&&d){const m=n,y=s;for(let x=0;x<i;++x)c[x]=x;return[m,[i,h],y,u,c]}{const m=f[l-1],y=zt(e,m*h),x=zt(r,m),b=new Array(l).fill(0);for(let w=0;w<i;++w){const I=n[w*h],N=(0===I?0:f[I-1])+b[I];b[I]++;for(let k=0;k<h;++k)y[N*h+k]=n[w*h+k];x[N]=s[w],c[w]=N}for(let w=0;w<l;++w)if(0===b[w]){const S=0===w?0:f[w-1];y[S*h+0]=w;for(let N=1;N<h;++N)y[S*h+N]=0;x[S]=o}return[y,[m,h],x,u,c]}}const yP={kernelName:Jc,backendName:"cpu",kernelFunc:function gP(n){const{inputs:t,backend:e}=n,{indices:s,values:r,denseShape:a,defaultValue:o}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=e.data.get(s.dataId).values,l=e.data.get(r.dataId).values,u=e.data.get(a.dataId).values,c=e.data.get(o.dataId).values[0],[h,d,p,f,g]=y0(i,s.shape,s.dtype,l,r.dtype,u,c);return[e.makeTensorInfo(d,s.dtype,h),e.makeTensorInfo([d[0]],r.dtype,p),e.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(m=>Number(m)))),e.makeTensorInfo([g.length],s.dtype,new Int32Array(g))]}};function x0(n,t,e,s,r){const a=E(s),o=t[0],i=r.length,l=[];let u=1,c=-1;for(let m=0;m<i;++m){const y=r[m];if(-1===y){if(-1!==c)throw new Error(zg(c,m));c=m,l.push(1)}else{if(y<0)throw new Error(Bg(m,y));u*=y,l.push(y)}}if(-1!==c){if(u<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const m=Math.trunc(a/u);if(u*m!==a)throw new Error(Gg(s,l));l[c]=m}if(E(l)!==a)throw new Error(Ug(s,l));const d=s.length,p=[];if(d>0){p[d-1]=1;for(let m=d-2;m>=0;--m)p[m]=p[m+1]*s[m+1]}const f=[];if(i>0){f[i-1]=1;for(let m=i-2;m>=0;--m)f[m]=f[m+1]*l[m+1]}const g=zt(e,o*i);for(let m=0;m<o;++m){let y=0;for(let x=0;x<d;++x)y+=n[m*d+x]*p[x];for(let x=0;x<i;++x)g[m*i+x]=Math.trunc(y/f[x]),y%=f[x]}return[g,[o,i],l]}const bP={kernelName:Qc,backendName:"cpu",kernelFunc:function xP(n){const{inputs:t,backend:e}=n,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const o=Array.from(e.data.get(r.dataId).values),i=e.data.get(s.dataId).values,l=Array.from(e.data.get(a.dataId).values),[u,c,h]=x0(i,s.shape,s.dtype,o,l);return[e.makeTensorInfo(c,s.dtype,u),e.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};function lf(n,t,e,s,r,a=!1,o=0){const i=s.length,l=[t[0],n.length/t[0]],u=l[1],h=i>0?r[i-1]+1:0;if(h<0)throw new Error("segment ids must be >= 0");const d=t.slice();d[0]=h;const f=zt(e,d.reduce((b,w)=>b*w,1));if(0===i)return h>0&&f.fill(o),[f,d];if(h<=0)throw new Error("segment ids must be >= 0");let g=0,m=1,y=0,x=r[g];for(;;){let b=0;if(m<i){if(b=r[m],x===b){++m;continue}if(x>=b)throw new Error("segment ids are not increasing")}if(x<0||x>=h)throw new Error(jg(x,h));x>y&&f.fill(o,y*u,x*u);for(let w=g;w<m;++w){const I=s[w];if(I<0||I>=l[0])throw new Error(qg(w,s[w],l[0]));for(let S=0;S<u;S++)f[x*u+S]+=n[I*u+S]}if(a)for(let w=0;w<u;w++)f[x*u+w]/=m-g;if(g=m,++m,y=x+1,x=b,m>i)break}return y<h&&f.fill(o,y*u,h*u),[f,d]}const vP={kernelName:eh,backendName:"cpu",kernelFunc:function wP(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const o=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=e.data.get(a.dataId).values,[u,c]=lf(o,s.shape,s.dtype,i,l,!0);return e.makeTensorInfo(c,s.dtype,u)}},SP={kernelName:th,backendName:"cpu",kernelFunc:function IP(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const o=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=e.data.get(a.dataId).values,[u,c]=lf(o,s.shape,s.dtype,i,l);return e.makeTensorInfo(c,s.dtype,u)}},NP={kernelName:Hf,backendName:"cpu",kernelFunc:function CP(n){const{inputs:t,backend:e,attrs:s}=n,{sparseIndices:r,sparseValues:a,defaultValue:o}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=Zo(0,r,i),p=!1,f=e.bufferSync(r);let g;switch(a.dtype){case"bool":g=ya(f,e.bufferSync(a),i,d,c,u,l,h,Boolean(e.data.get(o.dataId).values[0]),p);break;case"float32":case"int32":g=ya(f,e.bufferSync(a),i,d,c,u,l,h,e.data.get(o.dataId).values[0],p);break;case"string":g=ya(f,e.bufferSync(a),i,d,c,u,l,h,Ws(e.data.get(o.dataId).values[0]),p);break;default:throw new Error(`Unsupported type ${a.dtype}`)}return e.makeTensorInfo(i,g.dtype,g.values)}},TP={kernelName:Il,backendName:"cpu",kernelFunc:function kP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{numOrSizeSplits:a,axis:o}=s,i=ve(o,r.shape)[0],l=Hd(r,a,i),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map(h=>{const d=[...c];d[i]=h;const p=Vr({inputs:{x:r},backend:e,attrs:{begin:u,size:d}});return u[i]+=h,p})}},_P=ar(n=>Math.sqrt(n)),$P=rt(So,n=>Math.sqrt(n)),EP={kernelName:So,backendName:"cpu",kernelFunc:$P},DP={kernelName:nh,backendName:"cpu",kernelFunc:({inputs:n,backend:t})=>{const{x:e}=n,s=t;ge(e,"square");const r=s.data.get(e.dataId).values,a=new Float32Array(r.length);for(let i=0;i<r.length;++i){const l=r[i];a[i]=l*l}return{dataId:s.write(a,e.shape,e.dtype),shape:e.shape,dtype:e.dtype}}},b0=Bt((n,t)=>{const e=n-t;return e*e}),AP=en(Co,b0),RP={kernelName:Co,backendName:"cpu",kernelFunc:AP},FP=rt($o,(n,t)=>{const e=t;return isNaN(n)?NaN:n>0?1:e.alpha}),OP={kernelName:$o,backendName:"cpu",kernelFunc:FP};function w0(n,t,e,s){const r=He(n,t.dtype);for(let a=0;a<r.size;a++){const o=r.indexToLoc(a),i=new Array(o.length);for(let l=0;l<i.length;l++)i[l]=o[l]*e[l]+s[l];r.set(t.get(...i),...o)}return r}const LP={kernelName:sh,backendName:"cpu",kernelFunc:function PP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:a,end:o,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s;ge(r,"stridedSlice");const{finalShapeSparse:p,finalShape:f,isIdentity:g,sliceDim0:m,isSimpleSlice:y,begin:x,end:b,strides:w}=Kh(r.shape,a,o,i,l,u,c,h,d);let I;if(g)I=ft({inputs:{x:r},backend:e,attrs:{shape:f}});else if(m||y){v(r.shape.length>=1,()=>`Input must have rank at least 1, got: ${r.shape.length}`);const S=Hh(x,b,w),N=Vr({inputs:{x:r},backend:e,attrs:{begin:x,size:S}});I=ft({inputs:{x:N},backend:e,attrs:{shape:f}}),e.disposeIntermediateTensorInfo(N)}else{const N=w0(p,e.bufferSync(r),w,x);I=e.makeTensorInfo(f,N.dtype,N.values)}return I}};class VP{constructor(t,e,s,r,a,o){this.separator=Bs(t),this.nGramWidths=e,this.leftPad=Bs(s),this.rightPad=Bs(r),this.padWidth=a,this.preserveShort=o}getPadWidth(t){return Math.min(this.padWidth<0?t-1:this.padWidth,t-1)}getNumNGrams(t,e){const s=this.getPadWidth(e);return Math.max(0,t+2*s-e+1)}createNGrams(t,e,s,r,a,o){for(let i=0;i<a;++i){const l=this.getPadWidth(o),u=Math.max(0,l-i),c=Math.max(0,l-(a-(i+1))),h=o-(u+c),d=e+(u>0?0:i-l);let p=0;p+=u*this.leftPad.length;for(let x=0;x<h;++x)p+=t[d+x].length;p+=c*this.rightPad.length,p+=(u+c+h-1)*this.separator.length,s[r+i]=new Uint8Array(p);const g=s[r+i];let m=0;const y=x=>x.forEach(b=>g[m++]=b);for(let x=0;x<u;++x)y(this.leftPad),y(this.separator);for(let x=0;x<h-1;++x)y(t[d+x]),y(this.separator);if(h>0){y(t[d+h-1]);for(let x=0;x<c;++x)y(this.separator),y(this.rightPad)}else{for(let x=0;x<c-1;++x)y(this.rightPad),y(this.separator);y(this.rightPad)}}}compute(t,e){const s=t.length,r=e.length;if(r>0){let l=e[0];if(0!==l)throw new Error(`First split value must be 0, got ${l}`);for(let u=1;u<r;++u){let c=e[u]>=l;if(c=c&&e[u]<=s,!c)throw new Error(`Invalid split value ${e[u]}, must be in [${l}, ${s}]`);l=e[u]}if(l!==s)throw new Error(`Last split value must be data size. Expected ${s}, got ${l}`)}const a=r-1,o=zt("int32",r);if(0===s||0===r){const l=new Array(s);for(let u=0;u<=a;++u)o[u]=0;return[l,o]}o[0]=0;for(let l=1;l<=a;++l){const u=e[l]-e[l-1];let c=0;this.nGramWidths.forEach(h=>{c+=this.getNumNGrams(u,h)}),this.preserveShort&&u>0&&0===c&&(c=1),o[l]=o[l-1]+c}const i=new Array(o[a]);for(let l=0;l<a;++l){const u=e[l];let c=o[l];if(this.nGramWidths.forEach(h=>{const p=this.getNumNGrams(e[l+1]-e[l],h);this.createNGrams(t,u,i,c,p,h),c+=p}),this.preserveShort&&c===o[l]){const h=e[l+1]-e[l];if(0===h)continue;this.createNGrams(t,u,i,c,1,h+2*this.padWidth)}}return[i,o]}}function v0(n,t,e,s,r,a,o,i){return new VP(e,s,r,a,o,i).compute(n,t)}const zP={kernelName:rh,backendName:"cpu",kernelFunc:function MP(n){const{inputs:t,backend:e,attrs:s}=n,{separator:r,nGramWidths:a,leftPad:o,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=e.data.get(c.dataId).values,p=e.data.get(h.dataId).values,[f,g]=v0(d,p,r,a,o,i,l,u);return[e.makeTensorInfo([f.length],"string",f),e.makeTensorInfo(h.shape,"int32",g)]}};function BP(n,t,e,s){if(!n.length)return;if(0===t.length){for(let a=0;a<n.length;++a)s.push(n.subarray(a,a+1));return}if(1===t.length){const a=t[0];let o=n.indexOf(a);for(;-1!==o;){const i=n.subarray(0,o);(!e||0!==i.length)&&s.push(i),o=(n=n.subarray(o+1)).indexOf(a)}return void((!e||0!==n.length)&&s.push(n))}let r=0;for(let a=0;a<n.length+1;a++)if(a===n.length||-1!==t.indexOf(n[a])){const o=n.subarray(r,a);(!e||0!==o.length)&&s.push(o),r=a+1}}function I0(n,t,e){const s=n.length,r=[];let a=0,o=0;const i=new Array(s);for(let d=0;d<s;++d){const p=r.length;BP(n[d],t,e,r);const f=r.length-p;i[d]=f,a+=f,o=Math.max(o,f)}const l=zt("int32",2*a),u=new Array(a),c=[s,o];let h=0;for(let d=0;d<s;++d)for(let p=0;p<i[d];++p)l[2*h]=d,l[2*h+1]=p,u[h]=r[h],++h;return[l,u,c]}const GP={kernelName:ah,backendName:"cpu",kernelFunc:function WP(n){const{inputs:t,backend:e,attrs:s}=n,{skipEmpty:r}=s,{input:a,delimiter:o}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=e.data.get(a.dataId).values,l=e.data.get(o.dataId).values[0],[u,c,h]=I0(i,l,r),d=c.length;return[e.makeTensorInfo([d,2],"int32",u),e.makeTensorInfo([d],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(h))]}};function S0(n,t){const e=zt("int32",n.length);for(let s=0;s<n.length;++s)e[s]=mv(n[s]).modulo(t).getLowBitsUnsigned();return e}const HP={kernelName:oh,backendName:"cpu",kernelFunc:function UP(n){const{inputs:t,backend:e,attrs:s}=n,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=S0(e.data.get(a.dataId).values,r);return e.makeTensorInfo(a.shape,"int32",i)}},jP=rt(ko,n=>Math.tan(n)),qP={kernelName:ko,backendName:"cpu",kernelFunc:jP},KP=rt(To,n=>Math.tanh(n));function C0(n,t){const e=new Array(n.rank);for(let r=0;r<e.length;r++)e[r]=n.shape[r]*t[r];const s=He(e,n.dtype);for(let r=0;r<s.values.length;++r){const a=s.indexToLoc(r),o=new Array(n.rank);for(let l=0;l<o.length;l++)o[l]=a[l]%n.shape[l];const i=n.locToIndex(o);s.values[r]=n.values[i]}return s}const pi=(n,t)=>{const e=t.value-n.value;return 0===e?n.index-t.index:e};function N0(n,t,e=0,s=n.length-1){for(;s>e;){if(s-e>600){const i=s-e+1,l=t-e+1,u=Math.log(i),c=.5*Math.exp(2*u/3),h=.5*Math.sqrt(u*c*(i-c)/i)*Math.sign(l-i/2);N0(n,t,Math.max(e,Math.floor(t-l*c/i+h)),Math.min(s,Math.floor(t+(i-l)*c/i+h)))}const r=n[t];let a=e,o=s;for(It(n,e,t),pi(n[s],r)>0&&It(n,e,s);a<o;){for(It(n,a,o),a++,o--;pi(n[a],r)<0;)a+=1;for(;pi(n[o],r)>0;)o-=1}0===pi(n[e],r)?It(n,e,o):(o+=1,It(n,o,s)),o<=t&&(e=o+1),t<=o&&(s=o-1)}}function k0(n,t,e,s,r){const a=t[t.length-1],[o,i]=[n.length/a,a],l=Dt(e,o*s),u=Dt("int32",o*s);for(let h=0;h<o;h++){const d=h*i,p=n.subarray(d,d+i);let f=new Array(p.length);p.forEach((x,b)=>f[b]={value:x,index:b}),s<f.length&&(N0(f,s),f=f.slice(0,s)),r&&f.sort(pi);const g=h*s,m=l.subarray(g,g+s),y=u.subarray(g,g+s);for(let x=0;x<s;x++)m[x]=f[x].value,y[x]=f[x].index}const c=t.slice();return c[c.length-1]=s,[He(c,e,l),He(c,"int32",u)]}function T0(n,t,e){switch(e){case"reflect":return function nL(n,t){let e=n;if(e<0)if(t<=1)e=0;else{const s=2*t;e<s&&(e=s*Math.trunc(-e/s)+e),e=e<-t?e+s:-e-1}else if(e>t-1)if(t<=1)e=0;else{const s=2*t;e-=s*Math.trunc(e/s),e>=t&&(e=s-e-1)}return Ae(0,e,t-1)}(n,t);case"wrap":return function sL(n,t){let e=n;return e<0?t<=1?e=0:e+=t*(Math.trunc(-e/(t-1))+1):e>t-1&&(t<=1?e=0:e-=t*Math.trunc(e/(t-1))),Ae(0,e,t-1)}(n,t);case"nearest":return function aL(n,t){return Ae(0,n,t-1)}(n,t);default:return function rL(n,t){return n}(n)}}function fi(n,t,e,s,r,a,o,i,l,u,c){return 0<=i&&i<t&&0<=l&&l<e?n[o*s+i*r+l*a+u]:c}function oL(n,t,e,s,r,a,o,i,l,u,c){return fi(n,t,e,s,r,a,o,Math.round(i),Math.round(l),u,c)}function iL(n,t,e,s,r,a,o,i,l,u,c){const h=Math.floor(i),d=Math.floor(l),p=h+1,f=d+1;return(p-i)*((f-l)*fi(n,t,e,s,r,a,o,h,d,u,c)+(l-d)*fi(n,t,e,s,r,a,o,h,f,u,c))+(i-h)*((f-l)*fi(n,t,e,s,r,a,o,p,d,u,c)+(l-d)*fi(n,t,e,s,r,a,o,p,f,u,c))}function _0(n,t,e,s){const r=ve(t,e)[0],a=[1,e[0],1];for(let f=0;f<r;f++)a[0]*=e[f];a[1]=e[r];for(let f=r+1;f<e.length;f++)a[2]*=e[f];const o={},i=new Int32Array(e[r]),l=new ln(a,s,n),u=[],c=1===a[0]&&1===a[2];for(let f=0;f<e[r];f++){let g;if(c)g=n[f].toString();else{const m=[];for(let y=0;y<a[0];y++)for(let x=0;x<a[2];x++)m.push(l.get(y,f,x));g=m.join(",")}if(void 0!==o[g])i[f]=o[g];else{const m=Object.keys(o).length;o[g]=m,i[f]=m,u.push(f)}}const h=a.slice();h[1]=Object.keys(o).length;const d=new ln(h,s);u.forEach((f,g)=>{for(let m=0;m<a[0];m++)for(let y=0;y<a[2];y++)d.set(l.get(m,f,y),m,g,y)});const p=e.slice();return p[r]=h[1],{outputValues:d.values,outputShape:p,indices:i}}const fL=[mD,gD,xD,wD,hD,ID,ND,TD,$D,DD,RD,OD,LD,zD,WD,HD,qD,XD,ZD,pD,QD,nA,rA,oA,uD,lA,cA,iD,hA,pA,fA,gA,xA,wA,IA,CA,kA,_A,EA,AA,FA,PA,VA,MA,BA,GA,HA,jA,qA,KA,QA,JE,tR,nR,cR,hR,dR,fR,IR,SR,NR,TR,ER,AR,FR,PR,VR,zR,WR,QE,UR,dA,jR,KR,YR,eD,JR,eF,nF,rF,oF,uF,hF,fF,gF,xF,bF,vF,SF,NF,TF,$F,DF,RF,OF,LF,MF,WF,HF,YA,qF,YF,QF,nO,rO,oO,lO,uO,a0,pO,nD,mO,SO,NO,TO,$O,lD,sf,DO,sD,rD,dD,RO,OO,LO,MO,BO,WO,UO,jO,KO,QO,tP,aP,oD,iP,uP,hP,eA,GF,pP,mP,yP,bP,vP,SP,NP,TP,EP,DP,RP,OP,LP,zP,GP,HP,yR,ZA,qP,{kernelName:To,backendName:"cpu",kernelFunc:KP},{kernelName:_o,backendName:"cpu",kernelFunc:function YP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reps:a}=s;ge(r,"tile");const o=C0(e.bufferSync(r),a);return e.makeTensorInfo(o.shape,o.dtype,o.values)}},{kernelName:ih,backendName:"cpu",kernelFunc:function JP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{k:a,sorted:o}=s;ge(r,"topk");const i=e.data.get(r.dataId).values,[l,u]=k0(i,r.shape,r.dtype,a,o);return[e.makeTensorInfo(l.shape,l.dtype,l.values),e.makeTensorInfo(u.shape,u.dtype,u.values)]}},{kernelName:lh,backendName:"cpu",kernelFunc:function eL(n){const{inputs:t,attrs:e,backend:s}=n,{image:r,transforms:a}=t,{interpolation:o,fillMode:i,fillValue:l,outputShape:u}=e,[c,h,d,p]=r.shape,[f,g]=null!=u?u:[h,d],m=[c,f,g,p],y=Se(r.shape),x=y[0],b=y[1],w=y[2],I=Se(m),S=I[0],N=I[1],k=I[2],_=Dt(r.dtype,E(m));_.fill(l);const $=s.data.get(r.dataId).values,L=s.data.get(a.dataId).values;for(let G=0;G<c;++G){const H=1===a.shape[0]?L:L.subarray(8*G,8*G+8);for(let j=0;j<f;++j)for(let X=0;X<g;++X)for(let Q=0;Q<p;++Q){let q;const ee=H[6]*X+H[7]*j+1;if(0===ee)continue;const ae=(H[3]*X+H[4]*j+H[5])/ee,ie=T0((H[0]*X+H[1]*j+H[2])/ee,d,i),oe=T0(ae,h,i);switch(o){case"nearest":q=oL($,h,d,x,b,w,G,oe,ie,Q,l);break;case"bilinear":q=iL($,h,d,x,b,w,G,oe,ie,Q,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`)}_[G*S+j*N+X*k+Q]=q}return s.makeTensorInfo(m,r.dtype,_)}return{dataId:s.write(_,m,r.dtype),shape:r.shape,dtype:r.dtype}}},SD,{kernelName:uh,backendName:"cpu",kernelFunc:function lL(n){const{inputs:t,attrs:e,backend:s}=n,{axis:r}=e,{x:a}=t;ge(a,"unique");const o=s.data.get(a.dataId).values,{outputValues:i,outputShape:l,indices:u}=_0(o,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:Cl,backendName:"cpu",kernelFunc:function cL(n){const{inputs:t,backend:e,attrs:s}=n,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const o=r.shape.length,i=r.shape[a],l=new Array(o-1);let u=0;for(let p=0;p<o;p++)p!==a&&(l[u++]=r.shape[p]);const c=new Array(o).fill(0),h=r.shape.slice();h[a]=1;const d=new Array(i);for(let p=0;p<d.length;p++){c[a]=p;const f=Vr({inputs:{x:r},backend:e,attrs:{begin:c,size:h}});d[p]=ft({inputs:{x:f},backend:e,attrs:{shape:l}}),e.disposeIntermediateTensorInfo(f)}return d}},{kernelName:Nl,backendName:"cpu",kernelFunc:function dL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,segmentIds:a}=t,{numSegments:o}=s;ge(r,"unsortedSegmentSum");const u=[],c=[],h=r.shape.length-a.shape.length;let d=a;for(let f=0;f<h;++f){const g=Bu({inputs:{input:d},backend:e,attrs:{dim:f+1}});d=g,c.push(g)}for(let f=0;f<o;++f){const g=zs(f,"int32"),m=e.makeTensorInfo([],"int32",g),y=Ob({inputs:{a:m,b:d},backend:e}),x=or({inputs:{x:y},backend:e,attrs:{dtype:"float32"}}),b=zu({inputs:{a:x,b:r},backend:e}),w=di({inputs:{x:b},backend:e,attrs:{axis:0,keepDims:!1}});u.push(w),c.push(m),c.push(y),c.push(x),c.push(b),c.push(w)}const p=r0({inputs:u,backend:e,attrs:{axis:0}});return c.forEach(f=>e.disposeIntermediateTensorInfo(f)),p}},iO];for(const n of fL)fh(n);const ir={},Uu={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function us(n,t){if(!(n in ir)||null!=t){const s=function yL(n,t){if(1!==n&&2!==n)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=null==t?function gL(n){if("undefined"!=typeof OffscreenCanvas&&2===n)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(n):t;return e.addEventListener("webglcontextlost",s=>{s.preventDefault(),delete ir[n]},!1),z().getBool("SOFTWARE_WEBGL_ENABLED")&&(Uu.failIfMajorPerformanceCaveat=!1),1===n?e.getContext("webgl",Uu)||e.getContext("experimental-webgl",Uu):e.getContext("webgl2",Uu)}(n,t);if(null===s)return console.log("Could not get context for WebGL version",n),null;ir[n]=s}const e=ir[n];return null==e||e.isContextLost()?(delete ir[n],us(n)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),ir[n])}var xa=(()=>{return(n=xa||(xa={}))[n.DENSE=0]="DENSE",n[n.SHARED_BATCH=1]="SHARED_BATCH",xa;var n})(),$n=(()=>{return(n=$n||($n={}))[n.RENDER=0]="RENDER",n[n.UPLOAD=1]="UPLOAD",n[n.PIXELS=2]="PIXELS",n[n.DOWNLOAD=3]="DOWNLOAD",$n;var n})(),tn=(()=>{return(n=tn||(tn={}))[n.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",n[n.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",n[n.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",n[n.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",n[n.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16",tn;var n})();function mi(n,t){return[t,n]}function Hu(n){const t=E(n);return _t(Math.ceil(t/4))}function ba(n,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(n/2))]}function uf(n,t){const e=n;let s,r,a,o,i,l,u,c,h,d;return 2===z().getNumber("WEBGL_VERSION")?(s=e.R32F,r=e.R16F,a=e.RGBA16F,o=e.RGBA32F,i=e.RED,u=4,c=1,h=e.HALF_FLOAT,d=e.FLOAT,l=e.RGBA8):(s=n.RGBA,r=n.RGBA,a=n.RGBA,o=e.RGBA,i=n.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,d=n.FLOAT,l=n.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:o,textureFormatFloat:i,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:d}}function ue(n,t){const e=t();return z().getBool("DEBUG")&&function wL(n){const t=n.getError();if(t!==n.NO_ERROR)throw new Error("WebGL Error: "+function CL(n,t){switch(t){case n.NO_ERROR:return"NO_ERROR";case n.INVALID_ENUM:return"INVALID_ENUM";case n.INVALID_VALUE:return"INVALID_VALUE";case n.INVALID_OPERATION:return"INVALID_OPERATION";case n.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case n.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case n.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(n,t))}(n),e}function SL(n){return!!(z().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===n||5.96e-8<Math.abs(n)&&Math.abs(n)<65504)}function ju(n,t){return Ps(n,()=>n.getExtension(t),'Extension "'+t+'" not supported on this browser.')}const TL=/ERROR: [0-9]+:([0-9]+):/g;function $0(n,t){const e=TL.exec(t);if(null==e)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(n);const s=+e[1],r=n.split("\n"),a=r.length.toString().length+2,o=r.map((h,d)=>$t((d+1).toString(),a)+h);let i=0;for(let h=0;h<o.length;h++)i=Math.max(o[h].length,i);const l=o.slice(0,s-1),u=o.slice(s-1,s),c=o.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${$t(u[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function cf(n,t){if(ue(n,()=>n.validateProgram(t)),!1===n.getProgramParameter(t,n.VALIDATE_STATUS))throw console.log(n.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function E0(n,t,e,s,r,a,o){const i=n.getAttribLocation(t,e);return-1!==i&&(ue(n,()=>n.bindBuffer(n.ARRAY_BUFFER,s)),ue(n,()=>n.vertexAttribPointer(i,r,n.FLOAT,!1,a,o)),ue(n,()=>n.enableVertexAttribArray(i)),!0)}function VL(n,t,e,s){ue(n,()=>function OL(n,t,e){(function A0(n,t){const e=n.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+n.TEXTURE0;if(s<n.TEXTURE0||s>e)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${e}].`)})(n,e),ue(n,()=>n.activeTexture(n.TEXTURE0+e)),ue(n,()=>n.bindTexture(n.TEXTURE_2D,t))}(n,t,s)),ue(n,()=>n.uniform1i(e,s))}function hf(n,t,e){ue(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,e)),ue(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,t,0))}function D0(n,t){ue(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,t)),ue(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,null,0))}function qu(n){const t=n.checkFramebufferStatus(n.FRAMEBUFFER);if(t!==n.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function ML(n,t){switch(t){case n.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case n.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(n,t))}function Ps(n,t,e){const s=ue(n,()=>t());if(null==s)throw new Error(e);return s}function wa(n,t=2){return E(n.slice(0,n.length-t))}function va(n){if(0===n.length)throw Error("Cannot get rows and columns of an empty shape array.");return[n.length>1?n[n.length-2]:1,n[n.length-1]]}function Ku(n){let t=[1,1,1];return 0===n.length||1===n.length&&1===n[0]||(t=[wa(n),...va(n)]),t}function Xu(n){return n%2==0}function Yu(n,t){if(ye(n=n.slice(-2),t=t.slice(-2))||!n.length||!t.length||0===n[0]||0===n[1]||0===t[0]||0===t[1])return!0;if(n.length!==t.length){const e=n.slice(-1)[0],s=t.slice(-1)[0];if(e===s||Xu(e)&&Xu(s)&&(1===n[0]||1===t[0]))return!0}return n[1]===t[1]&&Xu(n[0])&&Xu(t[0])}let Zu,Ju;function Zn(n,t){return null!=n.getExtension(t)}function R0(n){try{if(null!=us(n))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function df(n){const t=uf(n),e=n.createTexture();n.bindTexture(n.TEXTURE_2D,e),n.texImage2D(n.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const a=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,a),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,e,0);const o=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(e),n.deleteFramebuffer(a),o}function gi(n,t){Array.isArray(n)||(n=[n]),n.forEach(e=>{null!=e&&v("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}const we=z();function mn(){let n,t,e,s,r,a,o,i,l,u;return 2===z().getNumber("WEBGL_VERSION")?(n="#version 300 es",t="in",e="out",s="in",r="texture",a="outputColor",o="out vec4 outputColor;",i=z().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(n="",t="attribute",e="varying",s="varying",r="texture2D",a="gl_FragColor",o="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:n,attribute:t,varyingVs:e,varyingFs:s,texture2D:r,output:a,defineOutput:o,defineSpecialNaN:i,defineSpecialInf:l,defineRound:u}}function Mr(n,t,e="index"){const s=Se(t);return s.map((r,a)=>`int ${n[a]} = ${e} / ${r}; ${a===s.length-1?`int ${n[a+1]} = ${e} - ${n[a]} * ${r}`:`index -= ${n[a]} * ${r}`};`).join("")}function Qu(n,t,e="index"){const s=Se(t);return s.map((r,a)=>`int ${n[a]} = ${e} / outShapeStrides[${a}]; ${a===s.length-1?`int ${n[a+1]} = ${e} - ${n[a]} * outShapeStrides[${a}]`:`index -= ${n[a]} * outShapeStrides[${a}]`};`).join("")}function pf(n){const t=Se(n).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}we.registerFlag("HAS_WEBGL",()=>we.getNumber("WEBGL_VERSION")>0),we.registerFlag("WEBGL_VERSION",()=>R0(2)?2:R0(1)?1:0),we.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),we.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===we.get("WEBGL_VERSION")),we.registerFlag("WEBGL_CPU_FORWARD",()=>!0),we.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),we.registerFlag("WEBGL_PACK",()=>we.getBool("HAS_WEBGL")),we.registerFlag("WEBGL_PACK_NORMALIZATION",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_CLIP",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_REDUCE",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_LAZILY_UNPACK",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_CONV_IM2COL",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function BL(n){if(null==Zu){const t=us(n);Zu=t.getParameter(t.MAX_TEXTURE_SIZE)}return Zu}(we.getNumber("WEBGL_VERSION"))),we.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function WL(n){if(null==Ju){const t=us(n);Ju=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Ju)}(we.getNumber("WEBGL_VERSION"))),we.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const n=we.getNumber("WEBGL_VERSION");return 0===n?0:function GL(n){if(0===n)return 0;let t;const e=us(n);return t=Zn(e,"EXT_disjoint_timer_query_webgl2")&&2===n?2:Zn(e,"EXT_disjoint_timer_query")?1:0,t}(n)}),we.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>we.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!rm()),we.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function UL(n){if(0===n)return!1;const t=us(n);if(1===n){if(!Zn(t,"OES_texture_float"))return!1}else if(!Zn(t,"EXT_color_buffer_float"))return!1;return df(t)}(we.getNumber("WEBGL_VERSION"))),we.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!we.getBool("WEBGL_FORCE_F16_TEXTURES")&&we.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),we.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>function HL(n){if(0===n)return!1;const t=us(n);if(1!==n){if(Zn(t,"EXT_color_buffer_float"))return df(t);const s="EXT_color_buffer_half_float";if(Zn(t,s)){const r=t.getExtension(s);return function jL(n,t){const e=uf(n,t),s=n.createTexture();n.bindTexture(n.TEXTURE_2D,s),n.texImage2D(n.TEXTURE_2D,0,e.internalFormatHalfFloat,1,1,0,e.textureFormatFloat,e.textureTypeHalfFloat,null);const o=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,o),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,s,0);const i=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(s),n.deleteFramebuffer(o),i}(t,r)}return!1}return!(!Zn(t,"OES_texture_float")||!Zn(t,"WEBGL_color_buffer_float"))&&df(t)}(we.getNumber("WEBGL_VERSION"))),we.registerFlag("WEBGL_FENCE_API_ENABLED",()=>function qL(n){return 2===n&&null!=us(n).fenceSync}(we.getNumber("WEBGL_VERSION"))),we.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>we.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),we.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,n=>{if(n<0&&-1!==n)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${n}.`)}),we.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>rm()?1:-1,n=>{if(n<0&&-1!==n)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${n}.`)}),we.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),we.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),we.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),we.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),we.registerFlag("WEBGL_EXP_CONV",()=>!1),we.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>we.getBool("IS_TEST")),we.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),we.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),we.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1),we.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);const F0="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:O0}=Ie;function YL(n,t,e){const s=[];if(n.forEach(p=>{const f=E(p.shapeInfo.logicalShape);if(p.shapeInfo.isUniform?s.push(`uniform float ${p.name}${f>1?`[${f}]`:""};`):(s.push(`uniform sampler2D ${p.name};`),s.push(`uniform int offset${p.name};`)),e.enableShapeUniforms){const{uniformShape:g}=mf(e.packedInputs,p.shapeInfo.logicalShape,p.shapeInfo.texShape);switch(g.length){case 1:s.push(`uniform int ${p.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${p.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${p.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${p.name}Shape;`)}s.push(`uniform ivec2 ${p.name}TexShape;`)}}),e.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}e.customUniforms&&e.customUniforms.forEach(p=>{s.push(`uniform ${p.type} ${p.name}${p.arrayIndex?`[${p.arrayIndex}]`:""};`)});const r=s.join("\n"),a=n.map(p=>function ZL(n,t,e=!1,s){let r="";return r+=e?P0(n,s):Ia(n,s),n.shapeInfo.logicalShape.length<=t.logicalShape.length&&(r+=e?function EV(n,t){const e=n.name,s=e.charAt(0).toUpperCase()+e.slice(1),r="get"+s+"AtOutCoords",a=n.shapeInfo.logicalShape.length,o=t.logicalShape.length,i=O0(n.shapeInfo.logicalShape,t.logicalShape),l=mt(o),u=o-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":o<2&&i.length>=1?"coords = 0;":i.map(x=>`coords.${h[x+u]} = 0;`).join("\n");let d="";d=o<2&&a>0?"coords":n.shapeInfo.logicalShape.map((x,b)=>`coords.${h[b+u]}`).join(", ");let p="return outputValue;";const g=1===E(n.shapeInfo.logicalShape),y=1===E(t.logicalShape);if(1!==a||g||y){if(g&&!y)p=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const x=a-2,b=a-1;i.indexOf(x)>-1&&i.indexOf(b)>-1?p="return vec4(outputValue.x);":i.indexOf(x)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(b)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${d});\n      ${p}\n    }\n  `}(n,t):function DV(n,t){const e=n.name,s=e.charAt(0).toUpperCase()+e.slice(1),r="get"+s+"AtOutCoords",i=n.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!n.shapeInfo.isUniform&&i===l&&null==n.shapeInfo.flatOffset&&ye(n.shapeInfo.texShape,t.texShape))return`\n      float ${r}() {\n        return sampleTexture(${e}, resultUV);\n      }\n    `;const u=mt(l),c=O0(n.shapeInfo.logicalShape,t.logicalShape),h=l-i;let d;const p=["x","y","z","w","u","v"];d=0===i?"":l<2&&c.length>=1?"coords = 0;":c.map(g=>`coords.${p[g+h]} = 0;`).join("\n");let f="";return f=l<2&&i>0?"coords":n.shapeInfo.logicalShape.map((g,m)=>`coords.${p[m+h]}`).join(", "),`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${d}\n      return get${s}(${f});\n    }\n  `}(n,t)),r}(p,t,e.packedInputs,e.enableShapeUniforms)).join("\n"),o=t.texShape,i=mn(),l=function eV(n){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${n.texture2D}(textureSampler, uv).r;\n    }\n  `}(i);let u,c,h=function sV(n){return`${n.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${n.varyingFs} vec2 resultUV;\n    ${n.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${n.defineSpecialNaN}\n    ${n.defineSpecialInf}\n    ${n.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${rV}\n    ${aV}\n    ${oV}\n  `}(i);return t.isPacked?(u=function JL(n,t,e){switch(n.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function lV(n,t,e){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===s[0]?e?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `:1===s[1]?e?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `:e?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,e);case 2:return function gV(n,t,e){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(ye(n,t))return e?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const r=Math.ceil(n[1]/2);return e?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(n,t,e);case 3:return function cV(n,t,e){if(e)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(n[2]/2),a=r*Math.ceil(n[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(n,t,e);default:return function dV(n,t,e){if(e)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(n[n.length-1]/2),a=r*Math.ceil(n[n.length-2]/2);let o=a,i="",l="b, r, c";for(let u=2;u<n.length-1;u++)o*=n[n.length-u-1],i=`\n      int b${u} = index / ${o};\n      index -= b${u} * ${o};\n    `+i,l=`b${u}, `+l;return`\n    ivec${n.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${n.length}(${l});\n    }\n  `}(n,t,e)}}(t.logicalShape,o,e.enableShapeUniforms),c=function nV(n){return`\n    void setOutput(vec4 val) {\n      ${n.output} = val;\n    }\n  `}(i)):(u=function QL(n,t,e){switch(n.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function uV(n,t,e){return 1===t[0]?e?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?e?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:e?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,e);case 2:return function yV(n,t,e){return ye(n,t)?e?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===n[1]?e?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===n[0]?e?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:e?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${n[1]};\n      int c = index - r * ${n[1]};\n      return ivec2(r, c);\n    }\n  `}(n,t,e);case 3:return function hV(n,t,e){if(e)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${Qu(["r","c","d"],n)}\n    return ivec3(r, c, d);\n  }\n`;const s=Mr(["r","c","d"],n);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(n,t,e);case 4:return function pV(n,t,e){if(e)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${Qu(["r","c","d","d2"],n)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const s=Mr(["r","c","d","d2"],n);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(n,t,e);case 5:return function fV(n,t){const e=Mr(["r","c","d","d2","d3"],n);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(n,t);case 6:return function mV(n,t){const e=Mr(["r","c","d","d2","d3","d4"],n);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(n,t);default:throw new Error(`${n.length}-D output sampling is not yet supported`)}}(t.logicalShape,o,e.enableShapeUniforms),c=function tV(n){return`\n    void setOutput(float val) {\n      ${n.output} = vec4(val, 0, 0, 0);\n    }\n  `}(i)),e.packedInputs&&(h+=iV),[h,l,c,r,u,a,e.userCode].join("\n")}function Ia(n,t=!1){const e=n.shapeInfo.logicalShape;switch(e.length){case 0:return function bV(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1);if(n.shapeInfo.isUniform)return`float ${s}() {return ${e};}`;const[r,a]=n.shapeInfo.texShape;if(1===r&&1===a)return`\n      float ${s}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const o=zr(e);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${o});\n      return sampleTexture(${e}, uv);\n    }\n  `;const[i,l]=n.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${i}, ${l}, ${o});\n      return sampleTexture(${e}, uv);\n    }\n  `}(n,t);case 1:return function vV(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1);if(n.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${Sa(n)}\n      }\n    `;const r=n.shapeInfo.texShape,a=r[0],o=r[1];if(1===o&&1===a)return`\n      float ${s}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=zr(e);return 1===o?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${e}TexShape[0]));\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${a}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `:1===a?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${e}TexShape[1]), 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${o}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:t?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${o}, index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(n,t);case 2:return function SV(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n.shapeInfo.texShape;if(null!=a&&ye(e,a))return t?`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${a[0]}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const{newShape:o,keptDims:i}=Ft(e);if(o.length<e.length){const p=["row","col"];return`\n      ${Ia(Ca(n,o),t)}\n      float ${r}(int row, int col) {\n        return ${r}(${Na(p,i)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${Sa(n)}\n      }\n    `;const u=a[0],c=a[1],h=zr(s);return 1===c?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `:1===u?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `:t?`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(n,t);case 3:return function NV(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e[1]*e[2],o=e[2],{newShape:i,keptDims:l}=Ft(e);if(i.length<e.length){const m=["row","col","depth"];return`\n        ${Ia(Ca(n,i),t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${Na(m,l)});\n        }\n      `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${o}, 1)));\n        ${Sa(n)}\n      }\n    `;const c=n.shapeInfo.texShape,h=c[0],d=c[1],p=n.shapeInfo.flatOffset;if(d===a&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${o}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(d===o&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const f=zr(s);return t?`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `:`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${o} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${d}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(n,t);case 4:return function TV(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e[3],o=e[2]*a,i=e[1]*o,{newShape:l,keptDims:u}=Ft(e);if(l.length<e.length){const b=["row","col","depth","depth2"];return`\n      ${Ia(Ca(n,l),t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${Na(b,u)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${o}, ${a}, 1)));\n        ${Sa(n)}\n      }\n    `;const c=n.shapeInfo.flatOffset,h=n.shapeInfo.texShape,d=h[0],p=h[1],f=`int stride2 = ${s}Shape[3];`,g=`int stride1 = ${s}Shape[2] * stride2;`,m=`int stride0 = ${s}Shape[1] * stride1;`;if(p===i&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${g}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${o}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(p===a&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const y=zr(s);return t?`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${g}\n      ${m}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${d}, ${p}, index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `}(n,t);case 5:return function _V(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t[4],a=t[3]*r,o=t[2]*a,i=t[1]*o,{newShape:l,keptDims:u}=Ft(t);if(l.length<t.length){const m=["row","col","depth","depth2","depth3"];return`\n      ${Ia(Ca(n,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${Na(m,u)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${o}, ${a}, ${r})) +\n          depth3;\n        ${Sa(n)}\n      }\n    `;const c=n.shapeInfo.flatOffset,h=n.shapeInfo.texShape,d=h[0],p=h[1];if(p===i&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(p===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} + depth * ${a} +\n          depth2 * ${r} + depth3 + ${zr(e)};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(n);case 6:return function $V(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),{newShape:r,keptDims:a}=Ft(t);if(r.length<t.length){const y=["row","col","depth","depth2","depth3","depth4"];return`\n      ${Ia(Ca(n,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${Na(y,a)});\n      }\n    `}const o=t[5],i=t[4]*o,l=t[3]*i,u=t[2]*l,c=t[1]*u;if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${Sa(n)}\n      }\n    `;const h=n.shapeInfo.flatOffset,d=n.shapeInfo.texShape,p=d[0],f=d[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${i}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(f===o&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${i} + depth3 * ${o} + depth4 + ${zr(e)};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(n);default:throw new Error(`${e.length}-D input sampling is not yet supported`)}}function P0(n,t){switch(n.shapeInfo.logicalShape.length){case 0:return function xV(n){const t=n.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${mn().texture2D}(${t}, halfCR);\n    }\n  `}(n);case 1:return function wV(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=n.shapeInfo.texShape,a=mn();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${e}, uv);\n    }\n  `;const o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${o[0]}, ${o[1]}, index);\n      return ${a.texture2D}(${e}, uv);\n    }\n  `}(n,t);case 2:return function IV(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n.shapeInfo.texShape,o=a[0],i=a[1],l=mn();if(null!=a&&ye(e,a))return t?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${o}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(e[1]/2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(n,t);case 3:return function CV(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n.shapeInfo.texShape,o=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===e[0]){const p=[1,2],g=["b","row","col"];return`\n        ${P0(Ca(n,e.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${Na(g,p)});\n        }\n      `}const i=mn();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `;const l=o[0],u=o[1],c=Math.ceil(e[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${c*Math.ceil(e[1]/2)}, ${c}, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `}(n,t);default:return function kV(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=mn();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${e}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${e}, uv);\n    }\n  `;const a=n.shapeInfo.logicalShape,o=a.length,i=n.shapeInfo.texShape,l=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],u=l[0],c=l[1],h=Math.ceil(a[o-1]/2);let d=h*Math.ceil(a[o-2]/2),p="int b, int row, int col",f=`b * ${d} + (row / 2) * ${h} + (col / 2)`;for(let g=2;g<o-1;g++)p=`int b${g}, `+p,d*=a[o-g-1],f=`b${g} * ${d} + `+f;return`\n    vec4 ${s}(${p}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${r.texture2D}(${e}, uv);\n    }\n  `}(n,t)}}const rV="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",aV="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",oV="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",iV="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function zr(n){return`offset${n}`}function Sa(n){const t=n.name,e=E(n.shapeInfo.logicalShape);return e<2?`return ${t};`:`\n    for (int i = 0; i < ${e}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function mt(n){if(n<=1)return"int";if(2===n)return"ivec2";if(3===n)return"ivec3";if(4===n)return"ivec4";if(5===n)return"ivec5";if(6===n)return"ivec6";throw Error(`GPU for rank ${n} is not yet supported`)}function mf(n,t,e){const{newShape:s,keptDims:r}=Ft(t),a=t.length,o=n&&3===a&&1===t[0],i=o?t.slice(1):s,l=!n&&a>1&&!ye(t,e)&&s.length<a||o;return{useSqueezeShape:l,uniformShape:l?i:t,keptDims:r}}function Ca(n,t){const e=JSON.parse(JSON.stringify(n));return e.shapeInfo.logicalShape=t,e}function Na(n,t){return t.map(e=>n[e]).join(", ")}function V0(n,t,e){const s={},r={},a={},o=[];let i,l,u,c=null,h=null;h=n.getUniformLocation(e,"NAN",!1),1===z().getNumber("WEBGL_VERSION")&&(c=n.getUniformLocation(e,"INFINITY",!1));const d=!1;for(let p=0;p<t.variableNames.length;p++){const f=t.variableNames[p];s[f]=n.getUniformLocation(e,f,d),s[`offset${f}`]=n.getUniformLocation(e,`offset${f}`,d),t.enableShapeUniforms&&(r[`${f}Shape`]=n.getUniformLocation(e,`${f}Shape`,d),a[`${f}TexShape`]=n.getUniformLocation(e,`${f}TexShape`,d))}return t.enableShapeUniforms&&(i=n.getUniformLocation(e,"outShape",d),u=n.getUniformLocation(e,"outShapeStrides",d),l=n.getUniformLocation(e,"outTexShape",d)),t.customUniforms&&t.customUniforms.forEach((p,f)=>{o[f]=n.getUniformLocation(e,p.name,d)}),{uniformLocations:s,customUniformLocations:o,infLoc:c,nanLoc:h,inShapesLocations:r,inTexShapesLocations:a,outShapeLocation:i,outShapeStridesLocation:u,outTexShapeLocation:l}}function M0(n,t){if(n.length!==t.length)throw Error(`Binary was compiled with ${n.length} inputs, but was executed with ${t.length} inputs`);n.forEach((e,s)=>{const r=e.logicalShape,a=t[s],o=a.shape;if(!ye(r,o))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${o} must match`);if(e.isUniform&&a.isUniform)return;const i=e.texShape,l=a.isUniform?null:a.texData.texShape;if(!ye(i,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${l} must match`)})}function gn(n){return z().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&n<=4}class OV{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=xa.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=mn();this.outputShape=t,this.enableShapeUniforms=gn(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?Qu(["r","c","d"],t):Mr(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${e.output} = result;\n      }\n    `}}class PV{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=xa.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=mn();this.outputShape=t,this.enableShapeUniforms=gn(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?Qu(["r","c","d"],t):Mr(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${e.output} = result;\n      }\n    `}}class LV{constructor(t){this.variableNames=["A"],this.outTexUsage=$n.DOWNLOAD;const e=mn();this.outputShape=t,this.userCode=`\n      ${F0}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class VV{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=$n.DOWNLOAD;const e=mn();this.outputShape=t,this.userCode=`\n      ${F0}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}const MV={R:0,G:1,B:2,A:3};class z0{constructor(t,e=!1,s="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const r=mn();this.outputShape=t,this.enableShapeUniforms=gn(this.outputShape.length);let a="result";e&&(a="floor(result * 255. + 0.5)");let o="";for(let i=0;i<s.length;i++)o+=`\n          if(offset == ${i}) {\n            result = values[${MV[s[i]]}];\n          }`;this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":pf(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${s.length});\n\n        flatIndex = idiv(flatIndex, ${s.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${r.texture2D}(A, uv);\n          ${o}\n        }\n        ${r.output} = vec4(${a}, 0., 0., 0.);\n      }\n    `}}class zV{constructor(t,e=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=mn();this.outputShape=t,this.enableShapeUniforms=gn(this.outputShape.length);let r="",a="result";e&&(a="floor(result * 255. + 0.5)");for(let o=0;o<=1;o++)for(let i=0;i<=1;i++){const l=2*o+i;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${i} < ${this.enableShapeUniforms?"outShape[2]":`${t[2]}`}) {\n          localCoords[2] += ${i};\n          if (localCoords[1] + ${o} < ${this.enableShapeUniforms?"outShape[1]":`${t[1]}`}) {\n            localCoords[1] += ${o};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${s.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${l}] = values[0];\n            } else if (offset == 1) {\n              result[${l}] = values[1];\n            } else if (offset == 2) {\n              result[${l}] = values[2];\n            } else {\n              result[${l}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":pf(t)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${s.output} = ${a};\n        }\n    `}}function yi(n,t,e,s,r,a){!function RL(n,t){const e=z().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(n<=0||t<=0)throw new Error(`Requested texture size [${n}x${t}] is invalid.`);if(n>e||t>e)throw new Error(`Requested texture size [${n}x${t}] greater than WebGL maximum on this browser / GPU [${e}x${e}].`)}(t,e);const o=function AL(n){return Ps(n,()=>n.createTexture(),"Unable to create WebGLTexture.")}(n),i=n.TEXTURE_2D;return ue(n,()=>n.bindTexture(i,o)),ue(n,()=>n.texParameteri(i,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE)),ue(n,()=>n.texParameteri(i,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE)),ue(n,()=>n.texParameteri(i,n.TEXTURE_MIN_FILTER,n.NEAREST)),ue(n,()=>n.texParameteri(i,n.TEXTURE_MAG_FILTER,n.NEAREST)),1===z().getNumber("WEBGL_VERSION")?ue(n,()=>n.texImage2D(i,0,s,t,e,0,r,a,null)):ue(n,()=>n.texStorage2D(i,1,s,t,e)),ue(n,()=>n.bindTexture(n.TEXTURE_2D,null)),{texture:o,texShape:[e,t]}}function B0(n){return n.internalFormatFloat}function W0(n){return n.internalFormatHalfFloat}function G0(n){return n.downloadTextureFormat}function U0(n){return n.internalFormatPackedFloat}function H0(n){return n.internalFormatPackedHalfFloat}class gf{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const e=z().getNumber("WEBGL_VERSION");if(null!=t?(this.gl=t,function mL(n,t){ir[n]=t}(e,t)):this.gl=us(e),t=this.gl,2===z().getNumber("WEBGL_VERSION")){const a=t;this.createVertexArray=()=>ue(a,()=>a.createVertexArray()),this.bindVertexArray=o=>ue(a,()=>a.bindVertexArray(o)),this.deleteVertexArray=o=>ue(a,()=>a.deleteVertexArray(o)),this.getVertexArray=()=>ue(a,()=>a.getParameter(a.VERTEX_ARRAY_BINDING))}else if(null!=t){const a=t.getExtension("OES_vertex_array_object");if(null==a)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>ue(t,()=>a.createVertexArrayOES()),this.bindVertexArray=o=>ue(t,()=>a.bindVertexArrayOES(o)),this.deleteVertexArray=o=>ue(t,()=>a.deleteVertexArrayOES(o)),this.getVertexArray=()=>ue(t,()=>t.getParameter(a.VERTEX_ARRAY_BINDING_OES))}let s="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===z().getNumber("WEBGL_VERSION")){const o="OES_texture_half_float";if(this.textureFloatExtension=ju(this.gl,"OES_texture_float"),Zn(this.gl,o))this.textureHalfFloatExtension=ju(this.gl,o);else if(z().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(s),Zn(this.gl,r))this.colorBufferHalfFloatExtension=ju(this.gl,r);else if(z().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(s="EXT_color_buffer_float",Zn(this.gl,s))this.colorBufferFloatExtension=this.gl.getExtension(s);else{if(!Zn(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=function WV(n){return function EL(n,t){const e=Ps(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return ue(n,()=>n.bindBuffer(n.ARRAY_BUFFER,e)),ue(n,()=>n.bufferData(n.ARRAY_BUFFER,t,n.STATIC_DRAW)),e}(n,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function GV(n){return function DL(n,t){const e=Ps(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return ue(n,()=>n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,e)),ue(n,()=>n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW)),e}(n,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function FL(n){return Ps(n,()=>n.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=uf(this.gl,this.textureHalfFloatExtension)}get debug(){return z().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;ue(t,()=>t.finish()),ue(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),ue(t,()=>t.deleteFramebuffer(this.framebuffer)),ue(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),ue(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),ue(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function UV(n,t,e,s){const[r,a]=mi(t,e);return yi(n,r,a,B0(s),s.textureFormatFloat,n.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function HV(n,t,e,s){const[r,a]=mi(t,e);return yi(n,r,a,W0(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function jV(n,t,e,s){const[r,a]=mi(t,e);return yi(n,r,a,G0(s),n.RGBA,n.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function ZV(n,t,e){ue(n,()=>n.bindTexture(n.TEXTURE_2D,t)),e.data instanceof Uint8Array?2===z().getNumber("WEBGL_VERSION")?ue(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,e.width,e.height,n.RGBA,n.UNSIGNED_BYTE,e.data)):ue(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,e.width,e.height,0,n.RGBA,n.UNSIGNED_BYTE,e.data)):2===z().getNumber("WEBGL_VERSION")?ue(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,n.RGBA,n.UNSIGNED_BYTE,e)):ue(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,e)),ue(n,()=>n.bindTexture(n.TEXTURE_2D,null))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,s,r){this.throwIfDisposed(),function YV(n,t,e,s,r,a){let o,i,l;ue(n,()=>n.bindTexture(n.TEXTURE_2D,t)),r instanceof Uint8Array?(o=new Uint8Array(e*s*4),i=n.UNSIGNED_BYTE,l=n.RGBA):(o=new Float32Array(e*s*4),i=n.FLOAT,l=a.internalFormatPackedFloat),o.set(r),2===z().getNumber("WEBGL_VERSION")?ue(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,e,s,n.RGBA,i,o)):ue(n,()=>n.texImage2D(n.TEXTURE_2D,0,l,e,s,0,n.RGBA,i,o)),ue(n,()=>n.bindTexture(n.TEXTURE_2D,null))}(this.gl,t,e,s,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function KV(n,t,e,s){const[r,a]=ba(t,e);return yi(n,r,a,H0(s),n.RGBA,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function qV(n,t,e,s){const[r,a]=ba(t,e);return yi(n,r,a,U0(s),n.RGBA,n.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(D0(this.gl,this.framebuffer),this.outputTexture=null),ue(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,s){return this.downloadMatrixDriver(t,()=>function eM(n,t,e,s){const[r,a]=mi(t,e),i=new Uint8Array(function xL(n,t){return n*t}(t*e,4));return ue(n,()=>n.readPixels(0,0,r,a,s.downloadTextureFormat,n.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}(this.gl,e,s,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,s,r,a,o){return function tM(n,t,e,s,r,a,o,i){const l=n,u=new Float32Array(function bL(n,t){const[e,s]=ba(n,t);return e*s*4}(a,o));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,t,0,0,0,a,o)}downloadFloat32MatrixFromBuffer(t,e){return function QV(n,t,e){const s=n,r=new Float32Array(e);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,t,e)}createBufferFromTexture(t,e,s){this.bindTextureToFrameBuffer(t);const r=function JV(n,t,e,s){const r=n.createBuffer();ue(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,r));const i=16*t*e;return ue(n,()=>n.bufferData(n.PIXEL_PACK_BUFFER,i,n.STREAM_READ)),ue(n,()=>n.readPixels(0,0,e,t,n.RGBA,n.FLOAT,0)),ue(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,null)),r}(this.gl,e,s);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,s;if(z().getBool("WEBGL_FENCE_API_ENABLED")){const r=t,a=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),s=()=>{const o=r.clientWaitSync(a,0,0);return o===r.ALREADY_SIGNALED||o===r.CONDITION_SATISFIED},e=a}else z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),s=()=>this.isQueryAvailable(e,z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):s=()=>!0;return{query:e,isFencePassed:s}}downloadMatrixFromPackedTexture(t,e,s){return this.downloadMatrixDriver(t,()=>function nM(n,t,e){const s=new Float32Array(t*e*4);return ue(n,()=>n.readPixels(0,0,e,t,n.RGBA,n.FLOAT,s)),s}(this.gl,e,s))}createProgram(t){this.throwIfDisposed();const e=this.gl;null==this.vertexShader&&(this.vertexShader=function BV(n){const t=mn();return function NL(n,t){const e=Ps(n,()=>n.createShader(n.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(ue(n,()=>n.shaderSource(e,t)),ue(n,()=>n.compileShader(e)),!1===n.getShaderParameter(e,n.COMPILE_STATUS))throw console.log(n.getShaderInfoLog(e)),new Error("Failed to compile vertex shader.");return e}(n,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(e));const s=function _L(n){return Ps(n,()=>n.createProgram(),"Unable to create WebGLProgram.")}(e);let r;return ue(e,()=>e.attachShader(s,this.vertexShader)),ue(e,()=>e.attachShader(s,t)),function $L(n,t){if(ue(n,()=>n.linkProgram(t)),!z().get("ENGINE_COMPILE_ONLY")&&!1===n.getProgramParameter(t,n.LINK_STATUS))throw console.log(n.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(e,s),r=Object.assign(s,{vao:this.createVertexArray()}),this.bindVertexArray(r.vao),ue(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indexBuffer)),console.assert(function XV(n,t,e){return ue(n,()=>n.bindBuffer(n.ARRAY_BUFFER,e)),E0(n,t,"clipSpacePos",e,3,20,0)&&E0(n,t,"uv",e,2,20,12)}(e,r,this.vertexBuffer),"gpgpu_util.bindVertexProgramAttributeStreams not fully successful."),this.debug&&cf(e,r),this.setProgram(r),r}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&(ue(this.gl,()=>this.gl.deleteProgram(t)),this.deleteVertexArray(t.vao))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&(this.bindVertexArray(this.program.vao),this.debug&&cf(this.gl,this.program)),ue(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,s=!0){return this.throwIfDisposed(),s?function PL(n,t,e){return Ps(n,()=>n.getUniformLocation(t,e),'uniform "'+e+'" not present in program.')}(this.gl,t,e):function LL(n,t,e){return n.getUniformLocation(t,e)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),ue(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,s){this.throwIfDisposed(),this.throwIfNoProgram(),VL(this.gl,t,e,s)}setOutputMatrixTexture(t,e,s){this.setOutputMatrixTextureDriver(t,s,e)}setOutputPackedMatrixTexture(t,e,s){this.throwIfDisposed();const[r,a]=ba(e,s);this.setOutputMatrixTextureDriver(t,r,a)}setOutputMatrixWriteRegion(t,e,s,r){this.setOutputMatrixWriteRegionDriver(s,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,s,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&cf(this.gl,this.program),qu(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;if(this.debug){const e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}ue(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),ue(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=ju(this.gl,2===z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const s=this.gl,r=this.getQueryTimerExtensionWebGL2(),a=s.createQuery();return s.beginQuery(r.TIME_ELAPSED_EXT,a),a}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,s=this.getQueryTimerExtensionWebGL2();return void e.endQuery(s.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}waitForQueryAndGetTime(t){var e=this;return A(function*(){return yield Et(()=>e.disposed||e.isQueryAvailable(t,z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),e.getQueryTime(t,z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))})()}getQueryTime(t,e){if(0===e)return null;if(2===e){const s=this.gl;return s.getQueryParameter(t,s.QUERY_RESULT)/1e6}{const s=this.getQueryTimerExtensionWebGL1();return s.getQueryObjectEXT(t,s.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const s=this.gl,r=this.getQueryTimerExtensionWebGL2(),a=s.getQueryParameter(t,s.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),a&&!this.disjoint}{const s=this.getQueryTimerExtensionWebGL1(),r=s.getQueryObjectEXT(t,s.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(s.GPU_DISJOINT_EXT)),r&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function sM(n){let t=0;for(;t<n.length&&n[t]();++t);return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let e=0;e<=t;++e){const{resolveFn:s}=this.itemsToPoll[e];s()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){if(this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1)return;let s;"setTimeoutCustom"in z().platform&&(s=z().platform.setTimeoutCustom.bind(z().platform)),Et(()=>(this.pollItems(),0===this.itemsToPoll.length),()=>0,null,s)}bindTextureToFrameBuffer(t){this.throwIfDisposed(),hf(this.gl,t,this.framebuffer),this.debug&&qu(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(hf(this.gl,this.outputTexture,this.framebuffer),this.debug&&qu(this.gl)):D0(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const s=e();return this.unbindTextureToFrameBuffer(),s}setOutputMatrixTextureDriver(t,e,s){this.throwIfDisposed();const r=this.gl;hf(r,t,this.framebuffer),this.debug&&qu(r),this.outputTexture=t,ue(r,()=>r.viewport(0,0,e,s)),ue(r,()=>r.scissor(0,0,e,s))}setOutputMatrixWriteRegionDriver(t,e,s,r){this.throwIfDisposed(),ue(this.gl,()=>this.gl.scissor(t,e,s,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:rM,bincountImpl:j0,bincountReduceImpl:aM,castImpl:oM,ceilImpl:iM,concatImpl:lM,equalImpl:uM,expImpl:cM,expm1Impl:hM,floorImpl:dM,gatherNdImpl:pM,gatherV2Impl:fM,greaterImpl:mM,greaterEqualImpl:gM,lessImpl:yM,lessEqualImpl:xM,linSpaceImpl:bM,logImpl:wM,maxImpl:vM,maximumImpl:IM,minimumImpl:SM,multiplyImpl:CM,negImpl:NM,notEqualImpl:kM,prodImpl:TM,raggedGatherImpl:_M,raggedRangeImpl:$M,raggedTensorToTensorImpl:EM,rangeImpl:DM,rsqrtImpl:AM,scatterImpl:RM,sigmoidImpl:FM,simpleAbsImpl:q0,sliceImpl:OM,sparseFillEmptyRowsImpl:PM,sparseReshapeImpl:LM,sparseSegmentReductionImpl:K0,sqrtImpl:VM,stridedSliceImpl:MM,stringNGramsImpl:zM,stringSplitImpl:BM,stringToHashBucketFastImpl:WM,subImpl:GM,tileImpl:UM,topKImpl:HM,transposeImpl:yf,uniqueImpl:jM}=qe;function X0(n,t){return["x","y","z","w","u","v"].slice(0,t).map(e=>`${n}.${e}`)}function yn(n,t){return 1===t?[n]:X0(n,t)}class KM{constructor(t){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.enableShapeUniforms=gn(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=yn("rc",this.rank),s=mt(this.rank),r=this.getOutOfBoundsCondition(e),a=this.getSetup(e),o=this.getOutput(e);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${r}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${o}));\n          }\n        }\n      `}}getSourceCoordsArr(t){const e=[];for(let s=0;s<=1;s++)for(let r=0;r<=1;r++){let a=`${0===s?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let o=2;o<this.rank;o++)a=`${t[t.length-1-o]},`+a;e.push(a)}return e}getOutOfBoundsCondition(t){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let e="";for(let s=this.rank-2;s<this.rank;s++)e+=`${t[s]} >= ${this.enableShapeUniforms?`outShape[${s}]`:this.outputShape[s]}`,s<this.rank-1&&(e+="||");return e}getSetup(t){if(1===this.rank)return"";const e=t.slice(-2);return`\n      int r = ${e[0]};\n      int c = ${e[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1]};\n      bool rEdge = rp1 >= ${this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2]};\n    `}getOutput(t){const e=this.getSourceCoordsArr(t);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${e[0]}),\n            cEdge ? 0. : getA(${e[1]}),\n            rEdge ? 0. : getA(${e[2]}),\n            rEdge || cEdge ? 0. : getA(${e[3]})`}}class Y0{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=t,this.enableShapeUniforms=gn(this.outputShape.length);let s="";for(let r=0;r<4;r++){let a="thisRC = rc;";r%2==1&&(a+="thisRC.z += 1;"),r>1&&(a+="thisRC.y += 1;"),s+=`\n        ${a}\n        ${r>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${r}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${r>0?"}":""}\n      `}this.userCode=`\n      ${function XM(n,t){return`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${t?function XL(n,t,e="index"){const r=function KL(n,t){const e=n.length,s=n.map(a=>`${t}[${a}]`),r=new Array(e-1);r[e-2]=s[e-1];for(let a=e-3;a>=0;--a)r[a]=`(${r[a+1]} * ${s[a+1]})`;return r}(n.map((a,o)=>o),t);return r.map((a,o)=>`int ${n[o]} = ${e} / ${r[o]}; ${o===r.length-1?`int ${n[o+1]} = ${e} - ${n[o]} * ${r[o]}`:`index -= ${n[o]} * ${r[o]}`};`).join("")}(["r","c","d"],"inputShape"):Mr(["r","c","d"],n)}\n      return ivec3(r, c, d);\n    }\n  `}(e,this.enableShapeUniforms)}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":pf(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":t[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":t[2]};\n\n        ${s}\n\n        setOutput(result);\n      }\n    `}}class YM{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,s){const r=J0(e,s),a=Q0(t,r,s);a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]);const o=Z0(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s);if(this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=o,this.log();const l=this.freeTextures[a].shift();return this.usedTextures[a].push(l),l}let i;return r===tn.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===tn.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===tn.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===tn.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===tn.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[a].push(i),this.numUsedTextures++,this._numBytesAllocated+=o,this.log(),i}releaseTexture(t,e,s,r){if(null==this.freeTextures)return;const a=J0(s,r),o=Q0(e,a,r);o in this.freeTextures||(this.freeTextures[o]=[]);const i=Z0(e,a,this.gpgpu.gl,this.gpgpu.textureConfig,r),l=z().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==l&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(t.texture),this._numBytesAllocated-=i):(this.freeTextures[o].push(t),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const u=this.usedTextures[o],c=u.indexOf(t);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(c,1),this.log()}log(){if(!this.logEnabled)return;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${this.numFreeTextures+this.numUsedTextures})`);const e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(const t in this.usedTextures)this.usedTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function Z0(n,t,e,s,r){const a=function JM(n,t){switch(n){case tn.PACKED_2X2_FLOAT32:return U0(t);case tn.PACKED_2X2_FLOAT16:return H0(t);case tn.UNPACKED_FLOAT32:return B0(t);case tn.UNPACKED_FLOAT16:return W0(t);case tn.PACKED_4X1_UNSIGNED_BYTE:return G0(t);default:throw new Error(`Unknown physical texture type ${n}`)}}(t,s);let o;if(r){const[l,u]=ba(n[0],n[1]);o=l*u}else{const[l,u]=mi(n[0],n[1]);o=l*u}const i=function ZM(n,t){if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===n.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(e,a);return o*i}function J0(n,t){if(n===$n.UPLOAD)return tn.PACKED_2X2_FLOAT32;if(n===$n.RENDER||null==n)return function QM(n){return z().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?n?tn.PACKED_2X2_FLOAT32:tn.UNPACKED_FLOAT32:n?tn.PACKED_2X2_FLOAT16:tn.UNPACKED_FLOAT16}(t);if(n===$n.DOWNLOAD||n===$n.PIXELS)return tn.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${n}`)}function Q0(n,t,e){return`${n[0]}_${n[1]}_${t}_${e}`}class Ns{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.enableShapeUniforms=gn(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const ew="return abs(x);",lr="return x;";class ur{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.enableShapeUniforms=gn(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class c3{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t,this.enableShapeUniforms=gn(this.outputShape.length);const e=t.length,s=yn("rc",e),r=mt(e),a=function qM(n,t){if(1===n)return"rc";let e="";for(let s=0;s<n;s++)e+=t[s],s<n-1&&(e+=",");return e}(e,s),o=s.slice(-2),i=e<=1?"rc":`vec2(${o.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${a});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const h3=Zg,tc={},m3=z().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");let x3=(()=>{class n extends Z{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!z().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let s;if(null!=e){if(e instanceof gf)s=e;else{const r=us(z().getNumber("WEBGL_VERSION"),e);s=new gf(r)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const r=us(z().getNumber("WEBGL_VERSION"));s=new gf(r),this.binaryCache=function f3(n){return n in tc||(tc[n]={}),tc[n]}(z().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=s,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new YM(this.gpgpu),this.numMBBeforeWarning=function y3(){return null==z().global.screen?1024:z().global.screen.height*z().global.screen.width*window.devicePixelRatio*600/1024/1024}(),this.texData=new U(this,ps())}nextDataId(){return n.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,s,r,a,o,i){const l=this.makeTensorInfo(s,r),u=this.texData.get(l.dataId);u.isPacked=!1,u.texture={texture:e,texShape:[a,o]},u.texShape=[a,o];const c=Ku(s),h=new z0(c,!1,i),d=this.runWebGLProgram(h,[l],r,[[a,o]]);return d.shape=s,u.texture=null,this.disposeIntermediateTensorInfo(l),d.dataId}write(e,s,r){if((z().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||z().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===r&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const a={id:this.nextDataId()};return this.texData.set(a,{shape:s,dtype:r,values:e,usage:$n.UPLOAD,refCount:1}),a}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,s,r,a,o){if(z().getBool("DEBUG")&&this.checkNumericalProblems(s),"complex64"===a)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:r,dtype:a,values:s,usage:$n.UPLOAD,refCount:o})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const s=this.texData.get(e),{values:r,dtype:a,complexTensorInfos:o,slice:i,shape:l,isPacked:u}=s;if(null!=i){let p;p=u?new ur(l,lr):new Ns(l,lr);const f=this.runWebGLProgram(p,[{dataId:e,shape:l,dtype:a}],a),g=this.readSync(f.dataId);return this.disposeIntermediateTensorInfo(f),g}if(null!=r)return this.convertAndCacheOnCPU(e);if("string"===a)return r;const c=null!=this.activeTimers;let h,d;return c&&(h=wn()),d="complex64"===a?Fs(this.readSync(o.real.dataId),this.readSync(o.imag.dataId)):this.getValuesFromTexture(e),c&&(this.downloadWaitMs+=wn()-h),this.convertAndCacheOnCPU(e,d)}read(e){var s=this;return A(function*(){if(s.pendingRead.has(e)){const m=s.pendingRead.get(e);return new Promise(y=>m.push(y))}const r=s.texData.get(e),{values:a,shape:o,slice:i,dtype:l,complexTensorInfos:u,isPacked:c}=r;if(null!=i){let m;m=c?new ur(o,lr):new Ns(o,lr);const y=s.runWebGLProgram(m,[{dataId:e,shape:o,dtype:l}],l),x=s.read(y.dataId);return s.disposeIntermediateTensorInfo(y),x}if(null!=a)return s.convertAndCacheOnCPU(e);if(z().getBool("DEBUG")&&!z().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===z().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let d,p,h=null;if("complex64"!==l&&z().get("WEBGL_BUFFER_SUPPORTED")){d=s.decode(e);const m=s.texData.get(d.dataId);h=s.gpgpu.createBufferFromTexture(m.texture.texture,...Hu(o))}if(s.pendingRead.set(e,[]),"complex64"!==l&&(yield s.gpgpu.createAndWaitForFence()),"complex64"===l){const m=yield Promise.all([s.read(u.real.dataId),s.read(u.imag.dataId)]);p=Fs(m[0],m[1])}else if(null==h)p=s.getValuesFromTexture(e);else{const m=E(o);p=s.gpgpu.downloadFloat32MatrixFromBuffer(h,m)}if(null!=d&&s.disposeIntermediateTensorInfo(d),null!=h){const m=s.gpgpu.gl;ue(m,()=>m.deleteBuffer(h))}const f=s.convertAndCacheOnCPU(e,p),g=s.pendingRead.get(e);return s.pendingRead.delete(e),g.forEach(m=>m(f)),s.pendingDisposal.has(e)&&(s.pendingDisposal.delete(e),s.disposeData(e)&&ps().removeDataId(e,s),s.pendingDeletes--),f})()}readToGPU(e,s={}){const r=this.texData.get(e),{values:a,shape:o,slice:i,dtype:l,isPacked:u,texture:c}=r;if("complex64"===l)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=i){let f;f=u?new ur(o,lr):new Ns(o,lr);const g=this.runWebGLProgram(f,[{dataId:e,shape:o,dtype:l}],l),m=this.readToGPU(g,s);return this.disposeIntermediateTensorInfo(g),m}if(null==c)throw null!=a?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const h=this.decode(e,s.customTexShape),d=ps().makeTensorFromTensorInfo(h),p=this.texData.get(h.dataId);return Object.assign({tensorRef:d},p.texture)}bufferSync(e){const s=this.readSync(e.dataId);if("string"===e.dtype)try{const r=s.map(a=>Ws(a));return He(e.shape,e.dtype,r)}catch(r){throw new Error("Failed to decode encoded string bytes into utf-8")}return He(e.shape,e.dtype,s)}checkNumericalProblems(e){if(null!=e)for(let s=0;s<e.length;s++){const r=e[s];if(!SL(r))throw z().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${r} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${r} cannot be represented on this device.`)}}getValuesFromTexture(e){const{shape:s,dtype:r,isPacked:a}=this.texData.get(e),o=E(s);if(z().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const p=this.decode(e),f=this.texData.get(p.dataId),g=this.gpgpu.downloadMatrixFromPackedTexture(f.texture.texture,...Hu(s)).subarray(0,o);return this.disposeIntermediateTensorInfo(p),g}const i=z().getBool("WEBGL_PACK")&&!0===a,l=i?Ku(s):s,u=i?new VV(l):new LV(l),c=this.runWebGLProgram(u,[{shape:l,dtype:r,dataId:e}],"float32"),h=this.texData.get(c.dataId),d=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(h.texture.texture,h.texShape[0],h.texShape[1]).subarray(0,o);return this.disposeIntermediateTensorInfo(c),d}timerAvailable(){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){var s=this;const r=this.activeTimers,a=[];let o=!1;null==this.programTimersStack?(this.programTimersStack=a,o=!0):this.activeTimers.push(a),this.activeTimers=a,e();const i=xr(this.activeTimers.map(c=>c.query)).filter(c=>null!=c),l=xr(this.activeTimers.map(c=>c.name)).filter(c=>null!=c);this.activeTimers=r,o&&(this.programTimersStack=null);const u={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return A(function*(){if(z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const c=yield Promise.all(i);u.kernelMs=function Ke(n){let t=0;for(let e=0;e<n.length;e++)t+=n[e];return t}(c),u.getExtraProfileInfo=()=>c.map((h,d)=>({name:l[d],ms:h})).map(h=>`${h.name}: ${h.ms}`).join(", ")}else u.kernelMs={error:"WebGL query timers are not supported in this environment."};return s.uploadWaitMs=0,s.downloadWaitMs=0,u})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:wn(),endMs:null}}endTimer(e){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=wn(),e)}getQueryTime(e){var s=this;return A(function*(){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?s.gpgpu.waitForQueryAndGetTime(e):e.endMs-e.startMs})()}disposeData(e,s=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(s?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!s&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:r}=this.texData.get(e);return null!=r&&(this.disposeData(r.real.dataId,s),this.disposeData(r.imag.dataId,s)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:s,dtype:r,texShape:a,usage:o,isPacked:i,slice:l}=this.texData.get(e),u=l&&l.origDataId||e,c=this.dataRefCount.get(u);c>1?this.dataRefCount.set(u,c-1):(this.dataRefCount.delete(u),null!=s&&(this.numBytesInGPU-=this.computeBytes(a,r),this.textureManager.releaseTexture(s,a,o,i)));const h=this.texData.get(e);h.texture=null,h.texShape=null,h.isPacked=!1,h.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,s=m3){return z().getBool("WEBGL_CPU_FORWARD")&&e.every(r=>null==this.texData.get(r.dataId).texture&&E(r.shape)<s)}getGPGPUContext(){return this.gpgpu}where(e){Dn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const s=e.dataSync();return h3(e.shape,s)}packedUnaryOp(e,s,r){const a=new ur(e.shape,s),o=this.compileAndRun(a,[e],r);return ps().makeTensorFromTensorInfo(o)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const a=q0(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,a)}if(z().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,ew,e.dtype);const s=new Ns(e.shape,ew),r=this.compileAndRun(s,[e]);return ps().makeTensorFromTensorInfo(r)}makeTensorInfo(e,s,r){let a;if("string"===s&&null!=r&&r.length>0&&Da(r[0])){const o=r.map(i=>Bs(i));a=this.write(o,e,s)}else a=this.write(r,e,s);return this.texData.get(a).usage=null,{dataId:a,shape:e,dtype:s}}makeOutput(e,s,r){return ps().makeTensorFromTensorInfo(this.makeTensorInfo(e,s,r),this)}unpackTensor(e){const s=new c3(e.shape);return this.runWebGLProgram(s,[e],e.dtype)}packTensor(e){const s=new KM(e.shape);return this.runWebGLProgram(s,[e],e.dtype,null,!0)}packedReshape(e,s){const r=[wa(e.shape),...va(e.shape)],a={dtype:e.dtype,shape:r,dataId:e.dataId},o=[wa(s),...va(s)],i=new Y0(o,r),c=this.runWebGLProgram(i,[a],e.dtype,[r],!0);return{dataId:c.dataId,shape:s,dtype:c.dtype}}decode(e,s){const r=this.texData.get(e),{isPacked:a,shape:o,dtype:i}=r;null!=s&&v(E(o)<=s[0]*s[1]*4,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");const l=Ku(o);let u;u=a?new PV(l):new OV(l);const h=[null!=s?s:Hu(l)];return{dtype:i,shape:o,dataId:this.runWebGLProgram(u,[{shape:l,dtype:i,dataId:e}],i,h,!0,s).dataId}}runWebGLProgram(e,s,r,a,o=!1,i){const l=this.makeTensorInfo(e.outputShape,r),u=this.texData.get(l.dataId);if(e.packedOutput&&(u.isPacked=!0),e.outPackingScheme===xa.DENSE){const x=null!=i?i:Hu(e.outputShape);u.texShape=x.map(b=>2*b)}if(null!=e.outTexUsage&&(u.usage=e.outTexUsage),0===E(l.shape))return u.values=Dt(l.dtype,0),l;const c=[],h=s.map(x=>{if("complex64"===x.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let b=this.texData.get(x.dataId);if(null==b.texture){if(!e.packedInputs&&E(x.shape)<=z().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:x.shape,texData:null,isUniform:!0,uniformValues:b.values};e.packedInputs&&(b.isPacked=!0,b.shape=x.shape)}if(this.uploadToGPU(x.dataId),!!b.isPacked!=!!e.packedInputs)x=b.isPacked?this.unpackTensor(x):this.packTensor(x),c.push(x),b=this.texData.get(x.dataId);else if(b.isPacked&&!Yu(b.shape,x.shape)){const w=x,I=x.shape;x.shape=b.shape,x=this.packedReshape(x,I),c.push(x),b=this.texData.get(x.dataId),w.shape=I}return{shape:x.shape,texData:b,isUniform:!1}});this.uploadToGPU(l.dataId);const d={shape:l.shape,texData:u,isUniform:!1},p=function FV(n,t,e){let s="";t.concat(e).forEach(o=>{const i=null!=o.texData&&null!=o.texData.slice&&o.texData.slice.flatOffset>0;if(n.enableShapeUniforms&&!o.isUniform){const l=o.texData.texShape,{useSqueezeShape:u,uniformShape:c,keptDims:h}=mf(n.packedInputs,o.shape,l);let d="",p="",f="";if(1===c.length&&n.packedInputs){const I=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)];d=`${I[0]>1}_${I[1]>1}`}else if(2!==c.length||n.packedInputs){if(c.length>2&&!n.packedInputs){const I=Se(c);f=`${I[0]===l[1]}_${I[I.length-1]===l[1]}`}}else p=`${c[0]>1}_${c[1]>1}`;const g=o.shape.length,m=2===c.length&&ye(o.shape,l),y=1===E(o.shape),x=ta(o.shape,e.shape),b=!n.packedInputs&&g===e.shape.length&&ye(l,e.texData.texShape);s+=`${g}_${b}_${u?h:""}_${c.length}_${y}_${x}_${m}_${d}_${p}_${f}_${n.packedInputs||c.length>2?"":`${l[0]>1}_${l[1]>1}`}_${i}`}else s+=`${o.shape}_${o.isUniform?"uniform":o.texData.texShape}_${i}`});let a=n.constructor.name;return a+="_"+s+"_"+n.userCode+`${z().getNumber("WEBGL_VERSION")}`,a}(e,h,d),f=this.getAndSaveBinary(p,()=>function AV(n,t,e,s){const r=e.map((c,h)=>{const d={logicalShape:c.shape,texShape:c.isUniform?null:c.texData.texShape,isUniform:c.isUniform,isPacked:!c.isUniform&&c.texData.isPacked,flatOffset:null};return null!=c.texData&&null!=c.texData.slice&&c.texData.slice.flatOffset>0&&(d.flatOffset=c.texData.slice.flatOffset),{name:t.variableNames[h],shapeInfo:d}}),a=r.map(c=>c.shapeInfo),o={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},i=YL(r,o,t),l=function kL(n,t){const e=Ps(n,()=>n.createShader(n.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(ue(n,()=>n.shaderSource(e,t)),ue(n,()=>n.compileShader(e)),z().get("ENGINE_COMPILE_ONLY"))return e;if(!1===n.getShaderParameter(e,n.COMPILE_STATUS))throw $0(t,n.getShaderInfoLog(e)),new Error("Failed to compile fragment shader.");return e}(n.gl,i),u=n.createProgram(l);return z().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:a,outShapeInfo:o,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:a,outShapeInfo:o},V0(n,t,u))}(this.gpgpu,e,h,d)),g=null!=this.activeTimers;let m;g&&(m=this.startTimer()),z().get("ENGINE_COMPILE_ONLY")||function RV(n,t,e,s,r){t.program.enableShapeUniforms||(M0(t.inShapeInfos,e),M0([t.outShapeInfo],[s]));const a=s.texData.texture,o=s.texData.texShape;s.texData.isPacked?n.setOutputPackedMatrixTexture(a.texture,o[0],o[1]):n.setOutputMatrixTexture(a.texture,o[0],o[1]),n.setProgram(t.webGLProgram),1===z().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&n.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&n.gl.uniform1f(t.nanLoc,NaN),e.forEach((l,u)=>{const c=t.program.variableNames[u],h=t.uniformLocations[c],d=t.uniformLocations[`offset${c}`],p=t.inShapesLocations[`${c}Shape`],f=t.inTexShapesLocations[`${c}TexShape`];if(p){const{uniformShape:g}=mf(t.program.packedInputs,l.shape,l.texData.texShape);switch(g.length){case 1:n.gl.uniform1iv(p,new Int32Array(g));break;case 2:n.gl.uniform2iv(p,new Int32Array(g));break;case 3:n.gl.uniform3iv(p,new Int32Array(g));break;case 4:n.gl.uniform4iv(p,new Int32Array(g))}}if(f&&n.gl.uniform2i(f,l.texData.texShape[0],l.texData.texShape[1]),null!=h){if(l.isUniform){if(E(l.shape)<2)n.gl.uniform1f(h,l.uniformValues[0]);else{let g=l.uniformValues;g instanceof Float32Array||(g=new Float32Array(g)),n.gl.uniform1fv(h,g)}return}null!=l.texData.slice&&null!=d&&n.gl.uniform1i(d,l.texData.slice.flatOffset),n.setInputMatrixTexture(l.texData.texture.texture,h,u)}});const i=t.outShapeLocation;if(i)switch(s.shape.length){case 1:n.gl.uniform1iv(i,new Int32Array(s.shape));break;case 2:n.gl.uniform2iv(i,new Int32Array(s.shape));break;case 3:n.gl.uniform3iv(i,new Int32Array(s.shape));break;case 4:n.gl.uniform4iv(i,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const l=Se(s.shape);switch(s.shape.length){case 2:n.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(l));break;case 3:n.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(l));break;case 4:n.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(l))}}t.outTexShapeLocation&&n.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&r&&t.program.customUniforms.forEach((l,u)=>{const c=t.customUniformLocations[u],h=r[u];if("float"===l.type)n.gl.uniform1fv(c,h);else if("vec2"===l.type)n.gl.uniform2fv(c,h);else if("vec3"===l.type)n.gl.uniform3fv(c,h);else if("vec4"===l.type)n.gl.uniform4fv(c,h);else if("int"===l.type)n.gl.uniform1iv(c,h);else if("ivec2"===l.type)n.gl.uniform2iv(c,h);else if("ivec3"===l.type)n.gl.uniform3iv(c,h);else{if("ivec4"!==l.type)throw Error(`uniform type ${l.type} is not supported yet.`);n.gl.uniform4iv(c,h)}}),n.executeProgram()}(this.gpgpu,f,h,d,a),c.forEach(x=>this.disposeIntermediateTensorInfo(x)),g&&(m=this.endTimer(m),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(m)}));const y=z().get("WEBGL_FLUSH_THRESHOLD");if(y>0){const x=wn();x-this.lastGlFlushTime>y&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=x)}if(!z().getBool("WEBGL_LAZILY_UNPACK")&&u.isPacked&&!1===o){const x=this.unpackTensor(l);return this.disposeIntermediateTensorInfo(l),x}return l}compileAndRun(e,s,r,a,o=!1){return this.runWebGLProgram(e,s,r=r||s[0].dtype,a,o)}getAndSaveBinary(e,s){return e in this.binaryCache||(this.binaryCache[e]=s()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(z().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(s=>{this.gpgpu.deleteProgram(this.binaryCache[s].webGLProgram),delete this.binaryCache[s]}),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=M(()=>{if(!z().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=z().getBool("DEBUG");z().set("DEBUG",!1);const s=this.abs(Pe(1e-8)).dataSync()[0];if(z().set("DEBUG",e),s>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const s=this.texData.get(e),{shape:r,dtype:a,values:o,texture:i,usage:l,isPacked:u}=s;if(null!=i)return;const c=null!=this.activeTimers;let h;c&&(h=wn());let d=s.texShape;if(null==d&&(d=function zL(n,t=!1){let e=z().getNumber("WEBGL_MAX_TEXTURE_SIZE"),s=z().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");s===1/0&&z().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(s=e/2),t&&(e*=2,s*=2,1===(n=n.map((i,l)=>l>=n.length-2?vt(n[l]):n[l])).length&&(n=[2,n[0]])),2!==n.length&&(n=Ft(n).newShape);let r=E(n),a=null;n.length<=1&&r<=e?a=[1,r]:2===n.length&&n[0]<=e&&n[1]<=e?a=n:3===n.length&&n[0]*n[1]<=e&&n[2]<=e?a=[n[0]*n[1],n[2]]:3===n.length&&n[0]<=e&&n[1]*n[2]<=e?a=[n[0],n[1]*n[2]]:4===n.length&&n[0]*n[1]*n[2]<=e&&n[3]<=e?a=[n[0]*n[1]*n[2],n[3]]:4===n.length&&n[0]<=e&&n[1]*n[2]*n[3]<=e&&(a=[n[0],n[1]*n[2]*n[3]]);const o=null!=a&&Math.max(...a)>s&&Math.min(...a)<=(t?2:1)&&Math.min(...a)>0;if(null==a||o)if(t){const i=wa(n);let l=2,u=2;n.length&&([l,u]=va(n)),r=i*(l/2)*(u/2),a=_t(r).map(c=>2*c)}else a=_t(r);return a}(r,u),s.texShape=d),null!=o){const p=Ku(r);let f,g=d[1],m=d[0];const y=o instanceof Uint8Array||o instanceof Uint8ClampedArray;(u||!y)&&([g,m]=ba(d[0],d[1])),f=u?new zV(p,y):new z0(p,y);const x=y?[m,g]:d,b=this.makeTensorInfo(x,a),w=this.texData.get(b.dataId);w.usage=y?$n.PIXELS:$n.UPLOAD,w.texShape=x,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId),g,m,o);const N=this.runWebGLProgram(f,[b],a,[[m,g]],!0),k=this.texData.get(N.dataId);s.texShape=k.texShape,s.isPacked=k.isPacked,s.usage=k.usage,z().get("ENGINE_COMPILE_ONLY")?this.disposeData(N.dataId):(s.texture=k.texture,s.values=null,this.texData.delete(N.dataId)),this.disposeIntermediateTensorInfo(b),c&&(this.uploadWaitMs+=wn()-h)}else{const p=this.acquireTexture(d,l,a,u);s.texture=p}}convertAndCacheOnCPU(e,s){const r=this.texData.get(e),{dtype:a}=r;return null!=s&&(r.values=function b3(n,t){if("float32"===t||"complex64"===t)return n;if("int32"===t||"bool"===t){const e="int32"===t?new Int32Array(n.length):new Uint8Array(n.length);for(let s=0;s<e.length;++s)e[s]=Math.round(n[s]);return e}throw new Error(`Unknown dtype ${t}`)}(s,a)),r.values}acquireTexture(e,s,r,a){if(this.numBytesInGPU+=this.computeBytes(e,r),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const o=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${o} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,s,a)}computeBytes(e,s){return e[0]*e[1]*ki(s)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}checkCompileCompletionAsync(){var e=this;return A(function*(){const s=[];if(e.gpgpu.parallelCompilationExtension){for(const[,r]of Object.entries(e.binaryCache))s.push(e.checkCompletionAsync_(r));return Promise.all(s)}for(const[,r]of Object.entries(e.binaryCache)){const a=new Promise(o=>{try{e.checkCompletion_(r),o(!0)}catch(i){throw i}});s.push(a)}return Promise.all(s)})()}checkCompletionAsync_(e){var s=this;return A(function*(){return s.gpgpu.gl.getProgramParameter(e.webGLProgram,s.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?s.checkCompletion_(e):(yield Sg(),s.checkCompletionAsync_(e))})()}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS))throw console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)?($0(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(const[,e]of Object.entries(this.binaryCache)){const{uniformLocations:s,customUniformLocations:r,infLoc:a,nanLoc:o,inShapesLocations:i,inTexShapesLocations:l,outShapeLocation:u,outShapeStridesLocation:c,outTexShapeLocation:h}=V0(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=s,e.customUniformLocations=r,e.infLoc=a,e.nanLoc=o,e.inShapesLocations=i,e.inTexShapesLocations=l,e.outShapeLocation=u,e.outShapeStridesLocation=c,e.outTexShapeLocation=h}}createTensorFromGPUData(e,s,r){e.channels=e.channels||"RGBA";const{texture:a,height:o,width:i,channels:l}=e,u=ps().backend;if(!u.gpgpu.gl.isTexture(a))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const c=u.writeTexture(a,s,r,o,i,l);return ps().makeTensorFromDataId(c,s,r,u)}}return n.nextDataId=0,n})();am()&&Im("webgl",()=>new x3,2);class ka{constructor(t,e,s){this.variableNames=["A","B"],this.outputShape=Ve(e,s),this.enableShapeUniforms=gn(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class bi{constructor(t,e,s,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Ve(e,s);const a=this.outputShape.length;this.enableShapeUniforms=gn(a);let o="";if(r)if(0===a||1===E(this.outputShape))o="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(o=`\n          ${mt(a)} coords = getOutputCoords();\n        `,1===a)o+=this.enableShapeUniforms?"\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const l=yn("coords",a);o+=this.enableShapeUniforms?`\n            bool nextRowOutOfBounds =\n              (${l[a-2]} + 1) >= outShape[${a} - 2];\n            bool nextColOutOfBounds =\n              (${l[a-1]} + 1) >= outShape[${a} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:`\n            bool nextRowOutOfBounds =\n              (${l[a-2]} + 1) >= ${this.outputShape[a-2]};\n            bool nextColOutOfBounds =\n              (${l[a-1]} + 1) >= ${this.outputShape[a-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${o}\n\n        setOutput(result);\n      }\n    `}}function En(n){const{inputs:t,backend:e}=n,{x:s}=t;return e.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const I3={kernelName:Qa,backendName:"webgl",kernelFunc:En};function cr(n){const{inputs:t,backend:e}=n,{real:s,imag:r}=t,a=e.makeTensorInfo(s.shape,"complex64"),o=e.texData.get(a.dataId),i=En({inputs:{x:s},backend:e}),l=En({inputs:{x:r},backend:e});return o.complexTensorInfos={real:i,imag:l},a}const S3={kernelName:Cc,backendName:"webgl",kernelFunc:cr},tw="return (a < 0.) ? b * a : a;",nw="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",N3={kernelName:qi,backendName:"webgl",kernelFunc:function C3(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{alpha:a}=s,o=e.makeTensorInfo([],"float32",zs(a,"float32")),i=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new bi(nw,r.shape,o.shape):new ka(tw,r.shape,o.shape),l=e.runWebGLProgram(i,[r,o],"float32");return e.disposeIntermediateTensorInfo(o),l}},sw="return (a < 0.) ? b * a : a;",rw="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",T3={kernelName:dl,backendName:"webgl",kernelFunc:function k3(n){const{inputs:t,backend:e}=n,{x:s,alpha:r}=t,a=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new bi(rw,s.shape,r.shape):new ka(sw,s.shape,r.shape);return e.runWebGLProgram(a,[s,r],"float32")}};function Qe({opSnippet:n,packedOpSnippet:t,cpuKernelImpl:e,dtype:s}){return({inputs:r,backend:a})=>{const{x:o}=r,i=a,l=s||o.dtype;if(i.shouldExecuteOnCPU([o])&&null!=e){const h=i.texData.get(o.dataId),d=e(h.values,l);return i.makeTensorInfo(o.shape,l,d)}let c;return c=z().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new ur(o.shape,t):new Ns(o.shape,n),i.runWebGLProgram(c,[o],l)}}function rn({opSnippet:n,packedOpSnippet:t,checkOutOfBounds:e=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:a}){return({inputs:o,backend:i})=>{const{a:l,b:u}=o,c=i;if(s&&"complex64"===l.dtype){const f=c.texData.get(l.dataId),g=c.texData.get(u.dataId),[m,y]=[[f.complexTensorInfos.real,g.complexTensorInfos.real],[f.complexTensorInfos.imag,g.complexTensorInfos.imag]].map(b=>{const[w,I]=b,S={dataId:w.dataId,dtype:w.dtype,shape:l.shape},N={dataId:I.dataId,dtype:I.dtype,shape:u.shape},k=new ka(n,l.shape,u.shape);return c.runWebGLProgram(k,[S,N],Cn(w.dtype,I.dtype))}),x=cr({inputs:{real:m,imag:y},backend:c});return c.disposeIntermediateTensorInfo(m),c.disposeIntermediateTensorInfo(y),x}const h=a||Cn(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=r){const f=c.texData.get(l.dataId).values,g=c.texData.get(u.dataId).values,m="string"===l.dtype?$r(f):f,y="string"===l.dtype?$r(g):g,[x,b]=r(l.shape,u.shape,m,y,h),w=c.makeTensorInfo(b,h);return c.texData.get(w.dataId).values=x,w}let p;return p=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new bi(t,l.shape,u.shape,e):new ka(n,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function wi(n,t=!1){if("linear"===n)return"return x;";if("relu"===n)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===n)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===n)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===n)return t?rw:sw;if("leakyrelu"===n)return t?nw:tw;if("sigmoid"===n)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${n} has not been implemented for the WebGL backend.`)}class aw{constructor(t,e,s,r=!1,a=!1,o=!1,i=null,l=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=s,this.enableShapeUniforms=gn(this.outputShape.length);const h=Math.ceil((r?t[1]:t[2])/2),d=r?"i * 2, rc.y":"rc.y, i * 2",p=a?"rc.z, i * 2":"i * 2, rc.z",f=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],g=a?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",y="";i&&(m=l?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,y="result = activation(result);");const x=o?"result += getBiasAtOutCoords();":"";o&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let b="rc.x",w="rc.x";t[0]<e[0]?b=`imod(rc.x, ${t[0]})`:e[0]<t[0]&&(w=`imod(rc.x, ${e[0]})`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${h}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${b};\n        int batchB = ${w};\n        for (int i = 0; i < ${h}; i++) {\n          vec4 a = getMatrixA(batchA, ${d});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${f[0]} * ${g[0]});\n          result += (${f[1]} * ${g[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${x}\n\n        ${y}\n\n        setOutput(result);\n      }\n    `}}class iw{constructor(t,e,s){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Ve(e,s),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const lw="return a * b;";function bf(n){const{inputs:t,backend:e}=n,{a:s,b:r}=t,a=Cn(s.dtype,r.dtype);if("complex64"===s.dtype){const i=e.texData.get(s.dataId),l=e.texData.get(r.dataId),u=new iw("return areal * breal - aimag * bimag;",s.shape,r.shape),c=new iw("return areal * bimag + aimag * breal;",s.shape,r.shape),h=[{dataId:i.complexTensorInfos.real.dataId,dtype:i.complexTensorInfos.real.dtype,shape:s.shape},{dataId:i.complexTensorInfos.imag.dataId,dtype:i.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:l.complexTensorInfos.real.dataId,dtype:l.complexTensorInfos.real.dtype,shape:r.shape},{dataId:l.complexTensorInfos.imag.dataId,dtype:l.complexTensorInfos.imag.dtype,shape:r.shape}],d=e.runWebGLProgram(u,h,"float32"),p=e.runWebGLProgram(c,h,"float32"),f=cr({inputs:{real:d,imag:p},backend:e});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),f}if(e.shouldExecuteOnCPU([s,r])){const i=e.texData.get(s.dataId),l=e.texData.get(r.dataId),[u,c]=CM(s.shape,r.shape,i.values,l.values,a),h=e.makeTensorInfo(c,a);return e.texData.get(h.dataId).values=u,h}let o;return o=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new bi(lw,s.shape,r.shape):new ka(lw,s.shape,r.shape),e.runWebGLProgram(o,[s,r],a)}const _3={kernelName:uo,backendName:"webgl",kernelFunc:bf};function he(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{shape:a}=s,o=e,i=E(r.shape),l=bn(a,i),u=E(l);v(i===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`);const c=o.texData.get(r.dataId);return!c.isPacked||Yu(r.shape,l)||null!==c.texture&&Yu(c.shape,l)?(o.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function $3(n,t,e){const s=[wa(n.shape),...va(n.shape)],r={dtype:n.dtype,shape:s,dataId:n.dataId},a=[wa(t),...va(t)],o=new Y0(a,s),u=e.runWebGLProgram(o,[r],n.dtype,[s],!0);return{dataId:u.dataId,shape:t,dtype:u.dtype}}(r,l,o)}const E3={kernelName:fl,backendName:"webgl",kernelFunc:he};class uw{constructor(t,e){this.variableNames=["x"];const{windowSize:s,batchSize:r,inSize:a,outSize:o}=t;this.outputShape=[r,o];const i=4*Math.floor(s/4),l=s%4;let u="sumValue += dot(values, ones);";if(null!=e){const h=1/e;u=`sumValue += dot(values * ${Be(h)?h.toPrecision(2):h}, ones);`}let c="";a%s>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===l}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class D3{constructor(t,e){this.variableNames=["x"];const{windowSize:s,batchSize:r,inSize:a,outSize:o}=t;this.outputShape=[r,o];let i="0.0",l="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",l="min"):"max"===e&&(i="-1.0 / 1e-20",l="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");const c=4*Math.floor(s/4),h=s%4;let d=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${l}(values, minMaxValue);\n        if (${"min"===e} || ${"max"===e}) {\n          minMaxValue = ${l}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===e?(i="1.0",d="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===e&&(i="0.0",d="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let f="";a%s>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${f}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${2===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${3===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${d}\n        }\n        setOutput(${u});\n      }\n    `}}function Br(n,t,e,s){const r=function A3(n){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const e=t.length?t[t.length-1].outSize:n[1],s=ou(e);t.push({inSize:e,windowSize:s,outSize:Math.ceil(e/s)})}return t}(n.shape);let a=n;for(let o=0;o<r.length;o++){const{inSize:i,windowSize:l,outSize:u}=r[o];let c,h;c="mean"===e?0===o?new uw({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u},i):new uw({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u}):new D3({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u},e),h=a,a=s.runWebGLProgram(c,[a],t),h.dataId!==n.dataId&&s.disposeIntermediateTensorInfo(h)}return a}class R3{constructor(t,e){this.variableNames=["A"];const s=new Array(t.length);for(let o=0;o<s.length;o++)s[o]=t[e[o]];this.outputShape=s,this.rank=s.length;const r=mt(this.rank),a=function F3(n){const t=n.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let r=0;r<n.length;r++)s[n[r]]=e[r];return s.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${a}));\n    }\n    `}}class O3{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const s=new Array(t.length);for(let c=0;c<s.length;c++)s[c]=t[e[c]];if(this.outputShape=s,this.rank=s.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=mt(this.rank),a=X0("rc",this.rank),o=new Array(this.rank);for(let c=0;c<e.length;c++)o[e[c]]=a[c];const i=`vec2(${o.slice(-2).join()})`,l=`++${a[this.rank-1]} < ${s[this.rank-1]}`,u=`getChannel(getA(${o.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${l}) {\n        result[1] = ${u};\n      }\n      --${a[this.rank-1]};\n      if(++${a[this.rank-2]} < ${s[this.rank-2]}) {\n        result[2] = ${u};\n        if(${l}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function nc(n,t,e){const s=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new O3(n.shape,t):new R3(n.shape,t);return e.runWebGLProgram(s,[n],n.dtype)}function sc(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s;return function P3(n,t,e,s){const a=n.shape.length,o=ve(t,n.shape);let i=o;const l=Ct(i,a),u=null!=l;let c=n;u&&(c=nc(n,l,s),i=Vt(i.length,a)),sn("sum",i,a);const[h,d]=Zt(c.shape,i);let p=h;e&&(p=Lt(h,o));const f=E(d),y=he({inputs:{x:c},attrs:{shape:[E(n.shape)/f,f]},backend:s}),b=Br(y,xh(n.dtype),"sum",s),w=he({inputs:{x:b},attrs:{shape:p},backend:s});return s.disposeIntermediateTensorInfo(y),s.disposeIntermediateTensorInfo(b),u&&s.disposeIntermediateTensorInfo(c),w}(r,a,o,e)}const L3={kernelName:wl,backendName:"webgl",kernelFunc:sc};function xn(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{perm:a}=s,o=e,l=new Array(r.shape.length);for(let c=0;c<l.length;c++)l[c]=r.shape[a[c]];let u;if(o.shouldExecuteOnCPU([r])){const h=o.texData.get(r.dataId).values,d=yf(h,r.shape,r.dtype,a,l);u=o.makeTensorInfo(l,r.dtype),o.texData.get(u.dataId).values=d}else u=nc(r,a,o);return u}const V3={kernelName:jr,backendName:"webgl",kernelFunc:xn};function rc({a:n,b:t,transposeA:e,transposeB:s,backend:r,bias:a=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:l=null}){const u=n.shape.length,c=t.shape.length,h=e?n.shape[u-2]:n.shape[u-1],d=s?t.shape[c-1]:t.shape[c-2],p=e?n.shape[u-1]:n.shape[u-2],f=s?t.shape[c-2]:t.shape[c-1],g=n.shape.slice(0,-2),m=t.shape.slice(0,-2),y=E(g),x=E(m),w=Ve(n.shape.slice(0,-2),t.shape.slice(0,-2)).concat([p,f]);v(h===d,()=>`Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${n.shape} and ${t.shape} and transposeA=${e} and transposeB=${s} must match.`);const I=e?[y,h,p]:[y,p,h],S=s?[x,f,d]:[x,d,f],N=he({inputs:{x:n},backend:r,attrs:{shape:I}}),k=he({inputs:{x:t},backend:r,attrs:{shape:S}}),_=[N,k],$=Math.max(y,x),L=e?N.shape[1]:N.shape[2],B=null!=a,G=null!=o,H="leakyrelu"===l,j=null!=l?wi(l,!0):null;let Q;if((1===p||1===f)&&L>1e3&&!1===(B||G||H||null!=j)){let ee=N,se=k;e&&(ee=xn({inputs:{x:N},backend:r,attrs:{perm:[0,2,1]}}),_.push(ee)),s&&(se=xn({inputs:{x:k},backend:r,attrs:{perm:[0,2,1]}}),_.push(se));const ie=1===f;let oe=ee;1!==f&&(oe=he({inputs:{x:ee},backend:r,attrs:{shape:[$,L,1]}}),_.push(oe));const pe=1===f?2:1;let le=se;ie&&(le=he({inputs:{x:se},backend:r,attrs:{shape:[$,1,L]}}),_.push(le));const fe=bf({inputs:{a:oe,b:le},backend:r});Q=sc({inputs:{x:fe},backend:r,attrs:{axis:pe,keepDims:!0}}),_.push(fe)}else{const ee=Cn(n.dtype,t.dtype),se=new aw(I,S,[$,p,f],e,s,B,j,G,H),ae=[N,k];if(null!=a&&ae.push(a),G&&ae.push(o),H){const ie=r.makeTensorInfo([],"float32",zs(i,"float32"));ae.push(ie),_.push(ie)}Q=r.runWebGLProgram(se,ae,ee)}const q=he({inputs:{x:Q},backend:r,attrs:{shape:w}});_.push(Q);for(const ee of _)r.disposeIntermediateTensorInfo(ee);return q}const z3={kernelName:Tl,backendName:"webgl",kernelFunc:function M3(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:a,bias:o,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return rc({a:r,b:a,transposeA:l,transposeB:u,backend:e,bias:o,preluActivationWeights:i,leakyreluAlpha:h,activation:c})}},hw="return abs(x);",W3={kernelName:Ti,backendName:"webgl",kernelFunc:function B3(n){const{inputs:t,backend:e}=n,{x:s}=t;if(e.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const a=e.texData.get(s.dataId),o=q0(a.values);return e.makeTensorInfo(s.shape,s.dtype,o)}let r;return r=z().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new ur(s.shape,hw):new Ns(s.shape,hw),e.runWebGLProgram(r,[s],s.dtype)}},U3=Qe({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),H3={kernelName:Ra,backendName:"webgl",kernelFunc:U3},q3=Qe({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),K3={kernelName:Fa,backendName:"webgl",kernelFunc:q3},dw="return a + b;",X3=rn({opSnippet:dw,packedOpSnippet:dw,supportsComplex:!0,cpuKernelImpl:rM}),Y3={kernelName:Hr,backendName:"webgl",kernelFunc:X3};class Z3{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((a,o)=>`T${o}`);const s=[];this.variableNames.forEach(a=>{s.push(`float v${a} = get${a}AtOutCoords();`)});const r=this.variableNames.map(a=>`v${a}`).join(" + ");this.userCode=`\n      void main() {\n        ${s.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class J3{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((a,o)=>`T${o}`);const s=[];this.variableNames.forEach(a=>{s.push(`vec4 v${a} = get${a}AtOutCoords();`)});const r=this.variableNames.map(a=>`v${a}`).join(" + ");this.userCode=`\n      void main() {\n        ${s.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const Q3={kernelName:xc,backendName:"webgl",kernelFunc:function ac(n){const{inputs:t,backend:e}=n,s=t;if(1===s.length)return En({inputs:{x:s[0]},backend:e});if(s.length>z().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const l=Math.floor(s.length/2),u=ac({inputs:s.slice(0,l),backend:e}),c=ac({inputs:s.slice(l),backend:e});return ac({inputs:[u,c],backend:e})}const r=s.map(l=>l.dtype).reduce((l,u)=>Cn(l,u)),a=s.map(l=>l.shape),i=z().getBool("WEBGL_PACK")?new J3(s[0].shape,a):new Z3(s[0].shape,a);return e.runWebGLProgram(i,s,r)}},tz={kernelName:"All",backendName:"webgl",kernelFunc:function ez(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s,i=r.shape.length,l=ve(a,r.shape);let u=l;const c=Ct(u,i);let h=r;null!=c&&(h=xn({inputs:{x:r},backend:e,attrs:{perm:c}}),u=Vt(u.length,i)),sn("all",u,i);const[d,p]=Zt(h.shape,u),g=he({inputs:{x:h},backend:e,attrs:{shape:[-1,E(p)]}}),m=Br(g,g.dtype,"all",e);let y;return y=he(o?{inputs:{x:m},backend:e,attrs:{shape:Lt(d,l)}}:{inputs:{x:m},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),null!=c&&e.disposeIntermediateTensorInfo(h),y}},sz={kernelName:"Any",backendName:"webgl",kernelFunc:function nz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s,i=r.shape.length,l=ve(a,r.shape);let u=l;const c=Ct(u,i);let h=r;null!=c&&(h=xn({inputs:{x:r},backend:e,attrs:{perm:c}}),u=Vt(u.length,i)),sn("any",u,i);const[d,p]=Zt(h.shape,u),g=he({inputs:{x:h},backend:e,attrs:{shape:[-1,E(p)]}}),m=Br(g,g.dtype,"any",e);let y;return y=he(o?{inputs:{x:m},backend:e,attrs:{shape:Lt(d,l)}}:{inputs:{x:m},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),null!=c&&e.disposeIntermediateTensorInfo(h),y}};class rz{constructor(t,e,s){this.variableNames=["A"];const{windowSize:r,batchSize:a,outSize:o}=t;s||this.variableNames.push("bestIndicesA"),this.outputShape=[a,o],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${s?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${"max"===e?">":"<"} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class az{constructor(t,e,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,v(t.length>2,()=>`Packed arg${s.charAt(0).toUpperCase()+s.slice(1)} supports only inputs with rank above 2.`);const o=Math.ceil(t[t.length-1]/e);this.outputShape=t.slice(0,-1),o>1&&this.outputShape.push(o),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,l=i.length,u=mt(l),c=yn("coords",l);let h,d;if(1===o){d=l+1;const k=mt(d);h=`\n        ${k} sourceLocR = ${k}(${c.join()}, 0);\n        ++${c[l-1]};\n        ${k} sourceLocG = ${k}(${c.join()}, 0);\n        ++${c[l-2]};\n        ${k} sourceLocA = ${k}(${c.join()}, 0);\n        --${c[l-1]};\n        ${k} sourceLocB = ${k}(${c.join()}, 0);\n        --${c[l-2]};`}else d=l,h=`\n        ${u} sourceLocR = coords;\n        ++${c[l-1]};\n        ${u} sourceLocG = coords;\n        ++${c[l-2]};\n        ${u} sourceLocA = coords;\n        --${c[l-1]};\n        ${u} sourceLocB = coords;\n        --${c[l-2]};`;const p=["x","y","z","w","u","v"].slice(0,d),f="."+p[d-1],g=p.map(k=>"int "+k),m=yn("sourceLocR",d-1).concat("inIdx.r"),y=yn("sourceLocG",d-1).concat("inIdx.g"),x=yn("sourceLocB",d-1).concat("inIdx.b"),b=yn("sourceLocA",d-1).concat("inIdx.a"),w="max"===s?"greaterThan":"lessThan",I=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${x.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,S=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${x.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,N=r?"":`\n      float getBestIndicesAChannel(${g.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${g.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${N}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${c[l-1]} < ${i[l-1]-1};\n        bool hasNextRow = ${c[l-2]} < ${i[l-2]-1};\n        ${h}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${S};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${I}\n          vec4 candidate = ${S};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${w}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function pw(n,t,e,s=null){let r=t.shape[0],a=t.shape[1];null!=s&&(r=s.shape[0],a=s.shape[1]);const o=ou(a),i={windowSize:o,inSize:a,batchSize:r,outSize:Math.ceil(a/o)},l=new rz(i,e,null==s),u=[t];null!=s&&u.push(s);const c=n.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=pw(n,t,e,c);return n.disposeIntermediateTensorInfo(c),h}function fw(n,t,e,s=null){const r=null!=s?s.shape:t.shape,o=ou(r[r.length-1]),i=new az(r,o,e,null==s),u=n.runWebGLProgram(i,null==s?[t]:[t,s],"int32");if(u.shape.length===t.shape.length){const c=fw(n,t,e,u);return n.disposeIntermediateTensorInfo(u),c}return u}function mw(n,t,e,s){const r=[e];if(sn("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!z().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const a=[],o=n.texData.get(t.dataId);let l=t;null!==o&&o.isPacked&&(l=n.unpackTensor(t),a.push(l));const[u,c]=Zt(l.shape,r),h=E(c),d=he({inputs:{x:l},backend:n,attrs:{shape:[-1,h]}});a.push(d);const p=pw(n,d,s);a.push(p);const f=he({inputs:{x:p},backend:n,attrs:{shape:u}});return a.forEach(g=>n.disposeIntermediateTensorInfo(g)),f}return fw(n,t,s)}const iz={kernelName:_i,backendName:"webgl",kernelFunc:function oz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a}=s;let o=ve(a,r.shape);const i=Ct(o,r.shape.length);let l=r;const u=[];null!=i&&(l=xn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),o=Vt(o.length,l.shape.length)),sn("argMax",[o[0]],l.shape.length);const c=mw(e,l,o[0],"max");return u.forEach(h=>e.disposeIntermediateTensorInfo(h)),c}},uz={kernelName:$i,backendName:"webgl",kernelFunc:function lz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a}=s;let o=ve(a,r.shape);const i=Ct(o,r.shape.length);let l=r;const u=[];null!=i&&(l=xn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),o=Vt(o.length,l.shape.length)),sn("argMin",[o[0]],l.shape.length);const c=mw(e,l,o[0],"min");return u.forEach(h=>e.disposeIntermediateTensorInfo(h)),c}},hz=Qe({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),dz={kernelName:Oa,backendName:"webgl",kernelFunc:hz},fz=Qe({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),mz={kernelName:Pa,backendName:"webgl",kernelFunc:fz},yz=Qe({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),xz={kernelName:La,backendName:"webgl",kernelFunc:yz},vz=rn({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"}),Iz={kernelName:Ma,backendName:"webgl",kernelFunc:vz},Cz=Qe({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),Nz={kernelName:Va,backendName:"webgl",kernelFunc:Cz};class vi{constructor(t,e,s,r=!1,a=!1){if(this.variableNames=["x"],"avg"===e&&s)throw new Error("Cannot compute positions for average pool.");const o=t.filterWidth,i=t.strideHeight,l=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,h=t.effectiveFilterHeight,d=t.effectiveFilterWidth,p=t.padInfo.top,f=t.padInfo.left;this.outputShape=t.outShape;const g="avg"===e;let x="0.0";if(g||(x="-1.0 / 1e-20"),s)return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${l});\n        const ivec2 pads = ivec2(${p}, ${f});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d};\n                wC += ${c}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?a?`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`:`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`:`wR * ${d} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let w=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(w="avgValue / max(count, 1.0)");const I=4*Math.floor(o/4),S=o%4,N=`\n      if (${g}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${l});\n      const ivec2 pads = ivec2(${p}, ${f});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${h};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${I}; wC += 4) {\n            int xC = xCCorner + wC * ${c};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              getValue(batch, xR, xC + 3 * ${c}, d)\n            );\n\n            ${N}\n          }\n\n          int xC = xCCorner + ${I};\n          if (${1===S}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${N}\n          } else if (${2===S}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${N}\n          } else if (${3===S}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              initializationValue\n            );\n\n            ${N}\n          }\n        }\n        setOutput(${w});\n      }\n    `}}class wf{constructor(t,e,s,r=!1,a=!1){if(this.variableNames=["x"],"avg"===e&&s)throw new Error("Cannot compute positions for average pool.");const o=t.filterWidth,i=t.strideDepth,l=t.strideHeight,u=t.strideWidth,c=t.dilationDepth,h=t.dilationHeight,d=t.dilationWidth,p=t.effectiveFilterDepth,f=t.effectiveFilterHeight,g=t.effectiveFilterWidth,m=t.padInfo.front,y=t.padInfo.top,x=t.padInfo.left;this.outputShape=t.outShape;const b="avg"===e;let w="0.0";if(b||(w="-1.0 / 1e-20"),s)return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${l}, ${u});\n        const ivec3 pads = ivec3(${m}, ${y}, ${x});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${c}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${f};\n                wR += ${h}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${g};\n                  wC += ${d}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?a?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${f} * ${g} +\n                      wR * ${g} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let S=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(S="avgValue / max(count, 1.0)");const N=4*Math.floor(o/4),k=o%4,_=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${l}, ${u});\n      const ivec3 pads = ivec3(${m}, ${y}, ${x});\n      const float initializationValue = ${w};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${w});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${c}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${f};\n            wR += ${h}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${N}; wC += 4) {\n              int xC = xCCorner + wC * ${d};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${d}, ch)\n              );\n\n              ${_}\n            }\n\n            int xC = xCCorner + ${N};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${_}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${_}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                initializationValue\n              );\n\n              ${_}\n            }\n          }\n        }\n        setOutput(${S});\n      }\n    `}}const Tz={kernelName:Ei,backendName:"webgl",kernelFunc:function kz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;gi(r,"avgPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=s;v(nn(o,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const c=Wn(r.shape,a,o,1,i,l);if(1===c.filterWidth&&1===c.filterHeight&&ye(c.inShape,c.outShape))return En({inputs:{x:r},backend:e});const h=new vi(c,"avg",!1);return e.runWebGLProgram(h,[r],"float32")}},$z={kernelName:Di,backendName:"webgl",kernelFunc:function _z(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=s,h=_s(r.shape,a,o,[1,1,1],i,l,u),d=new wf(h,"avg",!1);return e.runWebGLProgram(d,[r],"float32")}};class Ez{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const l=t.effectiveFilterHeight,u=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${l-1-t.padInfo.top}, ${u-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${l};\n            wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${t.dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Dz{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const h=t.effectiveFilterDepth,d=t.effectiveFilterHeight,p=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${h-1-t.padInfo.front}, ${d-1-t.padInfo.top}, ${p-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterDepth*t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${h};\n            wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${d};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Rz={kernelName:Ic,backendName:"webgl",kernelFunc:function Az(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:a}=t,o=a,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,d=_s(o.shape,i,l,[1,1,1],u,c),p=new Dz(d);return e.runWebGLProgram(p,[r],o.dtype)}},Oz={kernelName:vc,backendName:"webgl",kernelFunc:function Fz(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:a}=t,o=a;gi([r,a],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=Wn(o.shape,i,l,1,u),h=new Ez(c);return e.runWebGLProgram(h,[r],o.dtype)}},Lz={kernelName:Ai,backendName:"webgl",kernelFunc:function Pz(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:a}=t,{transposeA:o,transposeB:i}=s;return rc({a:r,b:a,transposeA:o,transposeB:i,backend:e})}};class Vz{constructor(t,e,s,r,a,o){this.outputShape=[],this.variableNames=["x","mean","variance"],Ve(t,e),Ve(t,s);let i="0.0";null!=r&&(Ve(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let l="1.0";null!=a&&(Ve(t,a),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${l};\n        float inv = scale * inversesqrt(variance + float(${o}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class Mz{constructor(t,e,s,r,a,o){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Ve(t,e),Ve(t,s);let i="vec4(0.0)";null!=r&&(Ve(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let l="vec4(1.0)";null!=a&&(Ve(t,a),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${l};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${o}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const zz={kernelName:Ui,backendName:"webgl",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,mean:r,variance:a,offset:o,scale:i}=n;v(r.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),v(null==o||r.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),v(null==i||r.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=e;null==l&&(l=.001);const u=[s,r,a];let c=null;null!=o&&(c=o.shape,u.push(o));let h=null;null!=i&&(h=i.shape,u.push(i));const d=z().getBool("WEBGL_PACK_NORMALIZATION")?new Mz(s.shape,r.shape,a.shape,c,h,l):new Vz(s.shape,r.shape,a.shape,c,h,l);return t.runWebGLProgram(d,u,u[0].dtype)}};class Bz{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=mt(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const s=function Wz(n){if(1===n)return"sourceLoc";if(n<=6)return vf.slice(0,n).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${n} is not yet supported`)}(this.rank);let r;r=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map((o,i)=>`sourceLoc.${vf[i]} = start[${i}] + coords.${vf[i]};`).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${s}));\n      }\n    `}}const vf=["x","y","z","w","u","v"];class Gz{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const e=mt(this.rank),s=yn("coords",this.rank),r=yn("sourceLoc",this.rank),a=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,o=`getChannel(getSource(${r.join()}), ${a})`,i=`\n      result.x = ${o};\n      if (++${s[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${o};\n        --${r[this.rank-1]};\n      }\n    `,l=1===this.rank?"":`\n      --${s[this.rank-1]};\n      if (++${s[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${o};\n        if (++${s[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${o};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map((c,h)=>`start[${h}]`).join()});`:t.map((c,h)=>`${r[h]} = ${s[h]} + start[${h}];`).join("\n");this.userCode=`\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${l}\n        setOutput(result);\n      }\n    `}}function _a(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:a,size:o}=s,[i,l]=Gl(r,a,o);if(Uh(r,i,l),0===E(l))return e.makeTensorInfo(l,r.dtype,[]);if(e.shouldExecuteOnCPU([r])||"string"===r.dtype){const h=e.texData.get(r.dataId),d=OM(h.values,i,l,r.shape,r.dtype);return e.makeTensorInfo(l,r.dtype,d)}const{isPacked:u}=e.texData.get(r.dataId),c=jh(r.shape,i,l);if(u||!c){const h=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Gz(l):new Bz(l);return e.runWebGLProgram(h,[r],r.dtype,[i])}return e.uploadToGPU(r.dataId),function Uz(n,t,e,s){const r=s.texData.get(n.dataId),a=s.makeTensorInfo(e,n.dtype),o=s.texData.get(a.dataId);Object.assign(o,r),o.refCount=1,o.shape=e,o.dtype=n.dtype;let i=qh(t,Se(n.shape));r.slice&&(i+=r.slice.flatOffset),o.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||n.dataId};const l=s.dataRefCount.get(o.slice.origDataId)||1;return s.dataRefCount.set(o.slice.origDataId,l+1),a}(r,i,l,e)}const Hz={kernelName:bl,backendName:"webgl",kernelFunc:_a},jz={kernelName:Ri,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:a,crops:o}=s;v(r.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const i=a.reduce((x,b)=>x*b),l=Ko(r.shape,a,i),u=Xo(l.length,a.length),c=Yo(r.shape,a,i),h=$d(o,a.length),d=Ed(c,o,a.length),p=[],f=he({inputs:{x:r},backend:e,attrs:{shape:l}}),g=xn({inputs:{x:f},backend:e,attrs:{perm:u}}),m=he({inputs:{x:g},backend:e,attrs:{shape:c}}),y=_a({inputs:{x:m},backend:e,attrs:{begin:h,size:d}});return p.push(f),p.push(g),p.push(m),p.forEach(x=>e.disposeIntermediateTensorInfo(x)),y}},Kz={kernelName:Sc,backendName:"webgl",kernelFunc:function qz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:a}=t,{size:o}=s,i=e.readSync(r.dataId),l=e.readSync(a.dataId),u=j0(i,l,a.dtype,a.shape,o);return e.makeTensorInfo([o],a.dtype,u)}},Yz={kernelName:Rf,backendName:"webgl",kernelFunc:function Xz(n){const{inputs:t,backend:e}=n,{s0:s,s1:r}=t,a=e.readSync(s.dataId),o=e.readSync(r.dataId),i=Ve(Array.from(a),Array.from(o));return e.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},gw=rn({opSnippet:"return float(a != b);",cpuKernelImpl:kM,dtype:"bool"}),Zz={kernelName:il,backendName:"webgl",kernelFunc:gw};function Ii(n){const{inputs:t,backend:e}=n,{input:s}=t;return En({inputs:{x:e.texData.get(s.dataId).complexTensorInfos.real},backend:e})}const Jz={kernelName:Xc,backendName:"webgl",kernelFunc:Ii},tB={kernelName:za,backendName:"webgl",kernelFunc:function If(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return En({inputs:{x:r},backend:e});const o=Jt(r.shape),i=If({inputs:{x:r},backend:e,attrs:{dtype:"float32"}}),l=cr({inputs:{real:i,imag:o},backend:e});return o.dispose(),e.disposeIntermediateTensorInfo(i),l}if("complex64"===r.dtype){const o=Ii({inputs:{input:r},backend:e}),i=If({inputs:{x:o},backend:e,attrs:{dtype:a}});return e.disposeIntermediateTensorInfo(o),i}if(!Tf(r.dtype,a)){const o=En({inputs:{x:r},backend:e});return{dataId:o.dataId,shape:o.shape,dtype:a}}if(e.shouldExecuteOnCPU([r])){const o=e.texData.get(r.dataId).values,[i,l,u]=oM(o,r.shape,r.dtype,a);return e.makeTensorInfo(i,l,u)}if("int32"===a)return function eB(n,t){const e=new Ns(n.shape,"return float(int(x));"),s=t.runWebGLProgram(e,[n],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(r,e);if("bool"===a){const o=e.makeTensorInfo([],"bool",Dt("bool",1)),l=gw({inputs:{a:r,b:o},backend:e});return e.disposeIntermediateTensorInfo(o),l}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${a}`)}},yw="return ceil(x);",nB=Qe({opSnippet:yw,packedOpSnippet:yw,cpuKernelImpl:iM}),sB={kernelName:Ba,backendName:"webgl",kernelFunc:nB};class rB{constructor(t){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class aB{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const iB={kernelName:Wa,backendName:"webgl",kernelFunc:function oB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{clipValueMin:a,clipValueMax:o}=s;let i;return i=z().getBool("WEBGL_PACK_CLIP")?new aB(r.shape):new rB(r.shape),e.runWebGLProgram(i,[r],r.dtype,[[a],[o]])}};class lB{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function xw(n,t){return{dataId:t.dataId,dtype:t.dtype,shape:n.shape}}const cB={kernelName:Fi,backendName:"webgl",kernelFunc:function uB(n){const{inputs:t,backend:e}=n,{x:s}=t,r=e.texData.get(s.dataId),a=new lB(s.shape),o=[xw(s,r.complexTensorInfos.real),xw(s,r.complexTensorInfos.imag)];return e.runWebGLProgram(a,o,o[0].dtype)}};class hB{constructor(t){this.outputShape=[],this.outputShape=gs(t,1),this.variableNames=t.map((o,i)=>`T${i}`);const e=new Array(t.length-1);e[0]=t[0][1];for(let o=1;o<e.length;o++)e[o]=e[o-1]+t[o][1];const s=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let o=1;o<e.length;o++)s.push(`else if (yC < ${e[o]}) setOutput(getT${o}(yR, yC-${e[o-1]}));`);s.push(`else setOutput(getT${e.length}(yR, yC-${e[e.length-1]}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${s.join("\n        ")}\n      }\n    `}}class dB{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=gs(t,e);const s=this.outputShape,r=s.length,a=mt(r),o=yn("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((g,m)=>`T${m}`);const l=new Array(t.length-1);l[0]=t[0][e];for(let g=1;g<l.length;g++)l[g]=l[g-1]+t[g][e];const u=i[e],c=i.slice(-2),h=i.join();let d=`if (${u} < ${l[0]}) {\n        return getChannel(\n            getT0(${h}), vec2(${c.join()}));\n        }`;for(let g=1;g<l.length;g++){const m=l[g-1];d+=`\n        if (${u} < ${l[g]}  && ${u} >= ${l[g-1]}) {\n          return getChannel(\n            getT${g}(${oc(i,u,m)}),\n            vec2(${oc(c,u,m)}));\n        }`}const f=l[l.length-1];d+=`\n        return getChannel(\n          getT${l.length}(${oc(i,u,f)}),\n          vec2(${oc(c,u,f)}));`,this.userCode=`\n      float getValue(${i.map(g=>"int "+g)}) {\n        ${d}\n      }\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${o}), 0., 0., 0.);\n\n        ${o[r-1]} = ${o[r-1]} + 1;\n        if (${o[r-1]} < ${s[r-1]}) {\n          result.g = getValue(${o});\n        }\n\n        ${o[r-2]} = ${o[r-2]} + 1;\n        if (${o[r-2]} < ${s[r-2]}) {\n          result.a = getValue(${o});\n        }\n\n        ${o[r-1]} = ${o[r-1]} - 1;\n        if (${o[r-2]} < ${s[r-2]} &&\n            ${o[r-1]} < ${s[r-1]}) {\n          result.b = getValue(${o});\n        }\n        setOutput(result);\n      }\n    `}}function oc(n,t,e){const s=n.indexOf(t);return n.map((a,o)=>o===s?`${a} - ${e}`:a).join()}function ic(n){const{inputs:t,backend:e}=n,{input:s}=t;return En({inputs:{x:e.texData.get(s.dataId).complexTensorInfos.imag},backend:e})}const pB={kernelName:Bc,backendName:"webgl",kernelFunc:ic};function Si(n,t,e){const s=n[0].dtype;if("complex64"===s){const p=n.map(x=>Ii({inputs:{input:x},backend:e})),f=n.map(x=>ic({inputs:{input:x},backend:e})),g=Si(p,t,e),m=Si(f,t,e),y=cr({inputs:{real:g,imag:m},backend:e});return p.forEach(x=>e.disposeIntermediateTensorInfo(x)),f.forEach(x=>e.disposeIntermediateTensorInfo(x)),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),y}let r=e.shouldExecuteOnCPU(n);if("string"===s&&(r=!0),r){const p=n.map(w=>{const I=E(w.shape.slice(t));return he({inputs:{x:w},backend:e,attrs:{shape:[-1,I]}})}),f=p.map(w=>({vals:e.readSync(w.dataId),shape:w.shape})),g=gs(p.map(w=>w.shape),1),y=lM(f,g,s,1===p[0].shape[0]),x=gs(n.map(w=>w.shape),t),b=e.makeTensorInfo(x,s,y);return p.forEach(w=>e.disposeIntermediateTensorInfo(w)),b}const a=n.filter(p=>E(p.shape)>0),o=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&a[0].shape.length>1;if(1===a.length){const p=o?new Ns(n[0].shape,lr):new ur(n[0].shape,lr);return e.runWebGLProgram(p,n,s)}const i=z().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(a.length>i){const p=[];for(let g=0;g<a.length;g+=i){const m=a.slice(g,g+i);p.push(Si(m,t,e))}const f=Si(p,t,e);for(const g of p)e.disposeIntermediateTensorInfo(g);return f}if(o){const p=new dB(a.map(f=>f.shape),t);return e.runWebGLProgram(p,a,s)}const{tensors2D:l,outShape:u}=function fB(n,t,e){const s=gs(n.map(a=>a.shape),t);return{tensors2D:n.map(a=>he({inputs:{x:a},attrs:{shape:[-1,E(a.shape.slice(t))]},backend:e})),outShape:s}}(a,t,e),c=new hB(l.map(p=>p.shape)),h=e.runWebGLProgram(c,l,s);l.forEach(p=>e.disposeIntermediateTensorInfo(p));const d=he({inputs:{x:h},attrs:{shape:u},backend:e});return e.disposeIntermediateTensorInfo(h),d}function bw(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s,a=ve(r,t[0].shape)[0];kd(t.map(u=>u.shape),a);const i=gs(t.map(u=>u.shape),a);if(0===E(i))return e.makeTensorInfo(i,t[0].dtype,[]);const l=t.filter(u=>E(u.shape)>0);return 1===l.length?En({inputs:{x:l[0]},backend:e}):Si(l,a,e)}const mB={kernelName:Oi,backendName:"webgl",kernelFunc:bw};class ww{constructor(t,e=!1,s=null,r=!1,a=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const o=t.padInfo.top,i=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,d=t.filterHeight,p=t.filterWidth,f=4*Math.floor(t.inChannels/4),g=t.inChannels%4,m="channelsLast"===t.dataFormat,y=m?1:2,x=m?2:3,b=m?3:1;let w="",I="";s&&(w=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`\n          float activation(float x) {\n            ${s}\n          }\n        `,I="result = activation(result);");const S=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${w}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${y}], coords[${x}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${f}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===g}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${f}) *\n                    getW(wR, wC, ${f}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${f}, xR, xC) *\n                    getW(wR, wC, ${f}, d2);\n              }\n\n            } else if (${2===g}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===g}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2),\n                getW(wR, wC, ${f} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1),\n                  getX(batch, xR, xC, ${f} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC),\n                  getX(batch, ${f} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${S}\n        ${I}\n        setOutput(result);\n      }\n    `}}class gB{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,s=t.padInfo.top,r=t.padInfo.left,a=t.strideDepth,o=t.strideHeight,i=t.strideWidth,l=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,h=t.filterDepth,d=t.filterHeight,p=t.filterWidth,f=4*Math.floor(t.inChannels/4),g=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${a}, ${o}, ${i});\n      const ivec3 pads = ivec3(${e}, ${s}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${h}; wF++) {\n          int xF = xFCorner + wF * ${l};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${c};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${f}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===g}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${f}) *\n                  getW(wF, wR, wC, ${f}, d2);\n              } else if (${2===g}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===g}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1),\n                  getX(batch, xF, xR, xC, ${f} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2),\n                  getW(wF, wR, wC, ${f} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class vw{constructor(t,e=!1,s=null,r=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=gn(this.outputShape.length);const o=t.padInfo.left,i=t.strideWidth,l=t.dilationWidth,u=t.filterHeight,c=t.filterWidth,h=c;let d="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let m=0;m<c;m++)d+=`\n           vec4 xTexelC${2*m};\n           int xTexelC${2*m}Ready;\n           vec4 xTexelC${2*m+1};\n           int xTexelC${2*m+1}Ready;\n           vec4 xC${m};`;d+=`\n     for (int r = 0; r < ${u}; r++) {\n      for (int d1 = 0; d1 < ${t.inChannels}; d1 += 2) {\n       `;for(let m=0;m<c;m++)d+=`\n           xTexelC${2*m} = vec4(0.0);\n           xTexelC${2*m}Ready = 0;\n           xTexelC${2*m+1} = vec4(0.0);\n           xTexelC${2*m+1}Ready = 0;\n           xC${m} = vec4(0.0);`;d+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let m=0;m<(h+1)/2;m++){const y=2*m;if(d+=`\n           xC = xCCorner + ${y*l};\n           `,1===i){if(y<c&&(o%2==1?(d+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n               `,d+=1===l&&y>0?`\n                 xC${y} = vec4(xTexelC${y-2}.zw, xTexelC${y}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${y} = vec4(previous.zw, xTexelC${y}.xy);\n                   } else {\n                     xC${y} = vec4(0.0, 0.0, xTexelC${y}.xy);\n                   }\n                   `):d+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n\n                 xC${y} = xTexelC${y};\n                 `,y+1<c)){const x=o%2==0?vt(l):l;l%2==0&&o%2==1||l%2!=0&&o%2!=1?(d+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${x};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                     xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${y+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${y+1}Ready = 1;\n                   }\n                   `,d+=l>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${y+1} = vec4(previous.zw, xTexelC${y+1}.xy);\n                     } else {\n                      xC${y+1} = vec4(0.0, 0.0, xTexelC${y+1}.xy);\n                     }\n                     `:`\n                     xC${y+1} = vec4(xTexelC${y}.zw, xTexelC${y+1}.xy);\n                     `):d+=1===x?`\n                     xC${y+1} = xTexelC${y};\n                     `:`\n                     xCOffset = xC + ${x};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                       xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${y+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${y+1}Ready = 1;\n                     }\n\n                     xC${y+1} = xTexelC${y+1};\n                     `}}else y<c&&(o%2==1?(d+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${y+1}Ready == 0) {\n                   xTexelC${y+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${y+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${y+1}Ready = 1;\n                 }\n\n                 xC${y} = vec4(xTexelC${y}.zw, xTexelC${y+1}.zw);\n               `,y+1<c&&(d+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${y+1} = vec4(xTexelC${y+1}.xy, final.xy);\n                 `)):(d+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                   xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${y+1}.zw = vec2(0.);\n                   }\n                   xTexelC${y+1}Ready = 1;\n                 }\n\n                 xC${y} = vec4(\n                   xTexelC${y}.xy, xTexelC${y+1}.xy);\n               `,y+1<c&&(d+=`\n                   xC${y+1} = vec4(xTexelC${y}.zw, xTexelC${y+1}.zw);\n                 `)));y<c&&(d+=`\n             wTexel = getW(r, ${y}, d1, d2);\n             dotProd += xC${y}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${t.inChannels}) {\n               dotProd += xC${y}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,y+1<c&&(d+=`\n               wTexel = getW(r, ${y+1}, d1, d2);\n               dotProd += xC${y+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${t.inChannels}) {\n                 dotProd += xC${y+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}d+="\n     }\n   ",d+="\n     }\n   ",d+="\n     }\n   ";let p="",f="";s&&(p=r?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${s}\n         }`:a?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${s}\n         }`:`vec4 activation(vec4 x) {\n           ${s}\n         }`,f="result = activation(result);");const g=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${p}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${d}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${g}\n         ${f}\n         setOutput(result);\n       }\n     `}}class yB{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=t,this.enableShapeUniforms=gn(this.outputShape.length);const{dataFormat:s}=e,r=mn(),a="channelsLast"===s,o=a?1:2,i=a?2:3,l=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${t[2]} && pos < ${t[1]}) {`;let u="";for(let c=0;c<=1;c++)for(let h=0;h<=1;h++)u+=`\n          blockIndex = rc.z + ${h};\n          pos = rc.y + ${c};\n\n          ${l}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${o}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${a}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*c+h}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*c+h}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${u}\n\n        ${r.output} = result;\n      }\n    `}}function lc(n,t){const e=n.length;return e>=3?t?[...n.slice(0,-3),n[e-3]*n[e-2],n[e-1]]:[...n.slice(0,-3),n[e-3],n[e-2]*n[e-1]]:!t&&1===e&&n[0]>1?[n[0],1]:null}function Iw({x:n,filter:t,convInfo:e,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const l=n.shape,u=s.texData.get(n.dataId),c=e.inChannels,h=l[0]*l[1]*l[2],d=e.outChannels,p="channelsLast"===e.dataFormat;let m;const y=[];if(null!=a){const w=lc(a.shape,p);null!=w&&(a=he({inputs:{x:a},backend:s,attrs:{shape:w}}),y.push(a))}if(null!=r){const w=lc(r.shape,p);null!=w&&(r=he({inputs:{x:r},backend:s,attrs:{shape:w}}),y.push(r))}if((1!==h&&1!==d||!(c>1e3))&&u.isPacked&&p&&null!=u.texture&&l[2]%2!=0&&ye(u.shape.slice(-3),l.slice(-3))){const I={dataId:n.dataId,shape:[1,l[0]*l[1]*(l[2]+1),e.inChannels],dtype:n.dtype},S=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,v(Yu(u.shape,I.shape),()=>`packed reshape ${u.shape} to ${I.shape} isn't free`);const N=he({inputs:{x:t},backend:s,attrs:{shape:[1,e.inChannels,e.outChannels]}});y.push(N);const k=rc({a:I,b:N,backend:s,transposeA:!1,transposeB:!1,bias:r,activation:i,preluActivationWeights:a,leakyreluAlpha:o}),_=s.texData.get(k.dataId);v(_.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=S,_.shape=e.outShape,m=En({inputs:{x:k},backend:s}),m.shape=e.outShape,y.push(k)}else{const w=e.outHeight*e.outWidth,I=he({inputs:{x:n},backend:s,attrs:{shape:p?[e.batchSize,w,e.inChannels]:[e.batchSize,e.inChannels,w]}}),S=he({inputs:{x:t},backend:s,attrs:{shape:[1,e.inChannels,e.outChannels]}}),N=rc({a:p?I:S,b:p?S:I,transposeA:!p,transposeB:!1,backend:s,bias:r,activation:i,preluActivationWeights:a,leakyreluAlpha:o});m=he({inputs:{x:N},backend:s,attrs:{shape:e.outShape}}),y.push(I),y.push(S),y.push(N)}for(const w of y)s.disposeIntermediateTensorInfo(w);return m}function Sw({x:n,filter:t,convInfo:e,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:d,dataFormat:p}=e,f="channelsLast"===p,g=l*u*c,m=d*h,y=[e.batchSize,g,m],w=[];if(null!=a){const q=lc(a.shape,f);null!=q&&(a=he({inputs:{x:a},backend:s,attrs:{shape:q}}),w.push(a))}if(null!=r){const q=lc(r.shape,f);null!=q&&(r=he({inputs:{x:r},backend:s,attrs:{shape:q}}),w.push(r))}const I=he({inputs:{x:t},backend:s,attrs:{shape:[1,g,E(t.shape)/g]}});w.push(I);const S=new yB(y,e),k=s.runWebGLProgram(S,[n],"float32",[n.shape,[e.padInfo.top,e.padInfo.left],[e.strideHeight,e.strideWidth],[e.dilationHeight,e.dilationWidth],[e.inChannels],[e.filterWidth*e.inChannels],[e.outWidth]]),_=he({inputs:{x:k},backend:s,attrs:{shape:y}});w.push(k),w.push(_);const $=null!=r,L=null!=a,B="leakyrelu"===i,G=i?wi(i,!0):null,H=new aw(f?_.shape:I.shape,f?I.shape:_.shape,f?[e.batchSize,m,e.outChannels]:[e.batchSize,e.outChannels,m],!0,!1,$,G,L,B),j=f?[_,I]:[I,_];if(r&&j.push(r),L&&j.push(a),B){const q=s.makeTensorInfo([],"float32",zs(o,"float32"));j.push(q),w.push(q)}const X=s.runWebGLProgram(H,j,"float32"),Q=he({inputs:{x:X},backend:s,attrs:{shape:e.outShape}});w.push(X);for(const q of w)s.disposeIntermediateTensorInfo(q);return Q}const bB={kernelName:Pi,backendName:"webgl",kernelFunc:function xB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a}=t,{strides:o,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=$s(l),d=Yt(r.shape,a.shape,o,u,i,c,!1,h);let p;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(d.strideWidth<=2&&"channelsLast"===h&&z().getBool("WEBGL_EXP_CONV")){const g=new vw(d);p=e.runWebGLProgram(g,[r,a],"float32",[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]])}else if(z().getBool("WEBGL_CONV_IM2COL"))p=Sw({x:r,filter:a,convInfo:d,backend:e});else{const g=new ww(d);p=e.runWebGLProgram(g,[r,a],"float32")}else p=Iw({x:r,filter:a,convInfo:d,backend:e});const f=he({inputs:{x:p},backend:e,attrs:{shape:d.outShape}});return e.disposeIntermediateTensorInfo(p),f}};class wB{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              if (${"channelsLast"===t.dataFormat}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class vB{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,s=t.filterWidth,o="channelsLast"===t.dataFormat;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${o?3:1}];\n\n        ivec2 dyCorner = ivec2(coords[${o?1:2}], coords[${o?2:3}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${s} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${o}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class IB{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${t.strideDepth} - ${t.padInfo.front};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class SB{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,s=t.filterHeight,r=t.filterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${e-1-t.padInfo.front}, ${s-1-t.padInfo.top}, ${r-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${t.strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${s}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${s} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const NB={kernelName:Nc,backendName:"webgl",kernelFunc:function CB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:a}=t,{strides:o,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=$s(l),d=Yt(r.shape,c,o,1,i,u,!1,h),p=new wB(d);return e.runWebGLProgram(p,[r,a],"float32")}},TB={kernelName:Li,backendName:"webgl",kernelFunc:function kB(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:a}=t,{inputShape:o,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=$s(u),d=Yt(o,a.shape,i,1,l,c,!1,h),p=new vB(d);return e.runWebGLProgram(p,[r,a],"float32")}},$B={kernelName:Vi,backendName:"webgl",kernelFunc:function _B(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a}=t,{strides:o,pad:i,dilations:l}=s,u=js(r.shape,a.shape,o,l,i),c=new gB(u);return e.runWebGLProgram(c,[r,a],"float32")}},DB={kernelName:kc,backendName:"webgl",kernelFunc:function EB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:a}=t,{strides:o,pad:i,filterShape:l}=s,u=js(r.shape,l,o,1,i),c=new IB(u);return e.runWebGLProgram(c,[r,a],"float32")}},RB={kernelName:Tc,backendName:"webgl",kernelFunc:function AB(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:a}=t,{pad:o,strides:i,inputShape:l}=s,u=js(l,a.shape,i,1,o),c=new SB(u);return e.runWebGLProgram(c,[r,a],"float32")}},OB=Qe({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),PB={kernelName:Ga,backendName:"webgl",kernelFunc:OB},LB=Qe({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),VB={kernelName:Ua,backendName:"webgl",kernelFunc:LB};class MB{constructor(t,e,s,r,a){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[o,i,l,u]=t,[c]=e,[h,d]=s;this.outputShape=[c,h,d,u];const p="bilinear"===r?1:0,[f,g]=[i-1+".0",l-1+".0"],[m,y,x]=h>1?[""+(i-1)/(h-1),"(y2-y1) * height_ratio",`y1*${f} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${f}`],[b,w,I]=d>1?[""+(l-1)/(d-1),"(x2-x1) * width_ratio",`x1*${g} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${g}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${o}) {\n          return;\n        }\n\n        float height_scale = ${y};\n        float width_scale = ${w};\n\n        float in_y = ${x};\n        if( in_y < 0.0 || in_y > ${f} ) {\n          setOutput(float(${a}));\n          return;\n        }\n        float in_x = ${I};\n        if( in_x < 0.0 || in_x > ${g} ) {\n          setOutput(float(${a}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const zB={kernelName:$c,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{image:r,boxes:a,boxInd:o}=t,{cropSize:i,method:l,extrapolationValue:u}=s,c=new MB(r.shape,a.shape,i,l,u);return e.runWebGLProgram(c,[r,a,o],"float32")}};var $a=(()=>{return(n=$a||($a={})).Prod="*",n.Sum="+",$a;var n})();class Cw{constructor(t,e,s,r){this.op=t,this.outputShape=e,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const a=this.outputShape.length,i=s?this.op===$a.Prod?"1.0":"0.0":`getX(${Nw(a,"coords",this.op)})`,l=this.outputShape[this.outputShape.length-1];let u="",c="";s?(u=r?"end != "+(l-1):"end != 0",c=r?"end + 1":"end - 1"):(u=r?`end + pow2 < ${l}`:"end >= pow2",c=r?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${mt(a)} coords = getOutputCoords();\n        int end = ${kw(a,"coords",this.op)};\n        float val = ${i};\n        int pow2 = int(pow(2.0, index));\n        if (${u}) {\n          int idx = ${c};\n          ${kw(a,"coords",this.op)} = idx;\n          val ${this.op}= getX(${Nw(a,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function Nw(n,t,e){if(1===n)return`${t}`;if(2===n)return`${t}.x, ${t}.y`;if(3===n)return`${t}.x, ${t}.y, ${t}.z`;if(4===n)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`)}function kw(n,t,e){if(1===n)return`${t}`;if(2===n)return`${t}.y`;if(3===n)return`${t}.z`;if(4===n)return`${t}.w`;throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`)}function Tw(n,t,e,s,r,a){const o=t.shape.length,i=Ct([s],o);let l=t;null!=i&&(l=xn({inputs:{x:t},backend:e,attrs:{perm:i}}));const u=Vt(1,o)[0];if(u!==o-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${s}`);const c=l.shape[u];let h=En({inputs:{x:l},backend:e});for(let d=0;d<=Math.ceil(Math.log2(c))-1;d++){const p=new Cw(n,l.shape,!1,a),g=h;h=e.runWebGLProgram(p,[h],h.dtype,[[d]]),e.disposeIntermediateTensorInfo(g)}if(r){const d=new Cw(n,l.shape,r,a),p=h;h=e.runWebGLProgram(d,[h],h.dtype),e.disposeIntermediateTensorInfo(p)}if(null!=i){const p=xn({inputs:{x:h},backend:e,attrs:{perm:Ks(i)}});return e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(l),p}return h}const WB={kernelName:_c,backendName:"webgl",kernelFunc:function BB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,exclusive:o,reverse:i}=s;return Tw($a.Prod,r,e,a,o,i)}},UB={kernelName:Mi,backendName:"webgl",kernelFunc:function GB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,exclusive:o,reverse:i}=s;return Tw($a.Sum,r,e,a,o,i)}},jB={kernelName:Ec,backendName:"webgl",kernelFunc:function HB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:a}=t,{size:o,binaryOutput:i}=s;if(1===r.shape.length){const l=e.readSync(r.dataId),u=e.readSync(a.dataId),c=j0(l,u,a.dtype,a.shape,o);return e.makeTensorInfo([o],a.dtype,c)}if(2===r.shape.length){const l=e.bufferSync(r),u=e.bufferSync(a),c=aM(l,u,o,i);return e.makeTensorInfo(c.shape,a.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class qB{constructor(t,e,s){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=s,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const XB={kernelName:Dc,backendName:"webgl",kernelFunc:function KB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockSize:a,dataFormat:o}=s,i=r.shape[0],h=("NHWC"===o?r.shape[1]:r.shape[2])*a,d=("NHWC"===o?r.shape[2]:r.shape[3])*a,p=("NHWC"===o?r.shape[3]:r.shape[1])/(a*a),g=new qB("NHWC"===o?[i,h,d,p]:[i,p,h,d],a,o);return e.runWebGLProgram(g,[r],r.dtype)}};class _w{constructor(t,e=!1,s=null,r=!1,a=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=gn(this.outputShape.length);const o=t.filterHeight,i=t.filterWidth,l=t.outChannels/t.inChannels;let u="",c="";s&&(u=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`\n          float activation(float x) {\n            ${s}\n          }\n        `,c="result = activation(result);");const h=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${u}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${l};\n        int q = d2 - d1 * ${l};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${o}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${h}\n        ${c}\n        setOutput(result);\n      }\n    `}}class $w{constructor(t,e=!1,s=null,r=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=gn(this.outputShape.length);const o=t.outChannels/t.inChannels,i=t.padInfo.left,l=t.strideWidth,u=t.dilationWidth,c=t.filterHeight,h=t.filterWidth,d=h;let p="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let y=0;y<h;y++)p+=`\n          vec4 xTexelC${2*y};\n          int xTexelC${2*y}Ready;\n          vec4 xTexelC${2*y+1};\n          int xTexelC${2*y+1}Ready;\n          vec4 xC${y};`;p+=`\n    for (int r = 0; r < ${c}; r++) {\n      `;for(let y=0;y<h;y++)p+=`\n          xTexelC${2*y} = vec4(0.0);\n          xTexelC${2*y}Ready = 0;\n          xTexelC${2*y+1} = vec4(0.0);\n          xTexelC${2*y+1}Ready = 0;\n          xC${y} = vec4(0.0);`;p+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let y=0;y<(d+1)/2;y++){const x=2*y;if(p+=`\n          xC = xCCorner + ${x*u};\n          `,1===l){if(x<h&&(i%2==1?(p+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {\n                  xTexelC${x} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${x}.zw = vec2(0.0);\n                  }\n                  xTexelC${x}Ready = 1;\n                }\n              `,p+=1===u&&x>0?`\n                xC${x} = vec4(xTexelC${x-2}.zw, xTexelC${x}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${x} = vec4(previous.zw, xTexelC${x}.xy);\n                  } else {\n                    xC${x} = vec4(0.0, 0.0, xTexelC${x}.xy);\n                  }\n                  `):p+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {\n                  xTexelC${x} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${x}.zw = vec2(0.0);\n                  }\n                  xTexelC${x}Ready = 1;\n                }\n\n                xC${x} = xTexelC${x};\n                `,x+1<h)){const b=i%2==0?vt(u):u;u%2==0&&i%2==1||u%2!=0&&i%2!=1?(p+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${b};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {\n                    xTexelC${x+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${x+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${x+1}Ready = 1;\n                  }\n                  `,p+=u>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${x+1} = vec4(previous.zw, xTexelC${x+1}.xy);\n                    } else {\n                     xC${x+1} = vec4(0.0, 0.0, xTexelC${x+1}.xy);\n                    }\n                    `:`\n                    xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.xy);\n                    `):p+=1===b?`\n                    xC${x+1} = xTexelC${x};\n                    `:`\n                    xCOffset = xC + ${b};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {\n                      xTexelC${x+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${x+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${x+1}Ready = 1;\n                    }\n\n                    xC${x+1} = xTexelC${x+1};\n                    `}}else x<h&&(i%2==1?(p+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {\n                  xTexelC${x} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${x}.zw = vec2(0.0);\n                  }\n                  xTexelC${x}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${x+1}Ready == 0) {\n                  xTexelC${x+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${x+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${x+1}Ready = 1;\n                }\n\n                xC${x} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);\n              `,x+1<h&&(p+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${x+1} = vec4(xTexelC${x+1}.xy, final.xy);\n                `)):(p+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {\n                  xTexelC${x} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${x}.zw = vec2(0.0);\n                  }\n                  xTexelC${x}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {\n                  xTexelC${x+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${x+1}.zw = vec2(0.);\n                  }\n                  xTexelC${x+1}Ready = 1;\n                }\n\n                xC${x} = vec4(\n                  xTexelC${x}.xy, xTexelC${x+1}.xy);\n              `,x+1<h&&(p+=`\n                  xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);\n                `)));x<h&&(p+=`\n            wTexel = getW(r, ${x}, d1, q);\n            dotProd += xC${x} * vec4(wTexel.xz, wTexel.xz);\n          `,x+1<h&&(p+=`\n              wTexel = getW(r, ${x+1}, d1, q);\n              dotProd += xC${x+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}p+="\n    }\n  ",p+="\n      }\n    ";let f="",g="";s&&(f=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:a?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`vec4 activation(vec4 x) {\n          ${s}\n        }`,g="result = activation(result);");const m=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${f}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${p}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${g}\n        setOutput(result);\n      }\n    `}}const ZB={kernelName:zi,backendName:"webgl",kernelFunc:function YB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a}=t,{strides:o,pad:i,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),v(nn(o,c),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`);const h=Yt(r.shape,a.shape,o,c,i,u,!0);let d;return d=z().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new $w(h):new _w(h),e.runWebGLProgram(d,[r,a],"float32",[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]])}};class JB{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${t.outChannels/t.inChannels} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class QB{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,s=t.filterWidth,l=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${s} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${l}; dm++) {\n              int d2 = d1 * ${l} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const tW={kernelName:Ac,backendName:"webgl",kernelFunc:function eW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s,h=Yt(r.shape,c,o,i,l,u,!0),d=new JB(h);return e.runWebGLProgram(d,[r,a],"float32")}},sW={kernelName:Rc,backendName:"webgl",kernelFunc:function nW(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s,h=Yt(c,a.shape,o,i,l,u,!0),d=new QB(h);return e.runWebGLProgram(d,[r,a],"float32")}};class rW{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const oW={kernelName:"Diag",backendName:"webgl",kernelFunc:function aW(n){const{inputs:t,backend:e}=n,{x:s}=t,r=[...s.shape,...s.shape],a=E(s.shape),o=he({inputs:{x:s},backend:e,attrs:{shape:[a]}}),i=new rW(a),l=e.runWebGLProgram(i,[o],o.dtype),u=he({inputs:{x:l},backend:e,attrs:{shape:r}});return e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(l),u}};class iW{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const{inHeight:e,inWidth:s,padInfo:r,strideHeight:a,strideWidth:o,filterHeight:i,filterWidth:l,dilationHeight:u,dilationWidth:c}=t,{top:h,left:d}=r;this.userCode=`\n      const ivec2 strides = ivec2(${a}, ${o});\n      const ivec2 pads = ivec2(${h}, ${d});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${e}) {\n            for (int w = 0; w < ${l}; w++) {\n              int wIn = wBeg + w * ${c};\n\n              if (wIn >= 0 && wIn < ${s}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const uW={kernelName:Bi,backendName:"webgl",kernelFunc:function lW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a}=t,{strides:o,pad:i,dilations:l}=s,u=Mo(r.shape,a.shape,o,i,"NHWC",l);let c;const h=new iW(u);c=e.runWebGLProgram(h,[r,a],"float32");const d=he({inputs:{x:c},backend:e,attrs:{shape:u.outShape}});return e.disposeIntermediateTensorInfo(c),d}},hW={kernelName:"Einsum",backendName:"webgl",kernelFunc:function cW(n){const{inputs:t,backend:e,attrs:s}=n,{equation:r}=s,a=t,{allDims:o,summedDims:i,idDims:l}=zd(r,a.length);Wd(o.length,l,a);const{path:u,steps:c}=Gd(i,l),h=c.length;let d=null,p=o.length;const f=[];for(let g=0;g<h;++g){for(const m of c[g]){const{permutationIndices:y,expandDims:x}=Bd(p,l[m]);let b;Ud(y)?b=a[m]:(b=xn({inputs:{x:a[m]},backend:e,attrs:{perm:y}}),f.push(b));const w=b.shape.slice();for(let I=0;I<x.length;++I)w.splice(x[I],0,1);ye(b.shape,w)||(b=he({inputs:{x:b},backend:e,attrs:{shape:w}}),f.push(b)),null===d?d=b:(d=bf({inputs:{a:b,b:d},backend:e}),f.push(d))}g<h-1&&(u[g]>=0&&(d=sc({inputs:{x:d},backend:e,attrs:{axis:u[g]-(o.length-p),keepDims:!1}}),f.push(d)),p--)}for(const g of f)g!==d&&e.disposeIntermediateTensorInfo(g);return d}},dW=Qe({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),pW={kernelName:ja,backendName:"webgl",kernelFunc:dW},gW={kernelName:Pc,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e}=n,{dy:s,y:r}=t,a=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new bi("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new ka("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,r.shape);return e.runWebGLProgram(a,[s,r],s.dtype)}},yW=rn({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:uM}),xW={kernelName:Wi,backendName:"webgl",kernelFunc:yW},wW=Qe({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${Ad};\n  float a1 = ${Rd};\n  float a2 = ${Fd};\n  float a3 = ${Od};\n  float a4 = ${Pd};\n  float a5 = ${Ld};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),vW={kernelName:qa,backendName:"webgl",kernelFunc:wW},Ew=Qe({opSnippet:"if (isnan(x)) return x;\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:cM,dtype:"float32"}),SW={kernelName:Ka,backendName:"webgl",kernelFunc:Ew};function Sf(n){const{inputs:t,attrs:e,backend:s}=n,{dim:r}=e,{input:a}=t,o=a.shape.length,i=a.shape.slice();let l=r;return r<0&&(v(-(o+1)<=r,()=>`Axis must be in the interval [${-(o+1)}, ${o}]`),l=o+r+1),i.splice(l,0,1),he({inputs:{x:a},backend:s,attrs:{shape:i}})}const CW={kernelName:Gi,backendName:"webgl",kernelFunc:Sf},Dw="return exp(x) - 1.0;",NW=Qe({opSnippet:Dw,packedOpSnippet:Dw,cpuKernelImpl:hM}),kW={kernelName:Xa,backendName:"webgl",kernelFunc:NW};class Aw{constructor(t,e,s){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const a=s?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,o=s?`${r}.0`:"1.0";let i;if("real"===t)i="return real * expR - imag * expI;";else{if("imag"!==t)throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${a};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${o};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function Rw(n,t,e){const s=e.texData.get(n.dataId),r=E(n.shape),a=n.shape[n.shape.length-1],i=he({inputs:{x:n},backend:e,attrs:{shape:[r/a,a]}}),l=i.shape,u=new Aw("real",l,t),c=new Aw("imag",l,t),h=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:l},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:l}],d=e.runWebGLProgram(u,h,"float32"),p=e.runWebGLProgram(c,h,"float32"),f=cr({inputs:{real:d,imag:p},backend:e});e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p);const g=he({inputs:{x:f},backend:e,attrs:{shape:n.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(f),g}const _W={kernelName:"FFT",backendName:"webgl",kernelFunc:function TW(n){const{inputs:t,backend:e}=n,{input:s}=t;return Rw(s,!1,e)}};class $W{constructor(t,e){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function Ci(n){const{backend:t,attrs:e}=n,{shape:s,value:r}=e;let{dtype:a}=e;if(a=a||Aa(r),"string"===a){const o=zt(a,E(s));return o.fill(r),t.makeTensorInfo(s,a,o)}{const o=new $W(s,r);return t.runWebGLProgram(o,[],a,[[r]])}}const EW={kernelName:Vc,backendName:"webgl",kernelFunc:Ci};class DW{constructor(t){this.variableNames=["Image"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${e} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${e}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const AW={kernelName:Mc,backendName:"webgl",kernelFunc:({inputs:n,backend:t})=>{const{image:e}=n,s=t,r=new DW(e.shape);return s.runWebGLProgram(r,[e],e.dtype)}},Fw="return floor(x);",RW=Qe({opSnippet:Fw,packedOpSnippet:Fw,cpuKernelImpl:dM}),FW={kernelName:Ya,backendName:"webgl",kernelFunc:RW},OW=rn({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),PW={kernelName:Za,backendName:"webgl",kernelFunc:OW};class LW{constructor(t){this.variableNames=["A"];const e=mn(),[s,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${s}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class VW{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=mn(),[s,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${s}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const MW={kernelName:ch,backendName:"webgl",kernelFunc:function zW(n){const{inputs:t,backend:e,attrs:s}=n;let{pixels:r}=t;const{numChannels:a}=s,o="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,i="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,[l,u]=o?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,a];if(i||o){const g=z().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(null==Ea||g!==Cf)&&(Cf=g,Ea=document.createElement("canvas").getContext("2d",{willReadFrequently:Cf})),Ea.canvas.width=l,Ea.canvas.height=u,Ea.drawImage(r,0,0,l,u),r=Ea.canvas}const d=e.makeTensorInfo(c,"int32");e.texData.get(d.dataId).usage=$n.PIXELS,e.gpgpu.uploadPixelDataToTexture(e.getTexture(d.dataId),r);const p=z().getBool("WEBGL_PACK")?new VW(h):new LW(h),f=e.runWebGLProgram(p,[d],"int32");return e.disposeData(d.dataId),f}};let Ea,Cf=z().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const WW={kernelName:_l,backendName:"webgl",kernelFunc:function BW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s,g=$s(c),m=Yt(r.shape,a.shape,l,h,u,d,!1,g);let y;const x=[],b=null!=o,w=null!=i,I="leakyrelu"===p,S=()=>{const k=[r,a],_=($,L)=>{if("NCHW"===L&&1===$.shape.length&&1!==$.shape[0]){const B=he({inputs:{x:$},backend:e,attrs:{shape:[$.shape[0],1,1]}});return x.push(B),B}return $};if(b&&k.push(_(o,c)),w&&k.push(_(i,c)),I){const $=e.makeTensorInfo([],"float32",zs(f,"float32"));k.push($),x.push($)}return k};if(1!==m.filterHeight||1!==m.filterWidth||1!==m.dilationHeight||1!==m.dilationWidth||1!==m.strideHeight||1!==m.strideWidth||"SAME"!==m.padInfo.type&&"VALID"!==m.padInfo.type)if(m.strideWidth<=2&&"channelsLast"===g&&z().getBool("WEBGL_EXP_CONV")){const k=p?wi(p,!0):null,_=new vw(m,b,k,w,I),$=[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]],L=S();y=e.runWebGLProgram(_,L,"float32",$)}else if(z().getBool("WEBGL_CONV_IM2COL"))y=Sw({x:r,filter:a,convInfo:m,backend:e,bias:o,activation:p,preluActivationWeights:i,leakyreluAlpha:f});else{const k=p?wi(p,!1):null,_=new ww(m,b,k,w,I),$=S();y=e.runWebGLProgram(_,$,"float32")}else y=Iw({x:r,filter:a,convInfo:m,backend:e,bias:o,activation:p,preluActivationWeights:i,leakyreluAlpha:f});const N=he({inputs:{x:y},backend:e,attrs:{shape:m.outShape}});return x.push(y),x.forEach(k=>e.disposeIntermediateTensorInfo(k)),N}},UW={kernelName:$l,backendName:"webgl",kernelFunc:function GW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:d,leakyreluAlpha:p}=s,f=[];let g=c;null==g&&(g=[1,1]),v(nn(l,g),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${g}'`);const m=Yt(r.shape,a.shape,l,g,u,h,!0),y=z().getBool("WEBGL_PACK_DEPTHWISECONV")&&m.strideWidth<=2&&m.outChannels/m.inChannels==1,x=d?wi(d,y):null,b=[r,a],w=null!=o,I=null!=i,S="leakyrelu"===d;if(w&&b.push(o),I&&b.push(i),S){const $=e.makeTensorInfo([],"float32",zs(p,"float32"));b.push($),f.push($)}let N;N=y?new $w(m,w,x,I,S):new _w(m,w,x,I,S);const _=e.runWebGLProgram(N,b,"float32",[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]]);return f.forEach($=>e.disposeIntermediateTensorInfo($)),_}};class HW{constructor(t,e,s,r){this.sliceDim=t,this.strides=e,this.paramsShape=r,this.variableNames=["x","indices"],this.outputShape=s;const a=mt(s.length);let o="\n    int index;";for(let i=0;i<this.sliceDim;i++)o+=`\n          index = round(getIndices(coords[0], ${i}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[i]};\n          flattenIndex += index * ${this.strides[i]};`;this.userCode=`\n         void main() {\n          ${a} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${o}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const qW={kernelName:Pf,backendName:"webgl",kernelFunc:function jW(n){const{inputs:t,backend:e}=n,{params:s,indices:r}=t,a=r.shape,o=a[a.length-1],i=E(s.shape),[l,u,c,h]=Dd(s,r),d=he({inputs:{x:r},backend:e,attrs:{shape:[u,o]}}),p=he({inputs:{x:s},backend:e,attrs:{shape:[E(s.shape)/c,c]}});if(e.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const y=e.readSync(r.dataId),x=e.bufferSync(s),b=pM(y,x,s.dtype,u,o,c,h,s.shape,i);return e.makeTensorInfo(l,s.dtype,b.values)}const f=new HW(o,h,[u,c],s.shape),g=e.runWebGLProgram(f,[p,d],p.dtype),m=he({inputs:{x:g},backend:e,attrs:{shape:l}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(g),m}};class KW{constructor(t,e){this.variableNames=["A","indices"],this.outputShape=e,this.rank=e.length;const s=mt(this.rank),r=function XW(n,t){const e=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let r=0;r<n.length;r++)s.push(2===r?"index":`${e[r]}`);return s.join()}(t);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${t[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function Ow(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,indices:a}=t,{axis:o,batchDims:i}=s,l=ve(o,r.shape)[0];if(z().get("DEBUG")){const x=e.readSync(a.dataId),b=r.shape[l];for(let w=0;w<x.length;++w){const I=x[w];v(I<=b-1&&I>=0,()=>`GatherV2: the index value ${I} is not in [0, ${b-1}]`)}}const u=qd(r,a,l,i),c=E(a.shape),h=[],d=he({inputs:{x:r},backend:e,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),p=he({inputs:{x:a},backend:e,attrs:{shape:[u.batchSize,c/u.batchSize]}});h.push(d),h.push(p);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(e.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const x=e.bufferSync(p),b=e.bufferSync(d),w=fM(b,x,f);return h.forEach(I=>e.disposeIntermediateTensorInfo(I)),e.makeTensorInfo(u.outputShape,w.dtype,w.values)}const g=new KW(d.shape,f),m=e.runWebGLProgram(g,[d,p],d.dtype);h.push(m);const y=he({inputs:{x:m},backend:e,attrs:{shape:u.outputShape}});return h.forEach(x=>e.disposeIntermediateTensorInfo(x)),y}const YW={kernelName:Hi,backendName:"webgl",kernelFunc:Ow},ZW=rn({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:mM,dtype:"bool"}),JW={kernelName:ji,backendName:"webgl",kernelFunc:ZW},QW=rn({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:gM}),e4={kernelName:Ja,backendName:"webgl",kernelFunc:QW},n4={kernelName:zc,backendName:"webgl",kernelFunc:function t4(n){const{inputs:t,backend:e}=n,{input:s}=t;return Rw(s,!0,e)}},s4=Qe({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),r4={kernelName:eo,backendName:"webgl",kernelFunc:s4},a4=Qe({opSnippet:"return float(isinf(x));",dtype:"bool"}),o4={kernelName:to,backendName:"webgl",kernelFunc:a4},i4=Qe({opSnippet:"return float(isnan(x));",dtype:"bool"}),l4={kernelName:no,backendName:"webgl",kernelFunc:i4},u4=rn({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:yM,dtype:"bool"}),c4={kernelName:Ki,backendName:"webgl",kernelFunc:u4},h4=rn({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:xM,dtype:"bool"}),d4={kernelName:Xi,backendName:"webgl",kernelFunc:h4},f4={kernelName:Lf,backendName:"webgl",kernelFunc:function p4(n){const{backend:t,attrs:e}=n,{start:s,stop:r,num:a}=e,o=bM(s,r,a);return t.makeTensorInfo([o.length],"float32",o)}},g4=Qe({opSnippet:"if (isnan(x)) return x;\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:wM}),y4={kernelName:so,backendName:"webgl",kernelFunc:g4},b4=Qe({opSnippet:"if (isnan(x)) return x;\n  return log(1.0 + x);\n"}),w4={kernelName:ro,backendName:"webgl",kernelFunc:b4},v4=rn({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),I4={kernelName:Yi,backendName:"webgl",kernelFunc:v4},S4=Qe({opSnippet:"return float(!(x >= 1.0));"}),C4={kernelName:Zi,backendName:"webgl",kernelFunc:S4},N4=rn({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),k4={kernelName:Ji,backendName:"webgl",kernelFunc:N4};class T4{constructor(t,e,s,r,a){this.variableNames=["x"],this.outputShape=[];const o=e,i=t[3]-1;let l;this.outputShape=t;const u=`float(${s}) + float(${r}) * sum`;l=.5===a?`inversesqrt(${u})`:1===a?`1.0/(${u})`:`exp(log(${u}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${o}; j <= ${o}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${l};\n        setOutput(val);\n      }\n    `}}class _4{constructor(t,e,s,r,a){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const o=e,i=t[3]-1;let l;this.outputShape=t;const u=`float(${s}) + float(${r}) * sum`;l=.5===a?`inversesqrt(${u})`:1===a?`1.0/(${u})`:`exp(log(${u}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${o};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${o}; j <= ${o}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${l};\n        setOutput(result);\n      }\n    `}}const $4={kernelName:Qi,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{depthRadius:a,bias:o,alpha:i,beta:l}=s,u=z().getBool("WEBGL_PACK_NORMALIZATION")?new _4(r.shape,a,o,i,l):new T4(r.shape,a,o,i,l);return e.runWebGLProgram(u,[r],r.dtype)}};class E4{constructor(t,e,s,r,a){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=s,this.alpha=r,this.beta=a,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${s});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${a})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${a});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const D4={kernelName:Wc,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r,y:a,dy:o}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s,h=new E4(r.shape,i,l,u,c);return e.runWebGLProgram(h,[r,a,o],r.dtype)}};function Pw(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reductionIndices:a,keepDims:o}=s,i=r.shape.length,l=ve(a,r.shape);let u=l;const c=Ct(u,i),h=null!=c,d=e.shouldExecuteOnCPU([r]);let p=r;if(h){if(d){const b=e.texData.get(p.dataId).values,w=new Array(i);for(let N=0;N<w.length;N++)w[N]=r.shape[c[N]];const I=yf(b,r.shape,r.dtype,c,w);p=e.makeTensorInfo(w,r.dtype),e.texData.get(p.dataId).values=I}else p=nc(r,c,e);u=Vt(u.length,i)}sn("max",u,i);const[f,g]=Zt(p.shape,u);let y,m=f;if(o&&(m=Lt(f,l)),d){const b=e.texData.get(p.dataId).values,w=vM(b,E(g),m,r.dtype);y=e.makeTensorInfo(m,r.dtype),e.texData.get(y.dataId).values=w}else y=function A4(n,t,e,s){const r=E(t),i=he({inputs:{x:n},attrs:{shape:[E(n.shape)/r,r]},backend:s}),l=Br(i,n.dtype,"max",s),u=he({inputs:{x:l},attrs:{shape:e},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(l),u}(p,g,m,e);return h&&e.disposeIntermediateTensorInfo(p),y}const R4={kernelName:el,backendName:"webgl",kernelFunc:Pw},P4=rn({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:IM}),L4={kernelName:ao,backendName:"webgl",kernelFunc:P4},M4={kernelName:tl,backendName:"webgl",kernelFunc:function V4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;gi(r,"maxPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=s;v(nn(o,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const c=Wn(r.shape,a,o,1,i,l);if(1===c.filterWidth&&1===c.filterHeight&&ye(c.inShape,c.outShape))return En({inputs:{x:r},backend:e});const h=new vi(c,"max",!1);return e.runWebGLProgram(h,[r],r.dtype)}},B4={kernelName:nl,backendName:"webgl",kernelFunc:function z4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:a,strides:o,pad:i,dataFormat:l,dimRoundingMode:u}=s,h=_s(r.shape,a,o,[1,1,1],i,u,l),d=new wf(h,"max",!1);return e.runWebGLProgram(d,[r],r.dtype)}};class W4{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const a=t.effectiveFilterHeight,o=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${a-1-t.padInfo.top}, ${o-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${a};\n          wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${o}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${a*o-1} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${o} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class G4{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const l=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${l-1-t.padInfo.front}, ${u-1-t.padInfo.top}, ${c-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${l};\n           wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${c};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${l*u*c-1} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${c} +\n                  wR * ${c} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const H4={kernelName:Uc,backendName:"webgl",kernelFunc:function U4(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:a}=t,o=a,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,d=_s(o.shape,i,l,[1,1,1],u,c),p=new wf(d,"max",!0),f=e.runWebGLProgram(p,[o],o.dtype),g=new G4(d),m=e.runWebGLProgram(g,[r,f],o.dtype);return e.disposeIntermediateTensorInfo(f),m}},q4={kernelName:Gc,backendName:"webgl",kernelFunc:function j4(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:a,output:o}=t,i=a;gi([a,o],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=Wn(i.shape,l,u,1,c,h),f=new vi(d,"max",!0),g=e.runWebGLProgram(f,[i],i.dtype),m=new W4(d),y=e.runWebGLProgram(m,[r,g],i.dtype);return e.disposeIntermediateTensorInfo(g),y}},X4={kernelName:Vf,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{filterSize:r,strides:a,pad:o,includeBatchInIndex:i}=t,l=e;v(4===s.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);const u=[1,1];v(nn(a,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);const c=Wn(s.shape,r,a,u,o),[h,d]=function K4(n,t,e,s){let r=new vi(e,"max",!1);const a=s.runWebGLProgram(r,[n],"float32");return r=new vi(e,"max",!0,!0,t),[a,s.runWebGLProgram(r,[n],"float32")]}(s,i,c,l);return[h,d]}},Z4={kernelName:sl,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{keepDims:r,axis:a}=t,o=e,i=s.shape.length,l=ve(a,s.shape);let u=l;const c=Ct(u,i),h=null!=c,d=o.shouldExecuteOnCPU([s]),p=[];let f=s;if(h){if(d){const w=o.texData.get(f.dataId).values,I=new Array(i);for(let k=0;k<I.length;k++)I[k]=s.shape[c[k]];const S=yf(w,s.shape,s.dtype,c,I);f=o.makeTensorInfo(I,s.dtype),o.texData.get(f.dataId).values=S}else f=nc(s,c,o);p.push(f),u=Vt(u.length,i)}sn("sum",u,i);const[g,m]=Zt(f.shape,u);let y=g;r&&(y=Lt(g,l));const x=function Y4(n,t,e,s){const r=E(t),i=he({inputs:{x:n},attrs:{shape:[E(n.shape)/r,r]},backend:s}),l=Br(i,"float32","mean",s),u=he({inputs:{x:l},attrs:{shape:e},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(l),u}(f,m,y,o);for(const b of p)o.disposeIntermediateTensorInfo(b);return x}},Q4={kernelName:rl,backendName:"webgl",kernelFunc:function J4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s,i=r.shape.length,l=ve(a,r.shape);let u=l;const c=Ct(u,i);let h=r;null!=c&&(h=xn({inputs:{x:r},backend:e,attrs:{perm:c}}),u=Vt(u.length,r.shape.length)),sn("min",u,i);const[d,p]=Zt(h.shape,u),g=he({inputs:{x:h},backend:e,attrs:{shape:[-1,E(p)]}}),m=Br(g,g.dtype,"min",e);let y;return y=he(o?{inputs:{x:m},backend:e,attrs:{shape:Lt(d,l)}}:{inputs:{x:m},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),null!=c&&e.disposeIntermediateTensorInfo(h),y}},nG=rn({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:SM}),sG={kernelName:oo,backendName:"webgl",kernelFunc:nG};class rG{constructor(t,e,s){this.variableNames=["x"],this.outputShape=e.map((c,h)=>c[0]+t[h]+c[1]);const r=t.length,a=mt(r),o=e.map(c=>c[0]).join(","),i=e.map((c,h)=>c[0]+t[h]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===s?0:1;this.userCode=1!==r?`\n      ${a} start = ${a}(${o});\n      ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${a} coords = outC - start;\n        setOutput(getX(${l}));\n      }\n    `:`\n        int start = ${o};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class aG{constructor(t,e,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((f,g)=>f[0]+t[g]+f[1]);const r=t.length,a=mt(r),o=e.map(f=>f[0]).join(","),i=e.map((f,g)=>f[0]+t[g]).join(","),l=yn("rc",r),u=yn("source",r),c=`${l[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${u.slice(-2).join()})`,d="reflect"===s?0:1;let p="";if(1===r){const f=`\n        ${a} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${d};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${d};\n        }\n        source -= start;\n      `;p=`\n        ${a} rc = outputLoc;\n        ${f}\n        result[0] = getChannel(getX(${u.join()}), ${h});\n        ${l[r-1]} += 1;\n        if(${c}) {\n          ${f}\n          result[1] = getChannel(getX(${u.join()}), ${h});\n        }\n      `}else{const f=`\n        ${a} source = rc;\n        ${a} lt = ${a}(lessThan(source, start));\n        ${a} gte = ${a}(greaterThanEqual(source, end));\n        ${a} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${d}) +\n                gte * ((end - 1) * 2 - source + ${d});\n        source -= start;\n      `;p=`\n        ${a} rc = outputLoc;\n        ${f}\n        result[0] = getChannel(getX(${u.join()}), ${h});\n        ${l[r-1]} += 1;\n        if(${c}) {\n          ${f}\n          result[1] = getChannel(getX(${u.join()}), ${h});\n        }\n        rc = outputLoc;\n        ${l[r-2]} += 1;\n        if(${l[r-2]} < ${this.outputShape[r-2]}) {\n          ${f}\n          result[2] = getChannel(getX(${u.join()}), ${h});\n          ${l[r-1]} += 1;\n          if(${c}) {\n            ${f}\n            result[3] = getChannel(getX(${u.join()}), ${h});\n          }\n        }\n      `}this.userCode=`\n      const ${a} start = ${a}(${o});\n      const ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const oG={kernelName:al,backendName:"webgl",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s}=n,{paddings:r,mode:a}=e,o=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new aG(s.shape,r,a):new rG(s.shape,r,a);return t.runWebGLProgram(o,[s],s.dtype)}},uG=rn({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"}),cG={kernelName:lo,backendName:"webgl",kernelFunc:uG};class hG{constructor(t,e,s){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[t,s],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}}const Lw=rn({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),dG={kernelName:Ha,backendName:"webgl",kernelFunc:Lw},Vw="return a - b;",Mw=rn({opSnippet:Vw,packedOpSnippet:Vw,supportsComplex:!0,cpuKernelImpl:GM}),pG={kernelName:No,backendName:"webgl",kernelFunc:Mw};function zw(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{dim:a}=s,o=ve([a],r.shape),i=Pw({inputs:{x:r},backend:e,attrs:{reductionIndices:o,keepDims:!1}}),l=Lt(i.shape,o),u=he({inputs:{x:i},backend:e,attrs:{shape:l}}),c=Mw({inputs:{a:r,b:u},backend:e}),h=Ew({inputs:{x:c},backend:e}),d=sc({inputs:{x:h},backend:e,attrs:{axis:o,keepDims:!1}}),p=he({inputs:{x:d},backend:e,attrs:{shape:l}}),f=Lw({inputs:{a:h,b:p},backend:e});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),f}const fG={kernelName:Sl,backendName:"webgl",kernelFunc:zw},gG={kernelName:Mf,backendName:"webgl",kernelFunc:function mG(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{numSamples:a,seed:o,normalized:i}=s,l=i?r:zw({inputs:{logits:r},backend:e,attrs:{dim:r.shape.length-1}}),h=new hG(l.shape[0],l.shape[1],a),p=e.runWebGLProgram(h,[l],"int32",[[o]]);return i||e.disposeIntermediateTensorInfo(l),p}},wG={kernelName:ol,backendName:"webgl",kernelFunc:function bG(n){const{inputs:t,backend:e}=n,{x:s}=t;if(e.shouldExecuteOnCPU([s])){const a=e.texData.get(s.dataId),[o,i]=NM(a.values,s.shape,s.dtype);return e.makeTensorInfo(i,s.dtype,o)}let r;return r=z().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new ur(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new Ns(s.shape,"if (isnan(x)) return x;\n  return -x;\n"),e.runWebGLProgram(r,[s],s.dtype)}},vG=bd,SG={kernelName:Hc,backendName:"webgl",kernelFunc:function IG(n){Dn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=s,u=e.readSync(r.dataId),c=e.readSync(a.dataId),{selectedIndices:h}=vG(u,c,o,i,l);return e.makeTensorInfo([h.length],"int32",new Int32Array(h))}},CG=wd,kG={kernelName:jc,backendName:"webgl",kernelFunc:function NG(n){Dn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s,c=e.readSync(r.dataId),h=e.readSync(a.dataId),{selectedIndices:d,validOutputs:p}=CG(c,h,o,i,l,u);return[e.makeTensorInfo([d.length],"int32",new Int32Array(d)),e.makeTensorInfo([],"int32",new Int32Array([p]))]}},TG=vd,$G={kernelName:qc,backendName:"webgl",kernelFunc:function _G(n){Dn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s,c=e.readSync(r.dataId),h=e.readSync(a.dataId),d=o,p=i,f=l,g=u,{selectedIndices:m,selectedScores:y}=TG(c,h,d,p,f,g);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class EG{constructor(t,e,s,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${s}),\n                      float(index == coords.y)));\n      }\n    `}}const DG={kernelName:ul,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{indices:r}=t,{dtype:a,depth:o,onValue:i,offValue:l}=s,u=E(r.shape),c=new EG(u,o,i,l),h=he({inputs:{x:r},backend:e,attrs:{shape:[u]}}),d=e.runWebGLProgram(c,[h],a);e.disposeIntermediateTensorInfo(h);const f=he({inputs:{x:d},backend:e,attrs:{shape:[...r.shape,o]}});return e.disposeIntermediateTensorInfo(d),f}};function uc(n){const{inputs:t,backend:e}=n,{x:s}=t;if("complex64"===s.dtype){const r=Ii({inputs:{input:s},backend:e}),a=uc({inputs:{x:r},backend:e}),o=ic({inputs:{input:s},backend:e}),i=uc({inputs:{x:o},backend:e}),l=cr({inputs:{real:a,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(i),l}return Ci({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:e})}const AG={kernelName:kl,backendName:"webgl",kernelFunc:uc},RG={kernelName:ll,backendName:"webgl",kernelFunc:function Bw(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const r=Ii({inputs:{input:s},backend:e}),a=Bw({inputs:{x:r},backend:e}),o=ic({inputs:{input:s},backend:e}),i=uc({inputs:{x:o},backend:e}),l=cr({inputs:{real:a,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(i),l}return Ci({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:e})}},OG={kernelName:cl,backendName:"webgl",kernelFunc:function FG(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s;if(1===t.length)return Sf({inputs:{input:t[0]},backend:e,attrs:{dim:r}});const a=t[0].shape,o=t[0].dtype;t.forEach(c=>{J(a,c.shape,"All tensors passed to stack must have matching shapes"),v(o===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=[],u=bw({inputs:t.map(c=>{const h=Sf({inputs:{input:c},backend:e,attrs:{dim:r}});return i.push(h),h}),backend:e,attrs:{axis:r}});return i.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}};class PG{constructor(t,e,s){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((u,c)=>u[0]+t[c]+u[1]);const r=t.length,a=mt(r),o=e.map(u=>u[0]).join(","),i=e.map((u,c)=>u[0]+t[c]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${a} start = ${a}(${o});\n      ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${a} coords = outC - start;\n          setOutput(getX(${l}));\n        }\n      }\n    `:`\n        int start = ${o};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class LG{constructor(t,e,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((g,m)=>g[0]+t[m]+g[1]);const r=t.length,a=mt(r),o=e.map(g=>g[0]).join(","),i=e.map((g,m)=>g[0]+t[m]).join(","),l=yn("rc",r),u=yn("source",r),c=`${l[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${u.slice(-2).join()})`,d=[`${a} rc = outputLoc;`,`${l[r-1]} += 1;\n       if(${c}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${l[r-2]} += 1;\n       if(${l[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${l[r-1]} += 1;\n         if(${c}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let f="";for(let g=0,m=1===r?2:4;g<m;g++)f+=`\n        ${d[g]}\n        if (${p}) {\n          result[${g}] = float(value);\n        } else {\n          ${a} source = rc - start;\n          result[${g}] = getChannel(getX(${u.join()}), ${h});\n        }\n      `;f+=1===r?"} ":"}}",this.userCode=`\n      const ${a} start = ${a}(${o});\n      const ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${f}\n        setOutput(result);\n      }\n    `}}const Ww=n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:a,constantValue:o}=s;if(0===E(r.shape))return Ci({backend:e,attrs:{shape:a.map((c,h)=>c[0]+r.shape[h]+c[1]),value:o,dtype:r.dtype}});const i=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new LG(r.shape,a,o):new PG(r.shape,a,o);return e.runWebGLProgram(i,[r],r.dtype,[[o]])},VG={kernelName:hl,backendName:"webgl",kernelFunc:Ww},BG=rn({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"}),WG={kernelName:co,backendName:"webgl",kernelFunc:BG},UG={kernelName:pl,backendName:"webgl",kernelFunc:function GG(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:a,keepDims:o}=s,i=r.shape.length,l=[],u=ve(a,r.shape);let c=u;const h=Ct(c,i);let p,d=r;if(null!=h&&(d=xn({inputs:{x:r},backend:e,attrs:{perm:h}}),c=Vt(c.length,i),l.push(d)),sn("prod",c,i),e.shouldExecuteOnCPU([d])){const f=e.texData.get(d.dataId).values,{outVals:g,outShape:m,outDtype:y}=TM(d.shape,d.dtype,f,c);p=e.makeTensorInfo(m,y,g)}else{const[f,g]=Zt(d.shape,c),m=E(g),y=he({inputs:{x:d},backend:e,attrs:{shape:[-1,m]}}),b=Br(y,xh(r.dtype),"prod",e);p=he({inputs:{x:b},backend:e,attrs:{shape:f}}),l.push(y),l.push(b)}if(o){l.push(p);const f=Lt(p.shape,u);p=he({inputs:{x:p},backend:e,attrs:{shape:f}})}return l.forEach(f=>e.disposeIntermediateTensorInfo(f)),p}},jG={kernelName:zf,backendName:"webgl",kernelFunc:function HG(n){const{inputs:t,backend:e,attrs:s}=n,{paramsNestedSplits:r,paramsDenseValues:a,indices:o}=t,{outputRaggedRank:i}=s,l=r.map(y=>e.readSync(y.dataId)),u=r.map(y=>y.shape),c=e.readSync(a.dataId),h=e.readSync(o.dataId),[d,p,f]=_M(l,u,c,a.shape,a.dtype,h,o.shape,i),g=d.map(y=>e.makeTensorInfo([y.length],"int32",y)),m=e.makeTensorInfo(f,a.dtype,p);return g.concat([m])}},KG={kernelName:Bf,backendName:"webgl",kernelFunc:function qG(n){const{inputs:t,backend:e}=n,{starts:s,limits:r,deltas:a}=t,o=e.readSync(s.dataId),i=e.readSync(r.dataId),l=e.readSync(a.dataId),[u,c]=$M(o,s.shape,s.dtype,i,r.shape,l,a.shape);return[e.makeTensorInfo([u.length],"int32",u),e.makeTensorInfo([c.length],s.dtype,c)]}},YG={kernelName:Wf,backendName:"webgl",kernelFunc:function XG(n){const{inputs:t,backend:e,attrs:s}=n,{shape:r,values:a,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=s,u=e.readSync(r.dataId),c=e.readSync(a.dataId),h=e.readSync(o.dataId),d=i.map(m=>e.readSync(m.dataId)),p=i.map(m=>m.shape),[f,g]=EM(u,r.shape,c,a.shape,a.dtype,h,o.shape,d,p,l);return e.makeTensorInfo(f,a.dtype,g)}},Gw=n=>{const{backend:t,attrs:e}=n,{start:s,stop:r,step:a,dtype:o}=e,i=DM(s,r,a,o);return t.makeTensorInfo([i.length],o,i)},ZG={kernelName:Kc,backendName:"webgl",kernelFunc:Gw},JG=Qe({opSnippet:"return 1.0 / x;"}),QG={kernelName:ho,backendName:"webgl",kernelFunc:JG},tU=Qe({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),nU={kernelName:po,backendName:"webgl",kernelFunc:tU},rU=Qe({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),aU={kernelName:fo,backendName:"webgl",kernelFunc:rU};class oU{constructor(t,e,s,r,a){this.variableNames=["A"],this.outputShape=[];const[o,i,l,u]=t;this.outputShape=[o,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let d;d=a?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class iU{constructor(t,e,s,r,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[o,i,l,u]=t;this.outputShape=[o,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let d;d=a?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]},\n          ${c[1]/h[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${l}.0,\n                                     ${l}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${s-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const uU={kernelName:gl,backendName:"webgl",kernelFunc:function lU(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:a,halfPixelCenters:o,size:i}=s,[l,u]=i,c=z().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new iU(r.shape,l,u,a,o):new oU(r.shape,l,u,a,o);return e.runWebGLProgram(c,[r],"float32")}};class cU{constructor(t,e,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,a]=e,[,o,i]=t,l=[s&&o>1?r-1:r,s&&i>1?a-1:a],u=[s&&o>1?o-1:o,s&&i>1?i-1:i],c=l[0]/u[0],h=l[1]/u[1],d=1/c,p=1/h,f=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${h});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${g});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${o}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${a-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const dU={kernelName:Zc,backendName:"webgl",kernelFunc:function hU(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:a}=t,{alignCorners:o}=s,i=new cU(a.shape,r.shape,o);return e.runWebGLProgram(i,[a],a.dtype)}};class pU{constructor(t,e,s,r,a){this.variableNames=["A"],this.outputShape=[];const[o,i,l,u]=t;this.outputShape=[o,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let p;p=a?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class fU{constructor(t,e,s,r,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[o,i,l,u]=t;this.outputShape=[o,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let p;p=a?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]},\n          ${c[1]/h[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${l}.0,\n                                     ${l}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${s-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const gU={kernelName:ml,backendName:"webgl",kernelFunc:function mU(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:a,halfPixelCenters:o,size:i}=s,[l,u]=i,c=z().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new fU(r.shape,l,u,a,o):new pU(r.shape,l,u,a,o);return e.runWebGLProgram(c,[r],r.dtype)}};class yU{constructor(t,e,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,a]=e,[,o,i]=t,l=[s&&o>1?r-1:r,s&&i>1?a-1:a],u=[s&&o>1?o-1:o,s&&i>1?i-1:i],c=l[0]/u[0],h=l[1]/u[1],d=1/c,p=1/h,f=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${h});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${g});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${o}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${l[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${l[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${s} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${a}) - 1),\n                ${s} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const bU={kernelName:Yc,backendName:"webgl",kernelFunc:function xU(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:a}=t,{alignCorners:o}=s,i=new yU(a.shape,r.shape,o);return e.runWebGLProgram(i,[a],a.dtype)}};class wU{constructor(t,e){this.variableNames=["x"];const s=t.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);if(this.outputShape=t,1===s)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const a=t.map((i,l)=>(i=>-1!==e.indexOf(i)&&1!==t[i]?`${t[i]} - coords[${i}] - 1`:`coords[${i}]`)(l)).join(","),o=mt(s);this.userCode=`\n      void main() {\n        ${o} coords = getOutputCoords();\n        setOutput(getX(${a}));\n      }\n    `}}class vU{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const s=t.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);this.outputShape=t;const r=yn("rc",s),a=`${r[s-1]} + 1 < ${this.outputShape[s-1]}`,o=`${r[s-2]} + 1 < ${this.outputShape[s-2]}`,i=mt(s);function d(f){const g=t.map((x,b)=>function p(f,g){return-1!==e.indexOf(f)&&1!==t[f]?`${t[f]} - ${g[f]} - 1`:`${g[f]}`}(b,f));return`getChannel(getX(${g.join(",")}), vec2(${g.slice(-2).join(",")}))`}this.userCode=1===s?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${a}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function l(f){return d(f)}(r.slice())};\n          if(${a}){\n            result.g = ${function u(f){return f[s-1]="("+f[s-1]+" + 1)",d(f)}(r.slice())};\n          }\n          if(${o}) {\n            result.b = ${function c(f){return f[s-2]="("+f[s-2]+" + 1)",d(f)}(r.slice())};\n            if(${a}) {\n              result.a = ${function h(f){return f[s-1]="("+f[s-1]+" + 1)",f[s-2]="("+f[s-2]+" + 1)",d(f)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const SU={kernelName:yl,backendName:"webgl",kernelFunc:function IU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dims:a}=s,o=r.shape.length,i=ve(a,r.shape);if(0===o)return En({inputs:{x:r},backend:e});const l=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new vU(r.shape,i):new wU(r.shape,i);return e.runWebGLProgram(l,[r],r.dtype)}};class CU{constructor(t,e){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const s=t[1],r=t[2];this.outputShape=t;let a="";a="number"==typeof e?`float outputValue = ${e.toFixed(2)};`:`\n        vec3 fill = vec3(${e.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${a}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const NU={kernelName:hh,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{image:s}=n,{radians:r,fillValue:a,center:o}=t,i=e,l=new CU(s.shape,a),[u,c]=_d(o,s.shape[1],s.shape[2]),h=[[u,c,Math.sin(r),Math.cos(r)]];return i.runWebGLProgram(l,[s],s.dtype,h)}},kU=Qe({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),TU={kernelName:mo,backendName:"webgl",kernelFunc:kU},_U=Qe({opSnippet:"return inversesqrt(x);",cpuKernelImpl:AM}),$U={kernelName:go,backendName:"webgl",kernelFunc:_U};class Uw{constructor(t,e,s,r,a,o,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=o;const l=mt(a.length),u=mt(o.length);let c="";1===s?c="i":2===s&&(c="i, j");let d="";1===r?d="i":2===r&&(d="i, coords[1]"),this.userCode=`\n        ${l} strides = ${l}(${a});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(getIndices(${c}));\n              flattenedIndex += index * ${e>1?"strides[j]":"strides"};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += getUpdates(${d});\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const DU={kernelName:Gf,backendName:"webgl",kernelFunc:function EU(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r,updates:a}=t,{shape:o}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Zo(0,r,o),d=[h/u,u];if(0===h)return e.makeTensorInfo(o,r.dtype);const p=he({inputs:{x:r},backend:e,attrs:{shape:[l,i]}}),f=he({inputs:{x:a},backend:e,attrs:{shape:[l,u]}}),g=e.makeTensorInfo([],"float32",new Float32Array([0])),m=new Uw(l,i,p.shape.length,f.shape.length,c,d),y=e.runWebGLProgram(m,[f,p,g],f.dtype),x=he({inputs:{x:y},backend:e,attrs:{shape:o}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(g),x}};class AU{constructor(t,e,s,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[t,s];const o=`for (int i = 0; i < ${Math.ceil(Math.log2(e+1))}; ++i) { if (left >= right) break;`,i=2===z().getNumber("WEBGL_VERSION")?"while (left < right) {":o;this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${i}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${"left"===r?"<":"<="} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const FU={kernelName:Uf,backendName:"webgl",kernelFunc:function RU(n){const{inputs:t,backend:e,attrs:s}=n,{sortedSequence:r,values:a}=t,{side:o}=s,i=new AU(r.shape[0],r.shape[1],a.shape[1],o);return e.runWebGLProgram(i,[r,a],"int32",[[r.shape[1]]])}};class OU{constructor(t,e,s){let r,a;if(this.variableNames=["c","a","b"],this.outputShape=e,s>4)throw Error(`Where for rank ${s} is not yet supported`);if(1===s)a="resRC",r="resRC";else{const i=["resRC.x","resRC.y","resRC.z","resRC.w"],l=[],u=[];for(let c=0;c<e.length;c++)u.push(`${i[c]}`),c<t&&l.push(`${i[c]}`);r=l.join(),a=u.join()}const o=mt(s);this.userCode=`\n      void main() {\n        ${o} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${a}));\n        } else {\n          setOutput(getB(${a}));\n        }\n      }\n    `}}const LU={kernelName:xl,backendName:"webgl",kernelFunc:function PU(n){const{inputs:t,backend:e}=n,{condition:s,t:r,e:a}=t,o=new OU(s.shape.length,r.shape,r.shape.length);return e.runWebGLProgram(o,[s,r,a],Cn(r.dtype,a.dtype))}},MU=Qe({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${iu};\n  float scale = ${lu};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),zU={kernelName:yo,backendName:"webgl",kernelFunc:MU},WU=Qe({opSnippet:"if (isnan(x)) return x;\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:FM}),GU={kernelName:vo,backendName:"webgl",kernelFunc:WU},UU=Qe({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),HU={kernelName:wo,backendName:"webgl",kernelFunc:UU},qU=Qe({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),KU={kernelName:xo,backendName:"webgl",kernelFunc:qU},XU=Qe({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),YU={kernelName:bo,backendName:"webgl",kernelFunc:XU},ZU=Qe({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),JU={kernelName:Io,backendName:"webgl",kernelFunc:ZU},QU={kernelName:vl,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:a,paddings:o}=s;v(r.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const i=a.reduce((y,x)=>y*x),l=[[0,0]];l.push(...o);for(let y=1+a.length;y<r.shape.length;++y)l.push([0,0]);const u=[],c=Ww({inputs:{x:r},backend:e,attrs:{paddings:l,constantValue:0}}),h=Ko(c.shape,a,i,!1),d=Xo(h.length,a.length,!1),p=Yo(c.shape,a,i,!1),f=he({inputs:{x:c},backend:e,attrs:{shape:h}}),g=xn({inputs:{x:f},backend:e,attrs:{perm:d}}),m=he({inputs:{x:g},backend:e,attrs:{shape:p}});return u.push(c),u.push(f),u.push(g),u.forEach(y=>e.disposeIntermediateTensorInfo(y)),m}},tH={kernelName:Jc,backendName:"webgl",kernelFunc:function eH(n){const{inputs:t,backend:e}=n,{indices:s,values:r,denseShape:a,defaultValue:o}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=e.readSync(s.dataId),l=e.readSync(r.dataId),u=e.readSync(a.dataId),c=e.readSync(o.dataId)[0],[h,d,p,f,g]=PM(i,s.shape,s.dtype,l,r.dtype,u,c);return[e.makeTensorInfo(d,s.dtype,h),e.makeTensorInfo([d[0]],r.dtype,p),e.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(m=>Number(m)))),e.makeTensorInfo([g.length],s.dtype,new Int32Array(g))]}},sH={kernelName:Qc,backendName:"webgl",kernelFunc:function nH(n){const{inputs:t,backend:e}=n,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const o=Array.from(e.readSync(r.dataId)),i=e.readSync(s.dataId),l=Array.from(e.readSync(a.dataId)),[u,c,h]=LM(i,s.shape,s.dtype,o,l);return[e.makeTensorInfo(c,s.dtype,u),e.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}},aH={kernelName:eh,backendName:"webgl",kernelFunc:function rH(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const o=e.readSync(s.dataId),i=e.readSync(r.dataId),l=e.readSync(a.dataId),[u,c]=K0(o,s.shape,s.dtype,i,l,!0);return e.makeTensorInfo(c,s.dtype,u)}},iH={kernelName:th,backendName:"webgl",kernelFunc:function oH(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const o=e.readSync(s.dataId),i=e.readSync(r.dataId),l=e.readSync(a.dataId),[u,c]=K0(o,s.shape,s.dtype,i,l);return e.makeTensorInfo(c,s.dtype,u)}},uH={kernelName:Hf,backendName:"webgl",kernelFunc:function lH(n){const{inputs:t,backend:e,attrs:s}=n,{sparseIndices:r,sparseValues:a,defaultValue:o}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=Zo(0,r,i);if("string"===a.dtype){const y=e.bufferSync(r),x=e.bufferSync(a),b=Ws(e.readSync(o.dataId)[0]),w=RM(y,x,i,d,c,u,l,h,b,!1);return e.makeTensorInfo(i,w.dtype,w.values)}const f=new Uw(u,l,r.shape.length,a.shape.length,h,[d,1],!1),g=e.runWebGLProgram(f,[a,r,o],a.dtype),m=he({inputs:{x:g},backend:e,attrs:{shape:i}});return e.disposeIntermediateTensorInfo(g),m}},hH={kernelName:Il,backendName:"webgl",kernelFunc:function cH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{numOrSizeSplits:a,axis:o}=s,i=ve(o,r.shape)[0],l=Hd(r,a,i),c=new Array(r.shape.length).fill(0),h=r.shape.slice();return l.map(d=>{const p=[...h];p[i]=d;const f=_a({inputs:{x:r},backend:e,attrs:{begin:c,size:p}});return c[i]+=d,f})}},Hw="return sqrt(x);",dH=Qe({opSnippet:Hw,packedOpSnippet:Hw,cpuKernelImpl:VM}),pH={kernelName:So,backendName:"webgl",kernelFunc:dH},mH={kernelName:nh,backendName:"webgl",kernelFunc:Qe({opSnippet:"return x * x;"})},jw="return (a - b) * (a - b);",gH=rn({opSnippet:jw,packedOpSnippet:jw}),yH={kernelName:Co,backendName:"webgl",kernelFunc:gH},bH={kernelName:$o,backendName:"webgl",kernelFunc:function xH({inputs:n,attrs:t,backend:e}){const{x:s}=n,a=new Ns(s.shape,`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `);return e.runWebGLProgram(a,[s],s.dtype)}};class wH{constructor(t,e,s){this.variableNames=["x"],this.outputShape=s;const r=s.length,a=mt(s.length),o=mt(s.length);let i="";if(1===r)i="coords * strides + begin";else{let l=0;i=s.map((u,c)=>(l++,1===s.length?`coords * strides[${c}] + begin[${c}]`:`coords[${l-1}] * strides[${c}] + begin[${c}]`)).join(",")}this.userCode=`\n      ${a} begin = ${a}(${t});\n      ${a} strides = ${a}(${e});\n\n      void main() {\n        ${o} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const IH={kernelName:sh,backendName:"webgl",kernelFunc:function vH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:a,end:o,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s,{finalShapeSparse:p,finalShape:f,isIdentity:g,sliceDim0:m,isSimpleSlice:y,begin:x,end:b,strides:w}=Kh(r.shape,a,o,i,l,u,c,h,d);let I;if(g)I=he({inputs:{x:r},backend:e,attrs:{shape:f}});else if(m||y){v(r.shape.length>=1,()=>`Input must have rank at least 1, got: ${r.shape.length}`);const N=Hh(x,b,w),k=_a({inputs:{x:r},backend:e,attrs:{begin:x,size:N}});I=he({inputs:{x:k},backend:e,attrs:{shape:f}}),e.disposeIntermediateTensorInfo(k)}else if(e.shouldExecuteOnCPU([r])){const k=e.readSync(r.dataId),_=He(r.shape,r.dtype,k),$=MM(p,_,w,x);I=e.makeTensorInfo(f,r.dtype,$.values)}else{const k=new wH(x,w,p);I=e.runWebGLProgram(k,[r],r.dtype)}const S=he({inputs:{x:I},backend:e,attrs:{shape:f}});return e.disposeIntermediateTensorInfo(I),S}},CH={kernelName:rh,backendName:"webgl",kernelFunc:function SH(n){const{inputs:t,backend:e,attrs:s}=n,{separator:r,nGramWidths:a,leftPad:o,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=e.readSync(c.dataId),p=e.readSync(h.dataId),[f,g]=zM(d,p,r,a,o,i,l,u);return[e.makeTensorInfo([f.length],"string",f),e.makeTensorInfo(h.shape,"int32",g)]}},kH={kernelName:ah,backendName:"webgl",kernelFunc:function NH(n){const{inputs:t,backend:e,attrs:s}=n,{skipEmpty:r}=s,{input:a,delimiter:o}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=e.readSync(a.dataId),l=e.readSync(o.dataId)[0],[u,c,h]=BM(i,l,r),d=c.length;return[e.makeTensorInfo([d,2],"int32",u),e.makeTensorInfo([d],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(h))]}},_H={kernelName:oh,backendName:"webgl",kernelFunc:function TH(n){const{inputs:t,backend:e,attrs:s}=n,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const o=e.readSync(a.dataId),i=WM(o,r);return e.makeTensorInfo(a.shape,"int32",i)}},$H=Qe({opSnippet:"return tan(x);"}),EH={kernelName:ko,backendName:"webgl",kernelFunc:$H},DH=Qe({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),AH={kernelName:To,backendName:"webgl",kernelFunc:DH};class RH{constructor(t,e){this.variableNames=["A"];const s=new Array(t.length);for(let o=0;o<s.length;o++)s[o]=t[o]*e[o];this.outputShape=s,this.rank=s.length;const r=mt(this.rank),a=function FH(n){const t=n.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${n[0]})`;const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let r=0;r<n.length;r++)s.push(`imod(${e[r]}, ${n[r]})`);return s.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}function qw(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reps:a}=s;if("string"===r.dtype||r.shape.length>5){const l=e.readSync(r.dataId),u="string"===r.dtype?l.map(d=>Ws(d)):l,c=He(r.shape,r.dtype,u),h=UM(c,a);return e.makeTensorInfo(h.shape,h.dtype,h.values)}const o=new RH(r.shape,a);return e.runWebGLProgram(o,[r],r.dtype)}const OH={kernelName:_o,backendName:"webgl",kernelFunc:qw};class PH{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=t,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class LH{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=t,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function Wr(n,t){null!==t&&n.disposeIntermediateTensorInfo(t)}function Kw(n){let t=1;for(;t<n;)t*=2;return t}const MH={kernelName:ih,backendName:"webgl",kernelFunc:function VH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{k:a,sorted:o}=s,i=z().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=z().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=r.shape,c=u[u.length-1];if(e.shouldExecuteOnCPU([r])||c<i||a>l){const $=e.readSync(r.dataId),[L,B]=HM($,u,r.dtype,a,o);return[e.makeTensorInfo(L.shape,L.dtype,L.values),e.makeTensorInfo(B.shape,B.dtype,B.values)]}if(0===a)return u[u.length-1]=0,[e.makeTensorInfo(u,r.dtype,[]),e.makeTensorInfo(u,"int32",[])];if(1===c)return[r,Ci({attrs:{shape:u,dtype:"int32",value:0},backend:e})];const h=e.texData.get(r.dataId),d=null!==h&&h.isPacked,p=d?e.unpackTensor(r):r,g=E(u)/c,m=he({inputs:{x:p},attrs:{shape:[g,c]},backend:e});d&&Wr(e,p);const y=Kw(a),x=Kw(c);let b=null;const w=()=>null===b?[m,m]:[m,b],I=($,L,B)=>{const G=w(),H=new PH(B),Q=b;b=e.runWebGLProgram(H,G,"int32",[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[$],[L]]),Wr(e,Q)};for(let $=1;$<y;$*=2){const L=2*$;for(let B=$;B>=1;B/=2)I(L,B,[g,x])}for(let $=x;$>y;$/=2){const L=w(),B=new LH([g,$/2]),j=b;b=e.runWebGLProgram(B,L,"int32",[[c],[null===b?1:0],[y]]),Wr(e,j);const X=y/2,Q=2*X;for(let q=X;q>=1;q/=2)I(Q,q,b.shape)}let S=b;b=_a({inputs:{x:b},backend:e,attrs:{begin:0,size:[g,a]}}),Wr(e,S);let N=Ow({inputs:{x:m,indices:b},backend:e,attrs:{axis:1,batchDims:1}});Wr(e,m);const k=u.slice(0,-1);k.push(a),S=b,b=he({inputs:{x:b},attrs:{shape:k},backend:e}),Wr(e,S);const _=N;return N=he({inputs:{x:N},attrs:{shape:k},backend:e}),Wr(e,_),[N,b]}};class zH{constructor(t,e,s,r,a,o){this.variableNames=["Image","Transforms"],this.outputShape=o;const i="nearest"===s?1:2;let l;switch(r){case"constant":default:l=1;break;case"reflect":l=2;break;case"wrap":l=3;break;case"nearest":l=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${l} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${l} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${l} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${a});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${a});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${e}));\n                float mapY = mapCoord(inY, float(${t}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const WH={kernelName:lh,backendName:"webgl",kernelFunc:function BH(n){const{inputs:t,backend:e,attrs:s}=n,{image:r,transforms:a}=t,{interpolation:o,fillMode:i,fillValue:l,outputShape:u}=s,[c,h,d,p]=r.shape,[f,g]=null!=u?u:[h,d],y=new zH(h,d,o,i,l,[c,f,g,p]);return e.runWebGLProgram(y,[r,a],"float32")}},UH={kernelName:uh,backendName:"webgl",kernelFunc:function GH(n){const{inputs:t,attrs:e,backend:s}=n,{axis:r}=e,{x:a}=t;gi(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const o=s.readSync(a.dataId),{outputValues:i,outputShape:l,indices:u}=jM(o,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}},jH={kernelName:Cl,backendName:"webgl",kernelFunc:function HH(n){const{inputs:t,backend:e,attrs:s}=n,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const o=r,i=o.shape.length,l=r.shape[a],u=new Array(i-1);let c=0;for(let g=0;g<i;g++)g!==a&&(u[c++]=o.shape[g]);const h=[],d=new Array(i).fill(0),p=o.shape.slice();p[a]=1;const f=new Array(l);for(let g=0;g<f.length;g++){d[a]=g;const m=_a({inputs:{x:o},backend:e,attrs:{begin:d,size:p}}),y=he({inputs:{x:m},backend:e,attrs:{shape:u}});f[g]=y,h.push(m)}return h.forEach(g=>e.disposeIntermediateTensorInfo(g)),f}};class qH{constructor(t,e){this.variableNames=["x","segmentIds"];const s=t.windowSize,r=t.batchSize,a=t.inSize,o=t.numSegments,i=o*Math.ceil(a/s);this.outputShape=[r,i];const c=4*Math.floor(s/4),h=s%4,d="\n        sumValue += dot(values, segFilter);\n    ";let p="";a%s>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `);let f="";a%s>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${f}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${o})) * float(${s}));\n        int currentSeg = int(mod(float(outIdx), float(${o})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${d}\n        } else if (${2===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${d}\n        } else if (${3===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${d}\n        }\n        setOutput(sumValue);\n      }\n    `}}const YH=[z3,W3,H3,K3,Y3,Q3,tz,sz,iz,uz,dz,mz,xz,Iz,Nz,Tz,$z,Rz,Oz,Lz,zz,jz,Kz,Yz,tB,sB,iB,S3,cB,mB,bB,NB,TB,$B,DB,RB,PB,VB,zB,WB,UB,jB,XB,ZB,tW,sW,oW,uW,hW,pW,gW,xW,vW,SW,CW,kW,_W,EW,AW,FW,PW,MW,WW,UW,qW,YW,JW,e4,I3,n4,pB,r4,o4,l4,N3,c4,d4,f4,y4,w4,I4,C4,k4,$4,D4,R4,L4,M4,B4,H4,q4,X4,Z4,Q4,sG,oG,cG,gG,_3,wG,SG,kG,$G,Zz,DG,RG,OG,VG,WG,T3,UG,jG,KG,YG,ZG,Jz,dG,QG,nU,aU,E3,uU,dU,gU,bU,SU,NU,TU,$U,DU,FU,LU,zU,GU,HU,KU,YU,Hz,fG,JU,QU,tH,sH,aH,iH,uH,hH,pH,mH,yH,bH,IH,CH,kH,_H,pG,L3,EH,AH,OH,MH,WH,V3,UH,jH,{kernelName:Nl,backendName:"webgl",kernelFunc:function KH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,segmentIds:a}=t,{numSegments:o}=s,i=r.shape.length,l=[];let u=0;const c=Ct([u],i);let h=r;null!=c&&(h=xn({inputs:{x:r},backend:e,attrs:{perm:c}}),l.push(h),u=Vt(1,i)[0]);const d=Xg(h.shape,u,o),p=E([h.shape[u]]),f=he({inputs:{x:h},backend:e,attrs:{shape:[-1,p]}});l.push(f);const g=xh(r.dtype),m=(w,I,S,N,k)=>{const _=w.shape[0],$=w.shape[1],L=Kg($,k),G=new qH({windowSize:L,inSize:$,batchSize:_,numSegments:k},I),H=e.compileAndRun(G,[w,S],N);if(l.push(H),H.shape[1]===k)return H;const j=Gw({backend:e,attrs:{start:0,stop:k,step:1,dtype:"float32"}}),X=qw({inputs:{x:j},backend:e,attrs:{reps:[$/L]}});return l.push(j),l.push(X),m(H,I,X,N,k)},x=he({inputs:{x:m(f,"unsortedSegmentSum",a,g,o)},backend:e,attrs:{shape:d}});let b=x;if(null!=c){l.push(x);const w=Ks(c);b=xn({inputs:{x:b},backend:e,attrs:{perm:w}})}return l.forEach(w=>e.disposeIntermediateTensorInfo(w)),b}},AG];for(const n of YH)fh(n);var ke=te(2096),JH=te(6536),QH=te(7688);const ej=["iptUpload"],tj=["canvasCon"],nj=["appCon"],sj=["loadingCon"],rj=["hideImage"],aj=["imgPredict"],oj=[{path:"",component:(()=>{class n{constructor(){}ngAfterViewInit(){(function H2(n,t){return kp.apply(this,arguments)})("./assets/data/draft/model/my-model.json").then(e=>{this.model=e,this.appCon.nativeElement.className="",this.loadingCon.nativeElement.className="hide"}),this.initCanvas()}initCanvas(){let e=this.canvasCon.nativeElement;this.draw=new me.Z(e,256,256,{style:{borderStyle:"solid",borderColor:"none"},backgroundColor:"white",strokeColor:"#333333",strokeWeight:4}),this.canvas=e.querySelector("canvas"),this.ctx=this.canvas.getContext("2d"),this.ctx?this.ctx.strokeStyle="#333333":console.warn("no content 2d")}onHideImgLoad(){M(()=>{let e=W1(this.hideImage.nativeElement,1),s=Ys.resizeBilinear(e.asType("float32"),[32,32]);this.model.predict(As([s])).array().then(a=>{let i=0,l=0;a[0].forEach((u,c)=>{u>i&&(i=u,l=c)}),this.imgPredict.nativeElement.src=`./assets/data/draft/images/${l}.jpg`})})}predict(){this.model&&(this.hideImage.nativeElement.src=this.canvas.toDataURL())}clearCanvas(){this.draw&&this.draw.reset()}clickUploadBtn(){this.iptUpload.nativeElement.click()}uploadImage(e){let s=new Image;s.src=URL.createObjectURL(e.target.files[0]),s.onload=()=>{if(this.canvas){let r=this.canvas.getContext("2d");r&&r.drawImage(s,0,0,256,256)}}}}return n.\u0275fac=function(e){return new(e||n)},n.\u0275cmp=ke.Xpm({type:n,selectors:[["mds-draft"]],viewQuery:function(e,s){if(1&e&&(ke.Gf(ej,5),ke.Gf(tj,5),ke.Gf(nj,5),ke.Gf(sj,5),ke.Gf(rj,5),ke.Gf(aj,5)),2&e){let r;ke.iGM(r=ke.CRH())&&(s.iptUpload=r.first),ke.iGM(r=ke.CRH())&&(s.canvasCon=r.first),ke.iGM(r=ke.CRH())&&(s.appCon=r.first),ke.iGM(r=ke.CRH())&&(s.loadingCon=r.first),ke.iGM(r=ke.CRH())&&(s.hideImage=r.first),ke.iGM(r=ke.CRH())&&(s.imgPredict=r.first)}},decls:31,vars:0,consts:[["loadingCon",""],[1,"hide"],["appCon",""],["primary","Webex AI Draft","secondary","Draw a draft or upload an image to search Momentum icons.\n        <br>Currenttly we only test momentum <a target='_blank' href='https://www.figma.com/file/SXK8Gb5tMlN9xiG2cC4OBu/Assets---Icon-Library?node-id=1001%3A2553'>Presence icon</a>","className","middle"],[1,"canvas"],["canvasCon",""],[1,"hide",3,"load"],["hideImage",""],["type","file","accept","image/png, image/jpeg",1,"hide",3,"change"],["iptUpload",""],[1,"list-con"],[1,"button-blue",3,"click"],[1,"button-orange",3,"click"],[1,"button-red",3,"click"],["primary","Result","secondary","Select the right answer to help us to improve the AI model.","className","small"],["imgPredict",""],["primary","Other Results","className","small"],[1,"button-green"]],template:function(e,s){1&e&&(ke.TgZ(0,"div",null,0),ke._uU(2,"Loading "),ke.qZA(),ke.TgZ(3,"div",1,2)(5,"webex-con"),ke._UZ(6,"webex-description",3)(7,"div",4,5),ke.TgZ(9,"img",6,7),ke.NdJ("load",function(){return s.onHideImgLoad()}),ke.qZA(),ke.TgZ(11,"input",8,9),ke.NdJ("change",function(a){return s.uploadImage(a)}),ke.qZA(),ke.TgZ(13,"div",10)(14,"button",11),ke.NdJ("click",function(){return s.clearCanvas()}),ke._uU(15,"clear canvas"),ke.qZA(),ke.TgZ(16,"button",12),ke.NdJ("click",function(){return s.clickUploadBtn()}),ke._uU(17,"upload JPG/PNG"),ke.qZA(),ke.TgZ(18,"button",13),ke.NdJ("click",function(){return s.predict()}),ke._uU(19,"Predict"),ke.qZA()(),ke._UZ(20,"webex-description",14),ke.TgZ(21,"div",10),ke._UZ(22,"img",null,15),ke.qZA(),ke._UZ(24,"webex-description",16),ke.TgZ(25,"div",10)(26,"a"),ke._uU(27,"..."),ke.qZA()(),ke.TgZ(28,"div",10)(29,"button",17),ke._uU(30,"This is what I need!"),ke.qZA()()()())},dependencies:[JH.J,QH.w],styles:["[_nghost-%COMP%]{display:block;height:auto;line-height:auto;width:100%;overflow:hidden;margin-bottom:10rem}[_nghost-%COMP%]   a[_ngcontent-%COMP%]{cursor:pointer}webex-description[_ngcontent-%COMP%]{margin-top:2rem}.canvas[_ngcontent-%COMP%]{margin-top:1rem}.canvas[_ngcontent-%COMP%]   canvas[_ngcontent-%COMP%]{display:block;height:256px;line-height:256px;width:256px;box-shadow:0 0 1px 1px #fff3}.list-con[_ngcontent-%COMP%]{margin-top:2rem}.list-con[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{display:inline-block;height:64px;line-height:64px;width:64px;border:none}"]}),n})()}];let ij=(()=>{class n{}return n.\u0275fac=function(e){return new(e||n)},n.\u0275mod=ke.oAB({type:n}),n.\u0275inj=ke.cJS({imports:[ze.Bz.forChild(oj),ze.Bz]}),n})(),lj=(()=>{class n{}return n.\u0275fac=function(e){return new(e||n)},n.\u0275mod=ke.oAB({type:n}),n.\u0275inj=ke.cJS({imports:[$e.ez,_e.Le,_e.EY,ij]}),n})()},3808:(Xe,Oe,te)=>{"use strict";Object.defineProperty(Oe,"__esModule",{value:!0}),Oe.default=void 0;var Te=te(2348);function $e(W,U){(null==U||U>W.length)&&(U=W.length);for(var Z=0,Y=new Array(U);Z<U;Z++)Y[Z]=W[Z];return Y}function me(W,U){if(!(W instanceof U))throw new TypeError("Cannot call a class as a function")}function V(W,U){for(var Z=0;Z<U.length;Z++){var Y=U[Z];Y.enumerable=Y.enumerable||!1,Y.configurable=!0,"value"in Y&&(Y.writable=!0),Object.defineProperty(W,Y.key,Y)}}function A(W,U,Z){return U&&V(W.prototype,U),Z&&V(W,Z),W}Oe.default=function(){function W(U,Z,Y){var De=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},Ye=De.style,Ae=void 0===Ye?{touchAction:"none"}:Ye,vt=De.backgroundColor,It=void 0===vt?"cyan":vt,Ke=De.strokeColor,et=void 0===Ke?"black":Ke,tt=De.strokeWeight,v=void 0===tt?15:tt;me(this,W),this.canvas=document.createElement("canvas"),this.canvas.width=Z,this.canvas.height=Y,this.canvas.style.backgroundColor=It,this.setCanvasStyle(Ae),U.appendChild(this.canvas),this.ctx=this.canvas.getContext("2d"),this.strokeColor=et,this.strokeWeight=v,this.drawing=[{color:et,strokeWeight:v,points:[]}],this.height=Y,this.width=Z,this.setupEventListeners()}return A(W,null,[{key:"getPixelArray",value:function(Z){var Y=Z.canvas;return Z.getImageData(0,0,Y.width,Y.height).data}},{key:"getGreyScalePixelArray",value:function(Z){return W.getPixelArray(Z).filter(function(Ye,Ae){return(Ae+1)%4==0})}},{key:"getPixelMatrix",value:function(Z){var Y=Z.canvas.width,De=W.getGreyScalePixelArray(Z);return(0,Te.chunkArray)(De,Y)}}]),A(W,[{key:"changeStrokeColor",value:function(Z){this.strokeColor=Z}},{key:"changeBackgroundColor",value:function(Z){this.canvas.style.backgroundColor=Z}},{key:"changeStrokeWeight",value:function(Z){this.strokeWeight=Z}},{key:"setCanvasStyle",value:function(Z){var Y=this;Object.entries(Z).forEach(function(De){var Ye=function ot(W,U){return function ze(W){if(Array.isArray(W))return W}(W)||function _e(W,U){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(W)){var Z=[],Y=!0,De=!1,Ye=void 0;try{for(var vt,Ae=W[Symbol.iterator]();!(Y=(vt=Ae.next()).done)&&(Z.push(vt.value),!U||Z.length!==U);Y=!0);}catch(It){De=!0,Ye=It}finally{try{!Y&&null!=Ae.return&&Ae.return()}finally{if(De)throw Ye}}return Z}}(W,U)||function qe(W,U){if(W){if("string"==typeof W)return $e(W,U);var Z=Object.prototype.toString.call(W).slice(8,-1);if("Object"===Z&&W.constructor&&(Z=W.constructor.name),"Map"===Z||"Set"===Z)return Array.from(W);if("Arguments"===Z||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(Z))return $e(W,U)}}(W,U)||function Ie(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(De,2);Y.canvas.style[Ye[0]]=Ye[1]})}},{key:"getDrawing",value:function(){return this.drawing}},{key:"downloadPNG",value:function(){var Z=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"canvas.png",Y=this.canvas.toDataURL("image/png");(0,Te.downloadURI)(Y,Z)}},{key:"setupEventListeners",value:function(){this.canvas.addEventListener("pointermove",this.onPointerMove.bind(this)),window.addEventListener("pointerdown",this.onPointerDown.bind(this)),window.addEventListener("pointerup",this.onPointerUp.bind(this))}},{key:"onPointerMove",value:function(Z){this.pointerIsDown&&(this.drawing[this.drawing.length-1].points.push({x:Z.offsetX,y:Z.offsetY}),this.draw())}},{key:"onPointerDown",value:function(){this.pointerIsDown=!0,this.drawing[this.drawing.length-1].strokeWeight=this.strokeWeight,this.drawing[this.drawing.length-1].color=this.strokeColor}},{key:"onPointerUp",value:function(){this.drawing[this.drawing.length-1].points.length>0&&this.drawing.push({color:this.strokeColor,strokeWeight:this.strokeWeight,points:[]}),this.pointerIsDown=!1}},{key:"getPixelArray",value:function(){return this.ctx.getImageData(0,0,this.width,this.height).data}},{key:"getGreyScalePixelArray",value:function(){return this.getPixelArray().filter(function(De,Ye){return(Ye+1)%4==0})}},{key:"reset",value:function(){this.drawing=[{color:this.strokeColor,strokeWeight:this.strokeWeight,points:[]}],this.clearCanvas()}},{key:"clearCanvas",value:function(){this.ctx.clearRect(0,0,this.width,this.height)}},{key:"draw",value:function(){var Z=this;this.clearCanvas(),this.drawing.forEach(function(Y){Z.drawStroke(Y)})}},{key:"drawLinePoint",value:function(Z,Y){this.ctx.beginPath(),this.ctx.arc(Z.x,Z.y,Y/2,0,2*Math.PI,!0),this.ctx.closePath(),this.ctx.fill()}},{key:"drawStroke",value:function(Z){var Y=Z.points,De=Z.color,Ye=Z.strokeWeight;if(this.ctx.strokeStyle=De,this.ctx.fillStyle=De,this.ctx.lineWidth=Ye,0!==Y.length){if(Y.length<6)return void this.drawLinePoint(Y[0]);var Ae;for(this.ctx.beginPath(),this.ctx.moveTo(Y[0].x,Y[0].y),Ae=1;Ae<Y.length-2;Ae+=1)this.ctx.quadraticCurveTo(Y[Ae].x,Y[Ae].y,(Y[Ae].x+Y[Ae+1].x)/2,(Y[Ae].y+Y[Ae+1].y)/2);this.ctx.quadraticCurveTo(Y[Ae].x,Y[Ae].y,Y[Ae+1].x,Y[Ae+1].y),this.ctx.stroke(),this.drawLinePoint(Y[Y.length-1],Ye)}}}]),W}()},7805:(Xe,Oe,te)=>{"use strict";Oe.Z=void 0;var ot=function Ie($e){return $e&&$e.__esModule?$e:{default:$e}}(te(3808));Oe.Z=ot.default},2348:(Xe,Oe)=>{"use strict";Object.defineProperty(Oe,"__esModule",{value:!0}),Oe.chunkArray=function te(ot,Ie){for(var qe=[],$e=0;$e<ot.length;)qe.push(ot.slice($e,Ie+$e)),$e+=Ie;return qe},Oe.downloadURI=function Te(ot,Ie){var qe=document.createElement("a");qe.download=Ie,qe.href=ot,document.body.appendChild(qe),qe.click(),document.body.removeChild(qe)}},7658:Xe=>{Xe.exports=te;var Oe=null;try{Oe=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(J){}function te(J,T,E){this.low=0|J,this.high=0|T,this.unsigned=!!E}function Te(J){return!0===(J&&J.__isLong__)}Object.defineProperty(te.prototype,"__isLong__",{value:!0}),te.isLong=Te;var ot={},Ie={};function qe(J,T){var E,Le,ye;return T?(ye=0<=(J>>>=0)&&J<256)&&(Le=Ie[J])?Le:(E=_e(J,(0|J)<0?-1:0,!0),ye&&(Ie[J]=E),E):(ye=-128<=(J|=0)&&J<128)&&(Le=ot[J])?Le:(E=_e(J,J<0?-1:0,!1),ye&&(ot[J]=E),E)}function $e(J,T){if(isNaN(J))return T?Ye:De;if(T){if(J<0)return Ye;if(J>=U)return et}else{if(J<=-Z)return tt;if(J+1>=Z)return Ke}return J<0?$e(-J,T).neg():_e(J%W|0,J/W|0,T)}function _e(J,T,E){return new te(J,T,E)}te.fromInt=qe,te.fromNumber=$e,te.fromBits=_e;var ze=Math.pow;function me(J,T,E){if(0===J.length)throw Error("empty string");if("NaN"===J||"Infinity"===J||"+Infinity"===J||"-Infinity"===J)return De;if("number"==typeof T?(E=T,T=!1):T=!!T,(E=E||10)<2||36<E)throw RangeError("radix");var Le;if((Le=J.indexOf("-"))>0)throw Error("interior hyphen");if(0===Le)return me(J.substring(1),T,E).neg();for(var ye=$e(ze(E,8)),Be=De,it=0;it<J.length;it+=8){var _t=Math.min(8,J.length-it),qt=parseInt(J.substring(it,it+_t),E);if(_t<8){var $t=$e(ze(E,_t));Be=Be.mul($t).add($e(qt))}else Be=(Be=Be.mul(ye)).add($e(qt))}return Be.unsigned=T,Be}function V(J,T){return"number"==typeof J?$e(J,T):"string"==typeof J?me(J,T):_e(J.low,J.high,"boolean"==typeof T?T:J.unsigned)}te.fromString=me,te.fromValue=V;var W=4294967296,U=W*W,Z=U/2,Y=qe(1<<24),De=qe(0);te.ZERO=De;var Ye=qe(0,!0);te.UZERO=Ye;var Ae=qe(1);te.ONE=Ae;var vt=qe(1,!0);te.UONE=vt;var It=qe(-1);te.NEG_ONE=It;var Ke=_e(-1,2147483647,!1);te.MAX_VALUE=Ke;var et=_e(-1,-1,!0);te.MAX_UNSIGNED_VALUE=et;var tt=_e(0,-2147483648,!1);te.MIN_VALUE=tt;var v=te.prototype;v.toInt=function(){return this.unsigned?this.low>>>0:this.low},v.toNumber=function(){return this.unsigned?(this.high>>>0)*W+(this.low>>>0):this.high*W+(this.low>>>0)},v.toString=function(T){if((T=T||10)<2||36<T)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(tt)){var E=$e(T),Le=this.div(E),ye=Le.mul(E).sub(this);return Le.toString(T)+ye.toInt().toString(T)}return"-"+this.neg().toString(T)}for(var Be=$e(ze(T,6),this.unsigned),it=this,_t="";;){var qt=it.div(Be),Et=(it.sub(qt.mul(Be)).toInt()>>>0).toString(T);if((it=qt).isZero())return Et+_t;for(;Et.length<6;)Et="0"+Et;_t=""+Et+_t}},v.getHighBits=function(){return this.high},v.getHighBitsUnsigned=function(){return this.high>>>0},v.getLowBits=function(){return this.low},v.getLowBitsUnsigned=function(){return this.low>>>0},v.getNumBitsAbs=function(){if(this.isNegative())return this.eq(tt)?64:this.neg().getNumBitsAbs();for(var T=0!=this.high?this.high:this.low,E=31;E>0&&0==(T&1<<E);E--);return 0!=this.high?E+33:E+1},v.isZero=function(){return 0===this.high&&0===this.low},v.eqz=v.isZero,v.isNegative=function(){return!this.unsigned&&this.high<0},v.isPositive=function(){return this.unsigned||this.high>=0},v.isOdd=function(){return 1==(1&this.low)},v.isEven=function(){return 0==(1&this.low)},v.equals=function(T){return Te(T)||(T=V(T)),(this.unsigned===T.unsigned||this.high>>>31!=1||T.high>>>31!=1)&&this.high===T.high&&this.low===T.low},v.eq=v.equals,v.notEquals=function(T){return!this.eq(T)},v.neq=v.notEquals,v.ne=v.notEquals,v.lessThan=function(T){return this.comp(T)<0},v.lt=v.lessThan,v.lessThanOrEqual=function(T){return this.comp(T)<=0},v.lte=v.lessThanOrEqual,v.le=v.lessThanOrEqual,v.greaterThan=function(T){return this.comp(T)>0},v.gt=v.greaterThan,v.greaterThanOrEqual=function(T){return this.comp(T)>=0},v.gte=v.greaterThanOrEqual,v.ge=v.greaterThanOrEqual,v.compare=function(T){if(Te(T)||(T=V(T)),this.eq(T))return 0;var E=this.isNegative(),Le=T.isNegative();return E&&!Le?-1:!E&&Le?1:this.unsigned?T.high>>>0>this.high>>>0||T.high===this.high&&T.low>>>0>this.low>>>0?-1:1:this.sub(T).isNegative()?-1:1},v.comp=v.compare,v.negate=function(){return!this.unsigned&&this.eq(tt)?tt:this.not().add(Ae)},v.neg=v.negate,v.add=function(T){Te(T)||(T=V(T));var Et=0,bn=0,ve=0,Ft=0;return ve+=(Ft+=(65535&this.low)+(65535&T.low))>>>16,bn+=(ve+=(this.low>>>16)+(T.low>>>16))>>>16,Et+=(bn+=(65535&this.high)+(65535&T.high))>>>16,Et+=(this.high>>>16)+(T.high>>>16),_e((ve&=65535)<<16|(Ft&=65535),(Et&=65535)<<16|(bn&=65535),this.unsigned)},v.subtract=function(T){return Te(T)||(T=V(T)),this.add(T.neg())},v.sub=v.subtract,v.multiply=function(T){if(this.isZero())return De;if(Te(T)||(T=V(T)),Oe)return _e(Oe.mul(this.low,this.high,T.low,T.high),Oe.get_high(),this.unsigned);if(T.isZero())return De;if(this.eq(tt))return T.isOdd()?tt:De;if(T.eq(tt))return this.isOdd()?tt:De;if(this.isNegative())return T.isNegative()?this.neg().mul(T.neg()):this.neg().mul(T).neg();if(T.isNegative())return this.mul(T.neg()).neg();if(this.lt(Y)&&T.lt(Y))return $e(this.toNumber()*T.toNumber(),this.unsigned);var ye=65535&this.high,Be=this.low>>>16,it=65535&this.low,qt=65535&T.high,$t=T.low>>>16,Et=65535&T.low,bn=0,ve=0,Ft=0,Dt=0;return Ft+=(Dt+=it*Et)>>>16,ve+=(Ft+=Be*Et)>>>16,Ft&=65535,ve+=(Ft+=it*$t)>>>16,bn+=(ve+=ye*Et)>>>16,ve&=65535,bn+=(ve+=Be*$t)>>>16,ve&=65535,bn+=(ve+=it*qt)>>>16,bn+=(this.high>>>16)*Et+ye*$t+Be*qt+it*(T.high>>>16),_e((Ft&=65535)<<16|(Dt&=65535),(bn&=65535)<<16|(ve&=65535),this.unsigned)},v.mul=v.multiply,v.divide=function(T){if(Te(T)||(T=V(T)),T.isZero())throw Error("division by zero");var Le,ye,Be;if(Oe)return this.unsigned||-2147483648!==this.high||-1!==T.low||-1!==T.high?_e((this.unsigned?Oe.div_u:Oe.div_s)(this.low,this.high,T.low,T.high),Oe.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?Ye:De;if(this.unsigned){if(T.unsigned||(T=T.toUnsigned()),T.gt(this))return Ye;if(T.gt(this.shru(1)))return vt;Be=Ye}else{if(this.eq(tt))return T.eq(Ae)||T.eq(It)?tt:T.eq(tt)?Ae:(Le=this.shr(1).div(T).shl(1)).eq(De)?T.isNegative()?Ae:It:(ye=this.sub(T.mul(Le)),Be=Le.add(ye.div(T)));if(T.eq(tt))return this.unsigned?Ye:De;if(this.isNegative())return T.isNegative()?this.neg().div(T.neg()):this.neg().div(T).neg();if(T.isNegative())return this.div(T.neg()).neg();Be=De}for(ye=this;ye.gte(T);){Le=Math.max(1,Math.floor(ye.toNumber()/T.toNumber()));for(var _t=Math.ceil(Math.log(Le)/Math.LN2),qt=_t<=48?1:ze(2,_t-48),$t=$e(Le),Et=$t.mul(T);Et.isNegative()||Et.gt(ye);)Et=($t=$e(Le-=qt,this.unsigned)).mul(T);$t.isZero()&&($t=Ae),Be=Be.add($t),ye=ye.sub(Et)}return Be},v.div=v.divide,v.modulo=function(T){return Te(T)||(T=V(T)),Oe?_e((this.unsigned?Oe.rem_u:Oe.rem_s)(this.low,this.high,T.low,T.high),Oe.get_high(),this.unsigned):this.sub(this.div(T).mul(T))},v.mod=v.modulo,v.rem=v.modulo,v.not=function(){return _e(~this.low,~this.high,this.unsigned)},v.and=function(T){return Te(T)||(T=V(T)),_e(this.low&T.low,this.high&T.high,this.unsigned)},v.or=function(T){return Te(T)||(T=V(T)),_e(this.low|T.low,this.high|T.high,this.unsigned)},v.xor=function(T){return Te(T)||(T=V(T)),_e(this.low^T.low,this.high^T.high,this.unsigned)},v.shiftLeft=function(T){return Te(T)&&(T=T.toInt()),0==(T&=63)?this:T<32?_e(this.low<<T,this.high<<T|this.low>>>32-T,this.unsigned):_e(0,this.low<<T-32,this.unsigned)},v.shl=v.shiftLeft,v.shiftRight=function(T){return Te(T)&&(T=T.toInt()),0==(T&=63)?this:T<32?_e(this.low>>>T|this.high<<32-T,this.high>>T,this.unsigned):_e(this.high>>T-32,this.high>=0?0:-1,this.unsigned)},v.shr=v.shiftRight,v.shiftRightUnsigned=function(T){if(Te(T)&&(T=T.toInt()),0==(T&=63))return this;var E=this.high;return T<32?_e(this.low>>>T|E<<32-T,E>>>T,this.unsigned):_e(32===T?E:E>>>T-32,0,this.unsigned)},v.shru=v.shiftRightUnsigned,v.shr_u=v.shiftRightUnsigned,v.toSigned=function(){return this.unsigned?_e(this.low,this.high,!1):this},v.toUnsigned=function(){return this.unsigned?this:_e(this.low,this.high,!0)},v.toBytes=function(T){return T?this.toBytesLE():this.toBytesBE()},v.toBytesLE=function(){var T=this.high,E=this.low;return[255&E,E>>>8&255,E>>>16&255,E>>>24,255&T,T>>>8&255,T>>>16&255,T>>>24]},v.toBytesBE=function(){var T=this.high,E=this.low;return[T>>>24,T>>>16&255,T>>>8&255,255&T,E>>>24,E>>>16&255,E>>>8&255,255&E]},te.fromBytes=function(T,E,Le){return Le?te.fromBytesLE(T,E):te.fromBytesBE(T,E)},te.fromBytesLE=function(T,E){return new te(T[0]|T[1]<<8|T[2]<<16|T[3]<<24,T[4]|T[5]<<8|T[6]<<16|T[7]<<24,E)},te.fromBytesBE=function(T,E){return new te(T[4]<<24|T[5]<<16|T[6]<<8|T[7],T[0]<<24|T[1]<<16|T[2]<<8|T[3],E)}},340:(Xe,Oe,te)=>{var Te=te(9471),ot=te(2992),Ie=te(7657),qe=te(5583),$e=te(1929),_e=te(8083),ze=te(3818);ze.alea=Te,ze.xor128=ot,ze.xorwow=Ie,ze.xorshift7=qe,ze.xor4096=$e,ze.tychei=_e,Xe.exports=ze},9471:function(Xe,Oe,te){var Te;!function(ot,Ie,qe){function $e(V){var A=this,ce=function me(){var V=4022871197;return function(ce){ce=String(ce);for(var W=0;W<ce.length;W++){var U=.02519603282416938*(V+=ce.charCodeAt(W));U-=V=U>>>0,V=(U*=V)>>>0,V+=4294967296*(U-=V)}return 2.3283064365386963e-10*(V>>>0)}}();A.next=function(){var W=2091639*A.s0+2.3283064365386963e-10*A.c;return A.s0=A.s1,A.s1=A.s2,A.s2=W-(A.c=0|W)},A.c=1,A.s0=ce(" "),A.s1=ce(" "),A.s2=ce(" "),A.s0-=ce(V),A.s0<0&&(A.s0+=1),A.s1-=ce(V),A.s1<0&&(A.s1+=1),A.s2-=ce(V),A.s2<0&&(A.s2+=1),ce=null}function _e(V,A){return A.c=V.c,A.s0=V.s0,A.s1=V.s1,A.s2=V.s2,A}function ze(V,A){var ce=new $e(V),W=A&&A.state,U=ce.next;return U.int32=function(){return 4294967296*ce.next()|0},U.double=function(){return U()+11102230246251565e-32*(2097152*U()|0)},U.quick=U,W&&("object"==typeof W&&_e(W,ce),U.state=function(){return _e(ce,{})}),U}Ie&&Ie.exports?Ie.exports=ze:te.amdD&&te.amdO?void 0!==(Te=function(){return ze}.call(Oe,te,Oe,Ie))&&(Ie.exports=Te):this.alea=ze}(0,Xe=te.nmd(Xe))},8083:function(Xe,Oe,te){var Te;!function(ot,Ie,qe){function $e(me){var V=this,A="";V.next=function(){var W=V.b,U=V.c,Z=V.d,Y=V.a;return W=W<<25^W>>>7^U,U=U-Z|0,Z=Z<<24^Z>>>8^Y,Y=Y-W|0,V.b=W=W<<20^W>>>12^U,V.c=U=U-Z|0,V.d=Z<<16^U>>>16^Y,V.a=Y-W|0},V.a=0,V.b=0,V.c=-1640531527,V.d=1367130551,me===Math.floor(me)?(V.a=me/4294967296|0,V.b=0|me):A+=me;for(var ce=0;ce<A.length+20;ce++)V.b^=0|A.charCodeAt(ce),V.next()}function _e(me,V){return V.a=me.a,V.b=me.b,V.c=me.c,V.d=me.d,V}function ze(me,V){var A=new $e(me),ce=V&&V.state,W=function(){return(A.next()>>>0)/4294967296};return W.double=function(){do{var Y=((A.next()>>>11)+(A.next()>>>0)/4294967296)/(1<<21)}while(0===Y);return Y},W.int32=A.next,W.quick=W,ce&&("object"==typeof ce&&_e(ce,A),W.state=function(){return _e(A,{})}),W}Ie&&Ie.exports?Ie.exports=ze:te.amdD&&te.amdO?void 0!==(Te=function(){return ze}.call(Oe,te,Oe,Ie))&&(Ie.exports=Te):this.tychei=ze}(0,Xe=te.nmd(Xe))},2992:function(Xe,Oe,te){var Te;!function(ot,Ie,qe){function $e(me){var V=this,A="";V.x=0,V.y=0,V.z=0,V.w=0,V.next=function(){var W=V.x^V.x<<11;return V.x=V.y,V.y=V.z,V.z=V.w,V.w^=V.w>>>19^W^W>>>8},me===(0|me)?V.x=me:A+=me;for(var ce=0;ce<A.length+64;ce++)V.x^=0|A.charCodeAt(ce),V.next()}function _e(me,V){return V.x=me.x,V.y=me.y,V.z=me.z,V.w=me.w,V}function ze(me,V){var A=new $e(me),ce=V&&V.state,W=function(){return(A.next()>>>0)/4294967296};return W.double=function(){do{var Y=((A.next()>>>11)+(A.next()>>>0)/4294967296)/(1<<21)}while(0===Y);return Y},W.int32=A.next,W.quick=W,ce&&("object"==typeof ce&&_e(ce,A),W.state=function(){return _e(A,{})}),W}Ie&&Ie.exports?Ie.exports=ze:te.amdD&&te.amdO?void 0!==(Te=function(){return ze}.call(Oe,te,Oe,Ie))&&(Ie.exports=Te):this.xor128=ze}(0,Xe=te.nmd(Xe))},1929:function(Xe,Oe,te){var Te;!function(ot,Ie,qe){function $e(me){var V=this;V.next=function(){var Z,Y,ce=V.w,W=V.X,U=V.i;return V.w=ce=ce+1640531527|0,Y=W[U+34&127],Z=W[U=U+1&127],Y^=Y<<13,Z^=Z<<17,Y=W[U]=(Y^=Y>>>15)^(Z^=Z>>>12),V.i=U,Y+(ce^ce>>>16)|0},function A(ce,W){var U,Z,Y,De,Ye,Ae=[],vt=128;for(W===(0|W)?(Z=W,W=null):(W+="\0",Z=0,vt=Math.max(vt,W.length)),Y=0,De=-32;De<vt;++De)W&&(Z^=W.charCodeAt((De+32)%W.length)),0===De&&(Ye=Z),Z^=Z<<10,Z^=Z>>>15,Z^=Z<<4,Z^=Z>>>13,De>=0&&(Y=0==(U=Ae[127&De]^=Z+(Ye=Ye+1640531527|0))?Y+1:0);for(Y>=128&&(Ae[127&(W&&W.length||0)]=-1),Y=127,De=512;De>0;--De)Z=Ae[Y+34&127],U=Ae[Y=Y+1&127],Z^=Z<<13,U^=U<<17,Ae[Y]=(Z^=Z>>>15)^(U^=U>>>12);ce.w=Ye,ce.X=Ae,ce.i=Y}(V,me)}function _e(me,V){return V.i=me.i,V.w=me.w,V.X=me.X.slice(),V}function ze(me,V){null==me&&(me=+new Date);var A=new $e(me),ce=V&&V.state,W=function(){return(A.next()>>>0)/4294967296};return W.double=function(){do{var Y=((A.next()>>>11)+(A.next()>>>0)/4294967296)/(1<<21)}while(0===Y);return Y},W.int32=A.next,W.quick=W,ce&&(ce.X&&_e(ce,A),W.state=function(){return _e(A,{})}),W}Ie&&Ie.exports?Ie.exports=ze:te.amdD&&te.amdO?void 0!==(Te=function(){return ze}.call(Oe,te,Oe,Ie))&&(Ie.exports=Te):this.xor4096=ze}(0,Xe=te.nmd(Xe))},5583:function(Xe,Oe,te){var Te;!function(ot,Ie,qe){function $e(me){var V=this;V.next=function(){var U,Z,ce=V.x,W=V.i;return U=ce[W],Z=(U^=U>>>7)^U<<24,Z^=(U=ce[W+1&7])^U>>>10,Z^=(U=ce[W+3&7])^U>>>3,Z^=(U=ce[W+4&7])^U<<7,U=ce[W+7&7],ce[W]=Z^=(U^=U<<13)^U<<9,V.i=W+1&7,Z},function A(ce,W){var U,Y=[];if(W===(0|W))Y[0]=W;else for(W=""+W,U=0;U<W.length;++U)Y[7&U]=Y[7&U]<<15^W.charCodeAt(U)+Y[U+1&7]<<13;for(;Y.length<8;)Y.push(0);for(U=0;U<8&&0===Y[U];++U);for(8==U&&(Y[7]=-1),ce.x=Y,ce.i=0,U=256;U>0;--U)ce.next()}(V,me)}function _e(me,V){return V.x=me.x.slice(),V.i=me.i,V}function ze(me,V){null==me&&(me=+new Date);var A=new $e(me),ce=V&&V.state,W=function(){return(A.next()>>>0)/4294967296};return W.double=function(){do{var Y=((A.next()>>>11)+(A.next()>>>0)/4294967296)/(1<<21)}while(0===Y);return Y},W.int32=A.next,W.quick=W,ce&&(ce.x&&_e(ce,A),W.state=function(){return _e(A,{})}),W}Ie&&Ie.exports?Ie.exports=ze:te.amdD&&te.amdO?void 0!==(Te=function(){return ze}.call(Oe,te,Oe,Ie))&&(Ie.exports=Te):this.xorshift7=ze}(0,Xe=te.nmd(Xe))},7657:function(Xe,Oe,te){var Te;!function(ot,Ie,qe){function $e(me){var V=this,A="";V.next=function(){var W=V.x^V.x>>>2;return V.x=V.y,V.y=V.z,V.z=V.w,V.w=V.v,(V.d=V.d+362437|0)+(V.v=V.v^V.v<<4^W^W<<1)|0},V.x=0,V.y=0,V.z=0,V.w=0,V.v=0,me===(0|me)?V.x=me:A+=me;for(var ce=0;ce<A.length+64;ce++)V.x^=0|A.charCodeAt(ce),ce==A.length&&(V.d=V.x<<10^V.x>>>4),V.next()}function _e(me,V){return V.x=me.x,V.y=me.y,V.z=me.z,V.w=me.w,V.v=me.v,V.d=me.d,V}function ze(me,V){var A=new $e(me),ce=V&&V.state,W=function(){return(A.next()>>>0)/4294967296};return W.double=function(){do{var Y=((A.next()>>>11)+(A.next()>>>0)/4294967296)/(1<<21)}while(0===Y);return Y},W.int32=A.next,W.quick=W,ce&&("object"==typeof ce&&_e(ce,A),W.state=function(){return _e(A,{})}),W}Ie&&Ie.exports?Ie.exports=ze:te.amdD&&te.amdO?void 0!==(Te=function(){return ze}.call(Oe,te,Oe,Ie))&&(Ie.exports=Te):this.xorwow=ze}(0,Xe=te.nmd(Xe))},3818:function(Xe,Oe,te){var Te;!function(ot,Ie,qe){var U,$e=256,V=qe.pow($e,6),A=qe.pow(2,52),ce=2*A,W=255;function Z(Ke,et,tt){var v=[],J=Ae(Ye((et=1==et?{entropy:!0}:et||{}).entropy?[Ke,It(Ie)]:null==Ke?function vt(){try{var Ke;return U&&(Ke=U.randomBytes)?Ke=Ke($e):(Ke=new Uint8Array($e),(ot.crypto||ot.msCrypto).getRandomValues(Ke)),It(Ke)}catch(v){var et=ot.navigator,tt=et&&et.plugins;return[+new Date,ot,tt,ot.screen,It(Ie)]}}():Ke,3),v),T=new Y(v),E=function(){for(var Le=T.g(6),ye=V,Be=0;Le<A;)Le=(Le+Be)*$e,ye*=$e,Be=T.g(1);for(;Le>=ce;)Le/=2,ye/=2,Be>>>=1;return(Le+Be)/ye};return E.int32=function(){return 0|T.g(4)},E.quick=function(){return T.g(4)/4294967296},E.double=E,Ae(It(T.S),Ie),(et.pass||tt||function(Le,ye,Be,it){return it&&(it.S&&De(it,T),Le.state=function(){return De(T,{})}),Be?(qe.random=Le,ye):Le})(E,J,"global"in et?et.global:this==qe,et.state)}function Y(Ke){var et,tt=Ke.length,v=this,J=0,T=v.i=v.j=0,E=v.S=[];for(tt||(Ke=[tt++]);J<$e;)E[J]=J++;for(J=0;J<$e;J++)E[J]=E[T=W&T+Ke[J%tt]+(et=E[J])],E[T]=et;(v.g=function(Le){for(var ye,Be=0,it=v.i,_t=v.j,qt=v.S;Le--;)ye=qt[it=W&it+1],Be=Be*$e+qt[W&(qt[it]=qt[_t=W&_t+ye])+(qt[_t]=ye)];return v.i=it,v.j=_t,Be})($e)}function De(Ke,et){return et.i=Ke.i,et.j=Ke.j,et.S=Ke.S.slice(),et}function Ye(Ke,et){var J,tt=[],v=typeof Ke;if(et&&"object"==v)for(J in Ke)try{tt.push(Ye(Ke[J],et-1))}catch(T){}return tt.length?tt:"string"==v?Ke:Ke+"\0"}function Ae(Ke,et){for(var v,tt=Ke+"",J=0;J<tt.length;)et[W&J]=W&(v^=19*et[W&J])+tt.charCodeAt(J++);return It(et)}function It(Ke){return String.fromCharCode.apply(0,Ke)}if(Ae(qe.random(),Ie),Xe.exports){Xe.exports=Z;try{U=te(5042)}catch(Ke){}}else void 0!==(Te=function(){return Z}.call(Oe,te,Oe,Xe))&&(Xe.exports=Te)}("undefined"!=typeof self?self:this,[],Math)},5410:()=>{},8628:()=>{},1601:()=>{},7792:()=>{},4977:()=>{},5042:()=>{}}]);